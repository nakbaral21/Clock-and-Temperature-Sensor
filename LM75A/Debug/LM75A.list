
LM75A.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c70  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08003d7c  08003d7c  00013d7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003e2c  08003e2c  00013e2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003e30  08003e30  00013e30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000070  20000000  08003e34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000e0  20000070  08003ea4  00020070  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000150  08003ea4  00020150  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
  9 .debug_info   00009ffb  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001991  00000000  00000000  0002a094  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000a30  00000000  00000000  0002ba28  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000009b0  00000000  00000000  0002c458  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00004cbc  00000000  00000000  0002ce08  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002f91  00000000  00000000  00031ac4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00034a55  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00002d98  00000000  00000000  00034ad4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003d64 	.word	0x08003d64

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003d64 	.word	0x08003d64

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000208:	f1a2 0201 	sub.w	r2, r2, #1
 800020c:	d1ed      	bne.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__aeabi_f2uiz>:
 8000608:	0042      	lsls	r2, r0, #1
 800060a:	d20e      	bcs.n	800062a <__aeabi_f2uiz+0x22>
 800060c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000610:	d30b      	bcc.n	800062a <__aeabi_f2uiz+0x22>
 8000612:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000616:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800061a:	d409      	bmi.n	8000630 <__aeabi_f2uiz+0x28>
 800061c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000620:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000624:	fa23 f002 	lsr.w	r0, r3, r2
 8000628:	4770      	bx	lr
 800062a:	f04f 0000 	mov.w	r0, #0
 800062e:	4770      	bx	lr
 8000630:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000634:	d101      	bne.n	800063a <__aeabi_f2uiz+0x32>
 8000636:	0242      	lsls	r2, r0, #9
 8000638:	d102      	bne.n	8000640 <__aeabi_f2uiz+0x38>
 800063a:	f04f 30ff 	mov.w	r0, #4294967295
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop

08000648 <LM75_Temperature_9Bit_ReadReg>:

#include "LM75.h"

#define LM75_ADDRESS	((0x48 | 0x00) << 1 )

float LM75_Temperature_9Bit_ReadReg( uint8_t reg ){
 8000648:	b580      	push	{r7, lr}
 800064a:	b086      	sub	sp, #24
 800064c:	af02      	add	r7, sp, #8
 800064e:	4603      	mov	r3, r0
 8000650:	71fb      	strb	r3, [r7, #7]
	
	HAL_I2C_Master_Transmit( &MY_I2C, LM75_ADDRESS, &reg, 1, 500 );
 8000652:	1dfa      	adds	r2, r7, #7
 8000654:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000658:	9300      	str	r3, [sp, #0]
 800065a:	2301      	movs	r3, #1
 800065c:	2190      	movs	r1, #144	; 0x90
 800065e:	4820      	ldr	r0, [pc, #128]	; (80006e0 <LM75_Temperature_9Bit_ReadReg+0x98>)
 8000660:	f001 f836 	bl	80016d0 <HAL_I2C_Master_Transmit>
	
	
	uint16_t value;
	HAL_I2C_Master_Receive( &MY_I2C, LM75_ADDRESS, (uint8_t*)&value, 2, 500 );
 8000664:	f107 020e 	add.w	r2, r7, #14
 8000668:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800066c:	9300      	str	r3, [sp, #0]
 800066e:	2302      	movs	r3, #2
 8000670:	2190      	movs	r1, #144	; 0x90
 8000672:	481b      	ldr	r0, [pc, #108]	; (80006e0 <LM75_Temperature_9Bit_ReadReg+0x98>)
 8000674:	f001 f92a 	bl	80018cc <HAL_I2C_Master_Receive>
	
	value = ((( value >> 8 ) | ( value << 8 )) >> 7) & 0x01FF;
 8000678:	89fb      	ldrh	r3, [r7, #14]
 800067a:	0a1b      	lsrs	r3, r3, #8
 800067c:	b29b      	uxth	r3, r3
 800067e:	461a      	mov	r2, r3
 8000680:	89fb      	ldrh	r3, [r7, #14]
 8000682:	021b      	lsls	r3, r3, #8
 8000684:	4313      	orrs	r3, r2
 8000686:	11db      	asrs	r3, r3, #7
 8000688:	b29b      	uxth	r3, r3
 800068a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800068e:	b29b      	uxth	r3, r3
 8000690:	81fb      	strh	r3, [r7, #14]
	

	if( value & 0x0100 ){
 8000692:	89fb      	ldrh	r3, [r7, #14]
 8000694:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000698:	2b00      	cmp	r3, #0
 800069a:	d012      	beq.n	80006c2 <LM75_Temperature_9Bit_ReadReg+0x7a>
		value = (0x01FE ^ value) + 2;
 800069c:	89fb      	ldrh	r3, [r7, #14]
 800069e:	f483 73ff 	eor.w	r3, r3, #510	; 0x1fe
 80006a2:	b29b      	uxth	r3, r3
 80006a4:	3302      	adds	r3, #2
 80006a6:	b29b      	uxth	r3, r3
 80006a8:	81fb      	strh	r3, [r7, #14]
		return (float)( value * (-0.5f) );
 80006aa:	89fb      	ldrh	r3, [r7, #14]
 80006ac:	4618      	mov	r0, r3
 80006ae:	f7ff fe07 	bl	80002c0 <__aeabi_i2f>
 80006b2:	4603      	mov	r3, r0
 80006b4:	f04f 413f 	mov.w	r1, #3204448256	; 0xbf000000
 80006b8:	4618      	mov	r0, r3
 80006ba:	f7ff fe55 	bl	8000368 <__aeabi_fmul>
 80006be:	4603      	mov	r3, r0
 80006c0:	e00a      	b.n	80006d8 <LM75_Temperature_9Bit_ReadReg+0x90>
	}
	else{
		return (float)( value * 0.5f );
 80006c2:	89fb      	ldrh	r3, [r7, #14]
 80006c4:	4618      	mov	r0, r3
 80006c6:	f7ff fdfb 	bl	80002c0 <__aeabi_i2f>
 80006ca:	4603      	mov	r3, r0
 80006cc:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80006d0:	4618      	mov	r0, r3
 80006d2:	f7ff fe49 	bl	8000368 <__aeabi_fmul>
 80006d6:	4603      	mov	r3, r0
	}

}
 80006d8:	4618      	mov	r0, r3
 80006da:	3710      	adds	r7, #16
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	200000dc 	.word	0x200000dc

080006e4 <LM75_TemperatureRead>:
	}
	
	HAL_I2C_Master_Transmit( &MY_I2C, LM75_ADDRESS, buff, 2, 500 );
}

float LM75_TemperatureRead(void){
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
	#ifdef LM75_11BIT
		return LM75_Temperature_11Bit_ReadReg( LM75_TEMPERATURE );
	#endif

	#ifdef LM75_9BIT
		return LM75_Temperature_9Bit_ReadReg( LM75_TEMPERATURE );
 80006e8:	2000      	movs	r0, #0
 80006ea:	f7ff ffad 	bl	8000648 <LM75_Temperature_9Bit_ReadReg>
 80006ee:	4603      	mov	r3, r0
	#endif	
}
 80006f0:	4618      	mov	r0, r3
 80006f2:	bd80      	pop	{r7, pc}

080006f4 <LM75_THYST_Read>:

float LM75_THYST_Read(void){
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0

	return LM75_Temperature_9Bit_ReadReg( LM75_THYST );
 80006f8:	2002      	movs	r0, #2
 80006fa:	f7ff ffa5 	bl	8000648 <LM75_Temperature_9Bit_ReadReg>
 80006fe:	4603      	mov	r3, r0
}
 8000700:	4618      	mov	r0, r3
 8000702:	bd80      	pop	{r7, pc}

08000704 <LM75_TOS_Read>:

float LM75_TOS_Read(void){
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0

	return LM75_Temperature_9Bit_ReadReg( LM75_TOS );
 8000708:	2003      	movs	r0, #3
 800070a:	f7ff ff9d 	bl	8000648 <LM75_Temperature_9Bit_ReadReg>
 800070e:	4603      	mov	r3, r0
}
 8000710:	4618      	mov	r0, r3
 8000712:	bd80      	pop	{r7, pc}

08000714 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b086      	sub	sp, #24
 8000718:	af02      	add	r7, sp, #8
 800071a:	4603      	mov	r3, r0
 800071c:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800071e:	79fb      	ldrb	r3, [r7, #7]
 8000720:	f023 030f 	bic.w	r3, r3, #15
 8000724:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000726:	79fb      	ldrb	r3, [r7, #7]
 8000728:	011b      	lsls	r3, r3, #4
 800072a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800072c:	7bfb      	ldrb	r3, [r7, #15]
 800072e:	f043 030c 	orr.w	r3, r3, #12
 8000732:	b2db      	uxtb	r3, r3
 8000734:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000736:	7bfb      	ldrb	r3, [r7, #15]
 8000738:	f043 0308 	orr.w	r3, r3, #8
 800073c:	b2db      	uxtb	r3, r3
 800073e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000740:	7bbb      	ldrb	r3, [r7, #14]
 8000742:	f043 030c 	orr.w	r3, r3, #12
 8000746:	b2db      	uxtb	r3, r3
 8000748:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800074a:	7bbb      	ldrb	r3, [r7, #14]
 800074c:	f043 0308 	orr.w	r3, r3, #8
 8000750:	b2db      	uxtb	r3, r3
 8000752:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000754:	f107 0208 	add.w	r2, r7, #8
 8000758:	2364      	movs	r3, #100	; 0x64
 800075a:	9300      	str	r3, [sp, #0]
 800075c:	2304      	movs	r3, #4
 800075e:	214e      	movs	r1, #78	; 0x4e
 8000760:	4803      	ldr	r0, [pc, #12]	; (8000770 <lcd_send_cmd+0x5c>)
 8000762:	f000 ffb5 	bl	80016d0 <HAL_I2C_Master_Transmit>
}
 8000766:	bf00      	nop
 8000768:	3710      	adds	r7, #16
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	200000dc 	.word	0x200000dc

08000774 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b086      	sub	sp, #24
 8000778:	af02      	add	r7, sp, #8
 800077a:	4603      	mov	r3, r0
 800077c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800077e:	79fb      	ldrb	r3, [r7, #7]
 8000780:	f023 030f 	bic.w	r3, r3, #15
 8000784:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000786:	79fb      	ldrb	r3, [r7, #7]
 8000788:	011b      	lsls	r3, r3, #4
 800078a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 800078c:	7bfb      	ldrb	r3, [r7, #15]
 800078e:	f043 030d 	orr.w	r3, r3, #13
 8000792:	b2db      	uxtb	r3, r3
 8000794:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1
 8000796:	7bfb      	ldrb	r3, [r7, #15]
 8000798:	f043 0309 	orr.w	r3, r3, #9
 800079c:	b2db      	uxtb	r3, r3
 800079e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 80007a0:	7bbb      	ldrb	r3, [r7, #14]
 80007a2:	f043 030d 	orr.w	r3, r3, #13
 80007a6:	b2db      	uxtb	r3, r3
 80007a8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1
 80007aa:	7bbb      	ldrb	r3, [r7, #14]
 80007ac:	f043 0309 	orr.w	r3, r3, #9
 80007b0:	b2db      	uxtb	r3, r3
 80007b2:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80007b4:	f107 0208 	add.w	r2, r7, #8
 80007b8:	2364      	movs	r3, #100	; 0x64
 80007ba:	9300      	str	r3, [sp, #0]
 80007bc:	2304      	movs	r3, #4
 80007be:	214e      	movs	r1, #78	; 0x4e
 80007c0:	4803      	ldr	r0, [pc, #12]	; (80007d0 <lcd_send_data+0x5c>)
 80007c2:	f000 ff85 	bl	80016d0 <HAL_I2C_Master_Transmit>
}
 80007c6:	bf00      	nop
 80007c8:	3710      	adds	r7, #16
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	200000dc 	.word	0x200000dc

080007d4 <lcd_clear>:

void lcd_clear (void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x00);
 80007da:	2000      	movs	r0, #0
 80007dc:	f7ff ff9a 	bl	8000714 <lcd_send_cmd>
	for (int i=0; i<100; i++)
 80007e0:	2300      	movs	r3, #0
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	e005      	b.n	80007f2 <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 80007e6:	2020      	movs	r0, #32
 80007e8:	f7ff ffc4 	bl	8000774 <lcd_send_data>
	for (int i=0; i<100; i++)
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	3301      	adds	r3, #1
 80007f0:	607b      	str	r3, [r7, #4]
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	2b63      	cmp	r3, #99	; 0x63
 80007f6:	ddf6      	ble.n	80007e6 <lcd_clear+0x12>
	}
}
 80007f8:	bf00      	nop
 80007fa:	3708      	adds	r7, #8
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}

08000800 <lcd_init>:

void lcd_init (void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000804:	2032      	movs	r0, #50	; 0x32
 8000806:	f000 fbcd 	bl	8000fa4 <HAL_Delay>
	lcd_send_cmd (0x30);
 800080a:	2030      	movs	r0, #48	; 0x30
 800080c:	f7ff ff82 	bl	8000714 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000810:	2005      	movs	r0, #5
 8000812:	f000 fbc7 	bl	8000fa4 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000816:	2030      	movs	r0, #48	; 0x30
 8000818:	f7ff ff7c 	bl	8000714 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 800081c:	2001      	movs	r0, #1
 800081e:	f000 fbc1 	bl	8000fa4 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000822:	2030      	movs	r0, #48	; 0x30
 8000824:	f7ff ff76 	bl	8000714 <lcd_send_cmd>
	HAL_Delay(10);
 8000828:	200a      	movs	r0, #10
 800082a:	f000 fbbb 	bl	8000fa4 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 800082e:	2020      	movs	r0, #32
 8000830:	f7ff ff70 	bl	8000714 <lcd_send_cmd>
	HAL_Delay(10);
 8000834:	200a      	movs	r0, #10
 8000836:	f000 fbb5 	bl	8000fa4 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800083a:	2028      	movs	r0, #40	; 0x28
 800083c:	f7ff ff6a 	bl	8000714 <lcd_send_cmd>
	HAL_Delay(1);
 8000840:	2001      	movs	r0, #1
 8000842:	f000 fbaf 	bl	8000fa4 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000846:	2008      	movs	r0, #8
 8000848:	f7ff ff64 	bl	8000714 <lcd_send_cmd>
	HAL_Delay(1);
 800084c:	2001      	movs	r0, #1
 800084e:	f000 fba9 	bl	8000fa4 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000852:	2001      	movs	r0, #1
 8000854:	f7ff ff5e 	bl	8000714 <lcd_send_cmd>
	HAL_Delay(1);
 8000858:	2001      	movs	r0, #1
 800085a:	f000 fba3 	bl	8000fa4 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 800085e:	2006      	movs	r0, #6
 8000860:	f7ff ff58 	bl	8000714 <lcd_send_cmd>
	HAL_Delay(1);
 8000864:	2001      	movs	r0, #1
 8000866:	f000 fb9d 	bl	8000fa4 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 800086a:	200c      	movs	r0, #12
 800086c:	f7ff ff52 	bl	8000714 <lcd_send_cmd>
}
 8000870:	bf00      	nop
 8000872:	bd80      	pop	{r7, pc}

08000874 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 800087c:	e006      	b.n	800088c <lcd_send_string+0x18>
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	1c5a      	adds	r2, r3, #1
 8000882:	607a      	str	r2, [r7, #4]
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	4618      	mov	r0, r3
 8000888:	f7ff ff74 	bl	8000774 <lcd_send_data>
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d1f4      	bne.n	800087e <lcd_send_string+0xa>
}
 8000894:	bf00      	nop
 8000896:	3708      	adds	r7, #8
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}

0800089c <bcdToDec>:
{
  return (uint8_t)( (val/10*16) + (val%10) );
}
// Convert binary coded decimal to normal decimal numbers
int bcdToDec(uint8_t val)
{
 800089c:	b480      	push	{r7}
 800089e:	b083      	sub	sp, #12
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	4603      	mov	r3, r0
 80008a4:	71fb      	strb	r3, [r7, #7]
  return (int)( (val/16*10) + (val%16) );
 80008a6:	79fb      	ldrb	r3, [r7, #7]
 80008a8:	091b      	lsrs	r3, r3, #4
 80008aa:	b2db      	uxtb	r3, r3
 80008ac:	461a      	mov	r2, r3
 80008ae:	4613      	mov	r3, r2
 80008b0:	009b      	lsls	r3, r3, #2
 80008b2:	4413      	add	r3, r2
 80008b4:	005b      	lsls	r3, r3, #1
 80008b6:	461a      	mov	r2, r3
 80008b8:	79fb      	ldrb	r3, [r7, #7]
 80008ba:	f003 030f 	and.w	r3, r3, #15
 80008be:	4413      	add	r3, r2
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	370c      	adds	r7, #12
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bc80      	pop	{r7}
 80008c8:	4770      	bx	lr
	...

080008cc <Get_Time>:

	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, 0x00, 1, set_time, 7, 1000);
}

void Get_Time (void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b086      	sub	sp, #24
 80008d0:	af04      	add	r7, sp, #16
	uint8_t get_time[7];
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, 1, get_time, 7, 1000);
 80008d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008d6:	9302      	str	r3, [sp, #8]
 80008d8:	2307      	movs	r3, #7
 80008da:	9301      	str	r3, [sp, #4]
 80008dc:	463b      	mov	r3, r7
 80008de:	9300      	str	r3, [sp, #0]
 80008e0:	2301      	movs	r3, #1
 80008e2:	2200      	movs	r2, #0
 80008e4:	21d0      	movs	r1, #208	; 0xd0
 80008e6:	481f      	ldr	r0, [pc, #124]	; (8000964 <Get_Time+0x98>)
 80008e8:	f001 fa4a 	bl	8001d80 <HAL_I2C_Mem_Read>
	time.seconds = bcdToDec(get_time[0]);
 80008ec:	783b      	ldrb	r3, [r7, #0]
 80008ee:	4618      	mov	r0, r3
 80008f0:	f7ff ffd4 	bl	800089c <bcdToDec>
 80008f4:	4603      	mov	r3, r0
 80008f6:	b2da      	uxtb	r2, r3
 80008f8:	4b1b      	ldr	r3, [pc, #108]	; (8000968 <Get_Time+0x9c>)
 80008fa:	701a      	strb	r2, [r3, #0]
	time.minutes = bcdToDec(get_time[1]);
 80008fc:	787b      	ldrb	r3, [r7, #1]
 80008fe:	4618      	mov	r0, r3
 8000900:	f7ff ffcc 	bl	800089c <bcdToDec>
 8000904:	4603      	mov	r3, r0
 8000906:	b2da      	uxtb	r2, r3
 8000908:	4b17      	ldr	r3, [pc, #92]	; (8000968 <Get_Time+0x9c>)
 800090a:	705a      	strb	r2, [r3, #1]
	time.hour = bcdToDec(get_time[2]);
 800090c:	78bb      	ldrb	r3, [r7, #2]
 800090e:	4618      	mov	r0, r3
 8000910:	f7ff ffc4 	bl	800089c <bcdToDec>
 8000914:	4603      	mov	r3, r0
 8000916:	b2da      	uxtb	r2, r3
 8000918:	4b13      	ldr	r3, [pc, #76]	; (8000968 <Get_Time+0x9c>)
 800091a:	709a      	strb	r2, [r3, #2]
	time.dayofweek = bcdToDec(get_time[3]);
 800091c:	78fb      	ldrb	r3, [r7, #3]
 800091e:	4618      	mov	r0, r3
 8000920:	f7ff ffbc 	bl	800089c <bcdToDec>
 8000924:	4603      	mov	r3, r0
 8000926:	b2da      	uxtb	r2, r3
 8000928:	4b0f      	ldr	r3, [pc, #60]	; (8000968 <Get_Time+0x9c>)
 800092a:	70da      	strb	r2, [r3, #3]
	time.dayofmonth = bcdToDec(get_time[4]);
 800092c:	793b      	ldrb	r3, [r7, #4]
 800092e:	4618      	mov	r0, r3
 8000930:	f7ff ffb4 	bl	800089c <bcdToDec>
 8000934:	4603      	mov	r3, r0
 8000936:	b2da      	uxtb	r2, r3
 8000938:	4b0b      	ldr	r3, [pc, #44]	; (8000968 <Get_Time+0x9c>)
 800093a:	711a      	strb	r2, [r3, #4]
	time.month = bcdToDec(get_time[5]);
 800093c:	797b      	ldrb	r3, [r7, #5]
 800093e:	4618      	mov	r0, r3
 8000940:	f7ff ffac 	bl	800089c <bcdToDec>
 8000944:	4603      	mov	r3, r0
 8000946:	b2da      	uxtb	r2, r3
 8000948:	4b07      	ldr	r3, [pc, #28]	; (8000968 <Get_Time+0x9c>)
 800094a:	715a      	strb	r2, [r3, #5]
	time.year = bcdToDec(get_time[6]);
 800094c:	79bb      	ldrb	r3, [r7, #6]
 800094e:	4618      	mov	r0, r3
 8000950:	f7ff ffa4 	bl	800089c <bcdToDec>
 8000954:	4603      	mov	r3, r0
 8000956:	b2da      	uxtb	r2, r3
 8000958:	4b03      	ldr	r3, [pc, #12]	; (8000968 <Get_Time+0x9c>)
 800095a:	719a      	strb	r2, [r3, #6]
}
 800095c:	bf00      	nop
 800095e:	3708      	adds	r7, #8
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	200000dc 	.word	0x200000dc
 8000968:	2000013c 	.word	0x2000013c

0800096c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800096c:	b590      	push	{r4, r7, lr}
 800096e:	b087      	sub	sp, #28
 8000970:	af02      	add	r7, sp, #8
  THYST = LM75_THYST_Read();
 8000972:	f7ff febf 	bl	80006f4 <LM75_THYST_Read>
 8000976:	4602      	mov	r2, r0
 8000978:	4b58      	ldr	r3, [pc, #352]	; (8000adc <main+0x170>)
 800097a:	601a      	str	r2, [r3, #0]
  TOS = LM75_TOS_Read();
 800097c:	f7ff fec2 	bl	8000704 <LM75_TOS_Read>
 8000980:	4602      	mov	r2, r0
 8000982:	4b57      	ldr	r3, [pc, #348]	; (8000ae0 <main+0x174>)
 8000984:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000986:	f000 faab 	bl	8000ee0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800098a:	f000 f8c3 	bl	8000b14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800098e:	f000 f95f 	bl	8000c50 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000992:	f000 f905 	bl	8000ba0 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8000996:	f000 f931 	bl	8000bfc <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 800099a:	f7ff ff31 	bl	8000800 <lcd_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 T_cel =  LM75_TemperatureRead();
 800099e:	f7ff fea1 	bl	80006e4 <LM75_TemperatureRead>
 80009a2:	4602      	mov	r2, r0
 80009a4:	4b4f      	ldr	r3, [pc, #316]	; (8000ae4 <main+0x178>)
 80009a6:	601a      	str	r2, [r3, #0]
	 T_cel *= 100;
 80009a8:	4b4e      	ldr	r3, [pc, #312]	; (8000ae4 <main+0x178>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	494e      	ldr	r1, [pc, #312]	; (8000ae8 <main+0x17c>)
 80009ae:	4618      	mov	r0, r3
 80009b0:	f7ff fcda 	bl	8000368 <__aeabi_fmul>
 80009b4:	4603      	mov	r3, r0
 80009b6:	461a      	mov	r2, r3
 80009b8:	4b4a      	ldr	r3, [pc, #296]	; (8000ae4 <main+0x178>)
 80009ba:	601a      	str	r2, [r3, #0]
	 T_far = (T_cel*9/5)+3200;
 80009bc:	4b49      	ldr	r3, [pc, #292]	; (8000ae4 <main+0x178>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	494a      	ldr	r1, [pc, #296]	; (8000aec <main+0x180>)
 80009c2:	4618      	mov	r0, r3
 80009c4:	f7ff fcd0 	bl	8000368 <__aeabi_fmul>
 80009c8:	4603      	mov	r3, r0
 80009ca:	4949      	ldr	r1, [pc, #292]	; (8000af0 <main+0x184>)
 80009cc:	4618      	mov	r0, r3
 80009ce:	f7ff fd7f 	bl	80004d0 <__aeabi_fdiv>
 80009d2:	4603      	mov	r3, r0
 80009d4:	4947      	ldr	r1, [pc, #284]	; (8000af4 <main+0x188>)
 80009d6:	4618      	mov	r0, r3
 80009d8:	f7ff fbbe 	bl	8000158 <__addsf3>
 80009dc:	4603      	mov	r3, r0
 80009de:	461a      	mov	r2, r3
 80009e0:	4b45      	ldr	r3, [pc, #276]	; (8000af8 <main+0x18c>)
 80009e2:	601a      	str	r2, [r3, #0]
	 // Temperature Celcius
	 sprintf((char*)buffer,
			 "Celcius : %u.%u C",
			 ((unsigned int)T_cel / 100),
 80009e4:	4b3f      	ldr	r3, [pc, #252]	; (8000ae4 <main+0x178>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4618      	mov	r0, r3
 80009ea:	f7ff fe0d 	bl	8000608 <__aeabi_f2uiz>
 80009ee:	4602      	mov	r2, r0
	 sprintf((char*)buffer,
 80009f0:	4b42      	ldr	r3, [pc, #264]	; (8000afc <main+0x190>)
 80009f2:	fba3 2302 	umull	r2, r3, r3, r2
 80009f6:	095c      	lsrs	r4, r3, #5
			 ((unsigned int)T_cel % 100));
 80009f8:	4b3a      	ldr	r3, [pc, #232]	; (8000ae4 <main+0x178>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4618      	mov	r0, r3
 80009fe:	f7ff fe03 	bl	8000608 <__aeabi_f2uiz>
 8000a02:	4602      	mov	r2, r0
	 sprintf((char*)buffer,
 8000a04:	4b3d      	ldr	r3, [pc, #244]	; (8000afc <main+0x190>)
 8000a06:	fba3 1302 	umull	r1, r3, r3, r2
 8000a0a:	095b      	lsrs	r3, r3, #5
 8000a0c:	2164      	movs	r1, #100	; 0x64
 8000a0e:	fb01 f303 	mul.w	r3, r1, r3
 8000a12:	1ad3      	subs	r3, r2, r3
 8000a14:	4638      	mov	r0, r7
 8000a16:	4622      	mov	r2, r4
 8000a18:	4939      	ldr	r1, [pc, #228]	; (8000b00 <main+0x194>)
 8000a1a:	f002 fd77 	bl	800350c <siprintf>
	 lcd_send_cmd (0x80|0x14); //Print ke Line 3 LCD
 8000a1e:	2094      	movs	r0, #148	; 0x94
 8000a20:	f7ff fe78 	bl	8000714 <lcd_send_cmd>
	 lcd_send_string(buffer);
 8000a24:	463b      	mov	r3, r7
 8000a26:	4618      	mov	r0, r3
 8000a28:	f7ff ff24 	bl	8000874 <lcd_send_string>
	 // Temperature Fahrenheit
	 sprintf((char*)buffer,
			 "Fahrenheit : %u.%u F",
			 ((unsigned int)T_far / 100),
 8000a2c:	4b32      	ldr	r3, [pc, #200]	; (8000af8 <main+0x18c>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4618      	mov	r0, r3
 8000a32:	f7ff fde9 	bl	8000608 <__aeabi_f2uiz>
 8000a36:	4602      	mov	r2, r0
	 sprintf((char*)buffer,
 8000a38:	4b30      	ldr	r3, [pc, #192]	; (8000afc <main+0x190>)
 8000a3a:	fba3 2302 	umull	r2, r3, r3, r2
 8000a3e:	095c      	lsrs	r4, r3, #5
			 ((unsigned int)T_far % 100));
 8000a40:	4b2d      	ldr	r3, [pc, #180]	; (8000af8 <main+0x18c>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4618      	mov	r0, r3
 8000a46:	f7ff fddf 	bl	8000608 <__aeabi_f2uiz>
 8000a4a:	4602      	mov	r2, r0
	 sprintf((char*)buffer,
 8000a4c:	4b2b      	ldr	r3, [pc, #172]	; (8000afc <main+0x190>)
 8000a4e:	fba3 1302 	umull	r1, r3, r3, r2
 8000a52:	095b      	lsrs	r3, r3, #5
 8000a54:	2164      	movs	r1, #100	; 0x64
 8000a56:	fb01 f303 	mul.w	r3, r1, r3
 8000a5a:	1ad3      	subs	r3, r2, r3
 8000a5c:	4638      	mov	r0, r7
 8000a5e:	4622      	mov	r2, r4
 8000a60:	4928      	ldr	r1, [pc, #160]	; (8000b04 <main+0x198>)
 8000a62:	f002 fd53 	bl	800350c <siprintf>
	 lcd_send_cmd (0x80|0x54); //Print ke Line 4 LCD
 8000a66:	20d4      	movs	r0, #212	; 0xd4
 8000a68:	f7ff fe54 	bl	8000714 <lcd_send_cmd>
	 lcd_send_string(buffer);
 8000a6c:	463b      	mov	r3, r7
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f7ff ff00 	bl	8000874 <lcd_send_string>
	 // Hour-Minutes-Seconds
	 Get_Time();
 8000a74:	f7ff ff2a 	bl	80008cc <Get_Time>
	 sprintf (buffer, "%02d:%02d:%02d", time.hour, time.minutes, time.seconds);
 8000a78:	4b23      	ldr	r3, [pc, #140]	; (8000b08 <main+0x19c>)
 8000a7a:	789b      	ldrb	r3, [r3, #2]
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	4b22      	ldr	r3, [pc, #136]	; (8000b08 <main+0x19c>)
 8000a80:	785b      	ldrb	r3, [r3, #1]
 8000a82:	4619      	mov	r1, r3
 8000a84:	4b20      	ldr	r3, [pc, #128]	; (8000b08 <main+0x19c>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	4638      	mov	r0, r7
 8000a8a:	9300      	str	r3, [sp, #0]
 8000a8c:	460b      	mov	r3, r1
 8000a8e:	491f      	ldr	r1, [pc, #124]	; (8000b0c <main+0x1a0>)
 8000a90:	f002 fd3c 	bl	800350c <siprintf>
	 lcd_send_cmd (0x80|0x06);
 8000a94:	2086      	movs	r0, #134	; 0x86
 8000a96:	f7ff fe3d 	bl	8000714 <lcd_send_cmd>
	 lcd_send_string(buffer); //Print ke Line 1 LCD
 8000a9a:	463b      	mov	r3, r7
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f7ff fee9 	bl	8000874 <lcd_send_string>
	 // Day-Month-Year
	 sprintf (buffer, "%02d-%02d-20%02d", time.dayofmonth, time.month, time.year);
 8000aa2:	4b19      	ldr	r3, [pc, #100]	; (8000b08 <main+0x19c>)
 8000aa4:	791b      	ldrb	r3, [r3, #4]
 8000aa6:	461a      	mov	r2, r3
 8000aa8:	4b17      	ldr	r3, [pc, #92]	; (8000b08 <main+0x19c>)
 8000aaa:	795b      	ldrb	r3, [r3, #5]
 8000aac:	4619      	mov	r1, r3
 8000aae:	4b16      	ldr	r3, [pc, #88]	; (8000b08 <main+0x19c>)
 8000ab0:	799b      	ldrb	r3, [r3, #6]
 8000ab2:	4638      	mov	r0, r7
 8000ab4:	9300      	str	r3, [sp, #0]
 8000ab6:	460b      	mov	r3, r1
 8000ab8:	4915      	ldr	r1, [pc, #84]	; (8000b10 <main+0x1a4>)
 8000aba:	f002 fd27 	bl	800350c <siprintf>
	 lcd_send_cmd (0x80|0x45);
 8000abe:	20c5      	movs	r0, #197	; 0xc5
 8000ac0:	f7ff fe28 	bl	8000714 <lcd_send_cmd>
	 lcd_send_string(buffer); //Print ke Line 2 LCD
 8000ac4:	463b      	mov	r3, r7
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f7ff fed4 	bl	8000874 <lcd_send_string>
	 // Wait
	 HAL_Delay (1000);
 8000acc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ad0:	f000 fa68 	bl	8000fa4 <HAL_Delay>
	 lcd_clear();
 8000ad4:	f7ff fe7e 	bl	80007d4 <lcd_clear>
	 T_cel =  LM75_TemperatureRead();
 8000ad8:	e761      	b.n	800099e <main+0x32>
 8000ada:	bf00      	nop
 8000adc:	20000130 	.word	0x20000130
 8000ae0:	20000144 	.word	0x20000144
 8000ae4:	20000134 	.word	0x20000134
 8000ae8:	42c80000 	.word	0x42c80000
 8000aec:	41100000 	.word	0x41100000
 8000af0:	40a00000 	.word	0x40a00000
 8000af4:	45480000 	.word	0x45480000
 8000af8:	20000138 	.word	0x20000138
 8000afc:	51eb851f 	.word	0x51eb851f
 8000b00:	08003d7c 	.word	0x08003d7c
 8000b04:	08003d90 	.word	0x08003d90
 8000b08:	2000013c 	.word	0x2000013c
 8000b0c:	08003da8 	.word	0x08003da8
 8000b10:	08003db8 	.word	0x08003db8

08000b14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b090      	sub	sp, #64	; 0x40
 8000b18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b1a:	f107 0318 	add.w	r3, r7, #24
 8000b1e:	2228      	movs	r2, #40	; 0x28
 8000b20:	2100      	movs	r1, #0
 8000b22:	4618      	mov	r0, r3
 8000b24:	f002 fcea 	bl	80034fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b28:	1d3b      	adds	r3, r7, #4
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	601a      	str	r2, [r3, #0]
 8000b2e:	605a      	str	r2, [r3, #4]
 8000b30:	609a      	str	r2, [r3, #8]
 8000b32:	60da      	str	r2, [r3, #12]
 8000b34:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b36:	2301      	movs	r3, #1
 8000b38:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b3a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b3e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000b40:	2300      	movs	r3, #0
 8000b42:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b44:	2301      	movs	r3, #1
 8000b46:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b48:	2302      	movs	r3, #2
 8000b4a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b4c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b50:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000b52:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000b56:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b58:	f107 0318 	add.w	r3, r7, #24
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f001 ff85 	bl	8002a6c <HAL_RCC_OscConfig>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000b68:	f000 f8a0 	bl	8000cac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b6c:	230f      	movs	r3, #15
 8000b6e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b70:	2302      	movs	r3, #2
 8000b72:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b74:	2300      	movs	r3, #0
 8000b76:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b7c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b82:	1d3b      	adds	r3, r7, #4
 8000b84:	2102      	movs	r1, #2
 8000b86:	4618      	mov	r0, r3
 8000b88:	f002 f9f0 	bl	8002f6c <HAL_RCC_ClockConfig>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000b92:	f000 f88b 	bl	8000cac <Error_Handler>
  }
}
 8000b96:	bf00      	nop
 8000b98:	3740      	adds	r7, #64	; 0x40
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
	...

08000ba0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ba4:	4b12      	ldr	r3, [pc, #72]	; (8000bf0 <MX_I2C1_Init+0x50>)
 8000ba6:	4a13      	ldr	r2, [pc, #76]	; (8000bf4 <MX_I2C1_Init+0x54>)
 8000ba8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000baa:	4b11      	ldr	r3, [pc, #68]	; (8000bf0 <MX_I2C1_Init+0x50>)
 8000bac:	4a12      	ldr	r2, [pc, #72]	; (8000bf8 <MX_I2C1_Init+0x58>)
 8000bae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000bb0:	4b0f      	ldr	r3, [pc, #60]	; (8000bf0 <MX_I2C1_Init+0x50>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000bb6:	4b0e      	ldr	r3, [pc, #56]	; (8000bf0 <MX_I2C1_Init+0x50>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bbc:	4b0c      	ldr	r3, [pc, #48]	; (8000bf0 <MX_I2C1_Init+0x50>)
 8000bbe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000bc2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bc4:	4b0a      	ldr	r3, [pc, #40]	; (8000bf0 <MX_I2C1_Init+0x50>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000bca:	4b09      	ldr	r3, [pc, #36]	; (8000bf0 <MX_I2C1_Init+0x50>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bd0:	4b07      	ldr	r3, [pc, #28]	; (8000bf0 <MX_I2C1_Init+0x50>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bd6:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <MX_I2C1_Init+0x50>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000bdc:	4804      	ldr	r0, [pc, #16]	; (8000bf0 <MX_I2C1_Init+0x50>)
 8000bde:	f000 fc3f 	bl	8001460 <HAL_I2C_Init>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000be8:	f000 f860 	bl	8000cac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000bec:	bf00      	nop
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	200000dc 	.word	0x200000dc
 8000bf4:	40005400 	.word	0x40005400
 8000bf8:	000186a0 	.word	0x000186a0

08000bfc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c00:	4b11      	ldr	r3, [pc, #68]	; (8000c48 <MX_USART3_UART_Init+0x4c>)
 8000c02:	4a12      	ldr	r2, [pc, #72]	; (8000c4c <MX_USART3_UART_Init+0x50>)
 8000c04:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8000c06:	4b10      	ldr	r3, [pc, #64]	; (8000c48 <MX_USART3_UART_Init+0x4c>)
 8000c08:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000c0c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c0e:	4b0e      	ldr	r3, [pc, #56]	; (8000c48 <MX_USART3_UART_Init+0x4c>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c14:	4b0c      	ldr	r3, [pc, #48]	; (8000c48 <MX_USART3_UART_Init+0x4c>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c1a:	4b0b      	ldr	r3, [pc, #44]	; (8000c48 <MX_USART3_UART_Init+0x4c>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c20:	4b09      	ldr	r3, [pc, #36]	; (8000c48 <MX_USART3_UART_Init+0x4c>)
 8000c22:	220c      	movs	r2, #12
 8000c24:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c26:	4b08      	ldr	r3, [pc, #32]	; (8000c48 <MX_USART3_UART_Init+0x4c>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c2c:	4b06      	ldr	r3, [pc, #24]	; (8000c48 <MX_USART3_UART_Init+0x4c>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c32:	4805      	ldr	r0, [pc, #20]	; (8000c48 <MX_USART3_UART_Init+0x4c>)
 8000c34:	f002 fb36 	bl	80032a4 <HAL_UART_Init>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000c3e:	f000 f835 	bl	8000cac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c42:	bf00      	nop
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	20000098 	.word	0x20000098
 8000c4c:	40004800 	.word	0x40004800

08000c50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b085      	sub	sp, #20
 8000c54:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c56:	4a14      	ldr	r2, [pc, #80]	; (8000ca8 <MX_GPIO_Init+0x58>)
 8000c58:	4b13      	ldr	r3, [pc, #76]	; (8000ca8 <MX_GPIO_Init+0x58>)
 8000c5a:	699b      	ldr	r3, [r3, #24]
 8000c5c:	f043 0320 	orr.w	r3, r3, #32
 8000c60:	6193      	str	r3, [r2, #24]
 8000c62:	4b11      	ldr	r3, [pc, #68]	; (8000ca8 <MX_GPIO_Init+0x58>)
 8000c64:	699b      	ldr	r3, [r3, #24]
 8000c66:	f003 0320 	and.w	r3, r3, #32
 8000c6a:	60fb      	str	r3, [r7, #12]
 8000c6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c6e:	4a0e      	ldr	r2, [pc, #56]	; (8000ca8 <MX_GPIO_Init+0x58>)
 8000c70:	4b0d      	ldr	r3, [pc, #52]	; (8000ca8 <MX_GPIO_Init+0x58>)
 8000c72:	699b      	ldr	r3, [r3, #24]
 8000c74:	f043 0308 	orr.w	r3, r3, #8
 8000c78:	6193      	str	r3, [r2, #24]
 8000c7a:	4b0b      	ldr	r3, [pc, #44]	; (8000ca8 <MX_GPIO_Init+0x58>)
 8000c7c:	699b      	ldr	r3, [r3, #24]
 8000c7e:	f003 0308 	and.w	r3, r3, #8
 8000c82:	60bb      	str	r3, [r7, #8]
 8000c84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c86:	4a08      	ldr	r2, [pc, #32]	; (8000ca8 <MX_GPIO_Init+0x58>)
 8000c88:	4b07      	ldr	r3, [pc, #28]	; (8000ca8 <MX_GPIO_Init+0x58>)
 8000c8a:	699b      	ldr	r3, [r3, #24]
 8000c8c:	f043 0304 	orr.w	r3, r3, #4
 8000c90:	6193      	str	r3, [r2, #24]
 8000c92:	4b05      	ldr	r3, [pc, #20]	; (8000ca8 <MX_GPIO_Init+0x58>)
 8000c94:	699b      	ldr	r3, [r3, #24]
 8000c96:	f003 0304 	and.w	r3, r3, #4
 8000c9a:	607b      	str	r3, [r7, #4]
 8000c9c:	687b      	ldr	r3, [r7, #4]

}
 8000c9e:	bf00      	nop
 8000ca0:	3714      	adds	r7, #20
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bc80      	pop	{r7}
 8000ca6:	4770      	bx	lr
 8000ca8:	40021000 	.word	0x40021000

08000cac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cb0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cb2:	e7fe      	b.n	8000cb2 <Error_Handler+0x6>

08000cb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b085      	sub	sp, #20
 8000cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000cba:	4a15      	ldr	r2, [pc, #84]	; (8000d10 <HAL_MspInit+0x5c>)
 8000cbc:	4b14      	ldr	r3, [pc, #80]	; (8000d10 <HAL_MspInit+0x5c>)
 8000cbe:	699b      	ldr	r3, [r3, #24]
 8000cc0:	f043 0301 	orr.w	r3, r3, #1
 8000cc4:	6193      	str	r3, [r2, #24]
 8000cc6:	4b12      	ldr	r3, [pc, #72]	; (8000d10 <HAL_MspInit+0x5c>)
 8000cc8:	699b      	ldr	r3, [r3, #24]
 8000cca:	f003 0301 	and.w	r3, r3, #1
 8000cce:	60bb      	str	r3, [r7, #8]
 8000cd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cd2:	4a0f      	ldr	r2, [pc, #60]	; (8000d10 <HAL_MspInit+0x5c>)
 8000cd4:	4b0e      	ldr	r3, [pc, #56]	; (8000d10 <HAL_MspInit+0x5c>)
 8000cd6:	69db      	ldr	r3, [r3, #28]
 8000cd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cdc:	61d3      	str	r3, [r2, #28]
 8000cde:	4b0c      	ldr	r3, [pc, #48]	; (8000d10 <HAL_MspInit+0x5c>)
 8000ce0:	69db      	ldr	r3, [r3, #28]
 8000ce2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ce6:	607b      	str	r3, [r7, #4]
 8000ce8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000cea:	4b0a      	ldr	r3, [pc, #40]	; (8000d14 <HAL_MspInit+0x60>)
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	60fb      	str	r3, [r7, #12]
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000cf6:	60fb      	str	r3, [r7, #12]
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000cfe:	60fb      	str	r3, [r7, #12]
 8000d00:	4a04      	ldr	r2, [pc, #16]	; (8000d14 <HAL_MspInit+0x60>)
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d06:	bf00      	nop
 8000d08:	3714      	adds	r7, #20
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bc80      	pop	{r7}
 8000d0e:	4770      	bx	lr
 8000d10:	40021000 	.word	0x40021000
 8000d14:	40010000 	.word	0x40010000

08000d18 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b088      	sub	sp, #32
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d20:	f107 0310 	add.w	r3, r7, #16
 8000d24:	2200      	movs	r2, #0
 8000d26:	601a      	str	r2, [r3, #0]
 8000d28:	605a      	str	r2, [r3, #4]
 8000d2a:	609a      	str	r2, [r3, #8]
 8000d2c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4a15      	ldr	r2, [pc, #84]	; (8000d88 <HAL_I2C_MspInit+0x70>)
 8000d34:	4293      	cmp	r3, r2
 8000d36:	d123      	bne.n	8000d80 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d38:	4a14      	ldr	r2, [pc, #80]	; (8000d8c <HAL_I2C_MspInit+0x74>)
 8000d3a:	4b14      	ldr	r3, [pc, #80]	; (8000d8c <HAL_I2C_MspInit+0x74>)
 8000d3c:	699b      	ldr	r3, [r3, #24]
 8000d3e:	f043 0308 	orr.w	r3, r3, #8
 8000d42:	6193      	str	r3, [r2, #24]
 8000d44:	4b11      	ldr	r3, [pc, #68]	; (8000d8c <HAL_I2C_MspInit+0x74>)
 8000d46:	699b      	ldr	r3, [r3, #24]
 8000d48:	f003 0308 	and.w	r3, r3, #8
 8000d4c:	60fb      	str	r3, [r7, #12]
 8000d4e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d50:	23c0      	movs	r3, #192	; 0xc0
 8000d52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d54:	2312      	movs	r3, #18
 8000d56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d58:	2303      	movs	r3, #3
 8000d5a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d5c:	f107 0310 	add.w	r3, r7, #16
 8000d60:	4619      	mov	r1, r3
 8000d62:	480b      	ldr	r0, [pc, #44]	; (8000d90 <HAL_I2C_MspInit+0x78>)
 8000d64:	f000 fa22 	bl	80011ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d68:	4a08      	ldr	r2, [pc, #32]	; (8000d8c <HAL_I2C_MspInit+0x74>)
 8000d6a:	4b08      	ldr	r3, [pc, #32]	; (8000d8c <HAL_I2C_MspInit+0x74>)
 8000d6c:	69db      	ldr	r3, [r3, #28]
 8000d6e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d72:	61d3      	str	r3, [r2, #28]
 8000d74:	4b05      	ldr	r3, [pc, #20]	; (8000d8c <HAL_I2C_MspInit+0x74>)
 8000d76:	69db      	ldr	r3, [r3, #28]
 8000d78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d7c:	60bb      	str	r3, [r7, #8]
 8000d7e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d80:	bf00      	nop
 8000d82:	3720      	adds	r7, #32
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	40005400 	.word	0x40005400
 8000d8c:	40021000 	.word	0x40021000
 8000d90:	40010c00 	.word	0x40010c00

08000d94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b088      	sub	sp, #32
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d9c:	f107 0310 	add.w	r3, r7, #16
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	605a      	str	r2, [r3, #4]
 8000da6:	609a      	str	r2, [r3, #8]
 8000da8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4a1c      	ldr	r2, [pc, #112]	; (8000e20 <HAL_UART_MspInit+0x8c>)
 8000db0:	4293      	cmp	r3, r2
 8000db2:	d131      	bne.n	8000e18 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000db4:	4a1b      	ldr	r2, [pc, #108]	; (8000e24 <HAL_UART_MspInit+0x90>)
 8000db6:	4b1b      	ldr	r3, [pc, #108]	; (8000e24 <HAL_UART_MspInit+0x90>)
 8000db8:	69db      	ldr	r3, [r3, #28]
 8000dba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000dbe:	61d3      	str	r3, [r2, #28]
 8000dc0:	4b18      	ldr	r3, [pc, #96]	; (8000e24 <HAL_UART_MspInit+0x90>)
 8000dc2:	69db      	ldr	r3, [r3, #28]
 8000dc4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000dc8:	60fb      	str	r3, [r7, #12]
 8000dca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dcc:	4a15      	ldr	r2, [pc, #84]	; (8000e24 <HAL_UART_MspInit+0x90>)
 8000dce:	4b15      	ldr	r3, [pc, #84]	; (8000e24 <HAL_UART_MspInit+0x90>)
 8000dd0:	699b      	ldr	r3, [r3, #24]
 8000dd2:	f043 0308 	orr.w	r3, r3, #8
 8000dd6:	6193      	str	r3, [r2, #24]
 8000dd8:	4b12      	ldr	r3, [pc, #72]	; (8000e24 <HAL_UART_MspInit+0x90>)
 8000dda:	699b      	ldr	r3, [r3, #24]
 8000ddc:	f003 0308 	and.w	r3, r3, #8
 8000de0:	60bb      	str	r3, [r7, #8]
 8000de2:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000de4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000de8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dea:	2302      	movs	r3, #2
 8000dec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dee:	2303      	movs	r3, #3
 8000df0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000df2:	f107 0310 	add.w	r3, r7, #16
 8000df6:	4619      	mov	r1, r3
 8000df8:	480b      	ldr	r0, [pc, #44]	; (8000e28 <HAL_UART_MspInit+0x94>)
 8000dfa:	f000 f9d7 	bl	80011ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000dfe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e02:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e04:	2300      	movs	r3, #0
 8000e06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e0c:	f107 0310 	add.w	r3, r7, #16
 8000e10:	4619      	mov	r1, r3
 8000e12:	4805      	ldr	r0, [pc, #20]	; (8000e28 <HAL_UART_MspInit+0x94>)
 8000e14:	f000 f9ca 	bl	80011ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e18:	bf00      	nop
 8000e1a:	3720      	adds	r7, #32
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	40004800 	.word	0x40004800
 8000e24:	40021000 	.word	0x40021000
 8000e28:	40010c00 	.word	0x40010c00

08000e2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e30:	e7fe      	b.n	8000e30 <NMI_Handler+0x4>

08000e32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e32:	b480      	push	{r7}
 8000e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e36:	e7fe      	b.n	8000e36 <HardFault_Handler+0x4>

08000e38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e3c:	e7fe      	b.n	8000e3c <MemManage_Handler+0x4>

08000e3e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e3e:	b480      	push	{r7}
 8000e40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e42:	e7fe      	b.n	8000e42 <BusFault_Handler+0x4>

08000e44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e48:	e7fe      	b.n	8000e48 <UsageFault_Handler+0x4>

08000e4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e4a:	b480      	push	{r7}
 8000e4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e4e:	bf00      	nop
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bc80      	pop	{r7}
 8000e54:	4770      	bx	lr

08000e56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e56:	b480      	push	{r7}
 8000e58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e5a:	bf00      	nop
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bc80      	pop	{r7}
 8000e60:	4770      	bx	lr

08000e62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e62:	b480      	push	{r7}
 8000e64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e66:	bf00      	nop
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bc80      	pop	{r7}
 8000e6c:	4770      	bx	lr

08000e6e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e6e:	b580      	push	{r7, lr}
 8000e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e72:	f000 f87b 	bl	8000f6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e76:	bf00      	nop
 8000e78:	bd80      	pop	{r7, pc}
	...

08000e7c <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000e84:	4b11      	ldr	r3, [pc, #68]	; (8000ecc <_sbrk+0x50>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d102      	bne.n	8000e92 <_sbrk+0x16>
		heap_end = &end;
 8000e8c:	4b0f      	ldr	r3, [pc, #60]	; (8000ecc <_sbrk+0x50>)
 8000e8e:	4a10      	ldr	r2, [pc, #64]	; (8000ed0 <_sbrk+0x54>)
 8000e90:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000e92:	4b0e      	ldr	r3, [pc, #56]	; (8000ecc <_sbrk+0x50>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000e98:	4b0c      	ldr	r3, [pc, #48]	; (8000ecc <_sbrk+0x50>)
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	4413      	add	r3, r2
 8000ea0:	466a      	mov	r2, sp
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d907      	bls.n	8000eb6 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8000ea6:	f002 faff 	bl	80034a8 <__errno>
 8000eaa:	4602      	mov	r2, r0
 8000eac:	230c      	movs	r3, #12
 8000eae:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000eb0:	f04f 33ff 	mov.w	r3, #4294967295
 8000eb4:	e006      	b.n	8000ec4 <_sbrk+0x48>
	}

	heap_end += incr;
 8000eb6:	4b05      	ldr	r3, [pc, #20]	; (8000ecc <_sbrk+0x50>)
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4413      	add	r3, r2
 8000ebe:	4a03      	ldr	r2, [pc, #12]	; (8000ecc <_sbrk+0x50>)
 8000ec0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000ec2:	68fb      	ldr	r3, [r7, #12]
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	3710      	adds	r7, #16
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	2000008c 	.word	0x2000008c
 8000ed0:	20000150 	.word	0x20000150

08000ed4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ed8:	bf00      	nop
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bc80      	pop	{r7}
 8000ede:	4770      	bx	lr

08000ee0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ee4:	4a08      	ldr	r2, [pc, #32]	; (8000f08 <HAL_Init+0x28>)
 8000ee6:	4b08      	ldr	r3, [pc, #32]	; (8000f08 <HAL_Init+0x28>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f043 0310 	orr.w	r3, r3, #16
 8000eee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ef0:	2003      	movs	r0, #3
 8000ef2:	f000 f927 	bl	8001144 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ef6:	200f      	movs	r0, #15
 8000ef8:	f000 f808 	bl	8000f0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000efc:	f7ff feda 	bl	8000cb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f00:	2300      	movs	r3, #0
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	40022000 	.word	0x40022000

08000f0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f14:	4b12      	ldr	r3, [pc, #72]	; (8000f60 <HAL_InitTick+0x54>)
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	4b12      	ldr	r3, [pc, #72]	; (8000f64 <HAL_InitTick+0x58>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f22:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f000 f931 	bl	8001192 <HAL_SYSTICK_Config>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f36:	2301      	movs	r3, #1
 8000f38:	e00e      	b.n	8000f58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2b0f      	cmp	r3, #15
 8000f3e:	d80a      	bhi.n	8000f56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f40:	2200      	movs	r2, #0
 8000f42:	6879      	ldr	r1, [r7, #4]
 8000f44:	f04f 30ff 	mov.w	r0, #4294967295
 8000f48:	f000 f907 	bl	800115a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f4c:	4a06      	ldr	r2, [pc, #24]	; (8000f68 <HAL_InitTick+0x5c>)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f52:	2300      	movs	r3, #0
 8000f54:	e000      	b.n	8000f58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3708      	adds	r7, #8
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	20000000 	.word	0x20000000
 8000f64:	20000008 	.word	0x20000008
 8000f68:	20000004 	.word	0x20000004

08000f6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f70:	4b05      	ldr	r3, [pc, #20]	; (8000f88 <HAL_IncTick+0x1c>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	461a      	mov	r2, r3
 8000f76:	4b05      	ldr	r3, [pc, #20]	; (8000f8c <HAL_IncTick+0x20>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	4a03      	ldr	r2, [pc, #12]	; (8000f8c <HAL_IncTick+0x20>)
 8000f7e:	6013      	str	r3, [r2, #0]
}
 8000f80:	bf00      	nop
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bc80      	pop	{r7}
 8000f86:	4770      	bx	lr
 8000f88:	20000008 	.word	0x20000008
 8000f8c:	20000148 	.word	0x20000148

08000f90 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  return uwTick;
 8000f94:	4b02      	ldr	r3, [pc, #8]	; (8000fa0 <HAL_GetTick+0x10>)
 8000f96:	681b      	ldr	r3, [r3, #0]
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bc80      	pop	{r7}
 8000f9e:	4770      	bx	lr
 8000fa0:	20000148 	.word	0x20000148

08000fa4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fac:	f7ff fff0 	bl	8000f90 <HAL_GetTick>
 8000fb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fbc:	d005      	beq.n	8000fca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fbe:	4b09      	ldr	r3, [pc, #36]	; (8000fe4 <HAL_Delay+0x40>)
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	4413      	add	r3, r2
 8000fc8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fca:	bf00      	nop
 8000fcc:	f7ff ffe0 	bl	8000f90 <HAL_GetTick>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	68bb      	ldr	r3, [r7, #8]
 8000fd4:	1ad2      	subs	r2, r2, r3
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	d3f7      	bcc.n	8000fcc <HAL_Delay+0x28>
  {
  }
}
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20000008 	.word	0x20000008

08000fe8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b085      	sub	sp, #20
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	f003 0307 	and.w	r3, r3, #7
 8000ff6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ff8:	4b0c      	ldr	r3, [pc, #48]	; (800102c <__NVIC_SetPriorityGrouping+0x44>)
 8000ffa:	68db      	ldr	r3, [r3, #12]
 8000ffc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ffe:	68ba      	ldr	r2, [r7, #8]
 8001000:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001004:	4013      	ands	r3, r2
 8001006:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001010:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001014:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001018:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800101a:	4a04      	ldr	r2, [pc, #16]	; (800102c <__NVIC_SetPriorityGrouping+0x44>)
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	60d3      	str	r3, [r2, #12]
}
 8001020:	bf00      	nop
 8001022:	3714      	adds	r7, #20
 8001024:	46bd      	mov	sp, r7
 8001026:	bc80      	pop	{r7}
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	e000ed00 	.word	0xe000ed00

08001030 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001034:	4b04      	ldr	r3, [pc, #16]	; (8001048 <__NVIC_GetPriorityGrouping+0x18>)
 8001036:	68db      	ldr	r3, [r3, #12]
 8001038:	0a1b      	lsrs	r3, r3, #8
 800103a:	f003 0307 	and.w	r3, r3, #7
}
 800103e:	4618      	mov	r0, r3
 8001040:	46bd      	mov	sp, r7
 8001042:	bc80      	pop	{r7}
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	e000ed00 	.word	0xe000ed00

0800104c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	6039      	str	r1, [r7, #0]
 8001056:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001058:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105c:	2b00      	cmp	r3, #0
 800105e:	db0a      	blt.n	8001076 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001060:	490d      	ldr	r1, [pc, #52]	; (8001098 <__NVIC_SetPriority+0x4c>)
 8001062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001066:	683a      	ldr	r2, [r7, #0]
 8001068:	b2d2      	uxtb	r2, r2
 800106a:	0112      	lsls	r2, r2, #4
 800106c:	b2d2      	uxtb	r2, r2
 800106e:	440b      	add	r3, r1
 8001070:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001074:	e00a      	b.n	800108c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001076:	4909      	ldr	r1, [pc, #36]	; (800109c <__NVIC_SetPriority+0x50>)
 8001078:	79fb      	ldrb	r3, [r7, #7]
 800107a:	f003 030f 	and.w	r3, r3, #15
 800107e:	3b04      	subs	r3, #4
 8001080:	683a      	ldr	r2, [r7, #0]
 8001082:	b2d2      	uxtb	r2, r2
 8001084:	0112      	lsls	r2, r2, #4
 8001086:	b2d2      	uxtb	r2, r2
 8001088:	440b      	add	r3, r1
 800108a:	761a      	strb	r2, [r3, #24]
}
 800108c:	bf00      	nop
 800108e:	370c      	adds	r7, #12
 8001090:	46bd      	mov	sp, r7
 8001092:	bc80      	pop	{r7}
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	e000e100 	.word	0xe000e100
 800109c:	e000ed00 	.word	0xe000ed00

080010a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b089      	sub	sp, #36	; 0x24
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	60f8      	str	r0, [r7, #12]
 80010a8:	60b9      	str	r1, [r7, #8]
 80010aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	f003 0307 	and.w	r3, r3, #7
 80010b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	f1c3 0307 	rsb	r3, r3, #7
 80010ba:	2b04      	cmp	r3, #4
 80010bc:	bf28      	it	cs
 80010be:	2304      	movcs	r3, #4
 80010c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	3304      	adds	r3, #4
 80010c6:	2b06      	cmp	r3, #6
 80010c8:	d902      	bls.n	80010d0 <NVIC_EncodePriority+0x30>
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	3b03      	subs	r3, #3
 80010ce:	e000      	b.n	80010d2 <NVIC_EncodePriority+0x32>
 80010d0:	2300      	movs	r3, #0
 80010d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d4:	2201      	movs	r2, #1
 80010d6:	69bb      	ldr	r3, [r7, #24]
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	1e5a      	subs	r2, r3, #1
 80010de:	68bb      	ldr	r3, [r7, #8]
 80010e0:	401a      	ands	r2, r3
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010e6:	2101      	movs	r1, #1
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	fa01 f303 	lsl.w	r3, r1, r3
 80010ee:	1e59      	subs	r1, r3, #1
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f4:	4313      	orrs	r3, r2
         );
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3724      	adds	r7, #36	; 0x24
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bc80      	pop	{r7}
 80010fe:	4770      	bx	lr

08001100 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	3b01      	subs	r3, #1
 800110c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001110:	d301      	bcc.n	8001116 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001112:	2301      	movs	r3, #1
 8001114:	e00f      	b.n	8001136 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001116:	4a0a      	ldr	r2, [pc, #40]	; (8001140 <SysTick_Config+0x40>)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	3b01      	subs	r3, #1
 800111c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800111e:	210f      	movs	r1, #15
 8001120:	f04f 30ff 	mov.w	r0, #4294967295
 8001124:	f7ff ff92 	bl	800104c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001128:	4b05      	ldr	r3, [pc, #20]	; (8001140 <SysTick_Config+0x40>)
 800112a:	2200      	movs	r2, #0
 800112c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800112e:	4b04      	ldr	r3, [pc, #16]	; (8001140 <SysTick_Config+0x40>)
 8001130:	2207      	movs	r2, #7
 8001132:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001134:	2300      	movs	r3, #0
}
 8001136:	4618      	mov	r0, r3
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	e000e010 	.word	0xe000e010

08001144 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800114c:	6878      	ldr	r0, [r7, #4]
 800114e:	f7ff ff4b 	bl	8000fe8 <__NVIC_SetPriorityGrouping>
}
 8001152:	bf00      	nop
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}

0800115a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800115a:	b580      	push	{r7, lr}
 800115c:	b086      	sub	sp, #24
 800115e:	af00      	add	r7, sp, #0
 8001160:	4603      	mov	r3, r0
 8001162:	60b9      	str	r1, [r7, #8]
 8001164:	607a      	str	r2, [r7, #4]
 8001166:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001168:	2300      	movs	r3, #0
 800116a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800116c:	f7ff ff60 	bl	8001030 <__NVIC_GetPriorityGrouping>
 8001170:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001172:	687a      	ldr	r2, [r7, #4]
 8001174:	68b9      	ldr	r1, [r7, #8]
 8001176:	6978      	ldr	r0, [r7, #20]
 8001178:	f7ff ff92 	bl	80010a0 <NVIC_EncodePriority>
 800117c:	4602      	mov	r2, r0
 800117e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001182:	4611      	mov	r1, r2
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff ff61 	bl	800104c <__NVIC_SetPriority>
}
 800118a:	bf00      	nop
 800118c:	3718      	adds	r7, #24
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}

08001192 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001192:	b580      	push	{r7, lr}
 8001194:	b082      	sub	sp, #8
 8001196:	af00      	add	r7, sp, #0
 8001198:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800119a:	6878      	ldr	r0, [r7, #4]
 800119c:	f7ff ffb0 	bl	8001100 <SysTick_Config>
 80011a0:	4603      	mov	r3, r0
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
	...

080011ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b08b      	sub	sp, #44	; 0x2c
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011b6:	2300      	movs	r3, #0
 80011b8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80011ba:	2300      	movs	r3, #0
 80011bc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011be:	e127      	b.n	8001410 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80011c0:	2201      	movs	r2, #1
 80011c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	4013      	ands	r3, r2
 80011d2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	429a      	cmp	r2, r3
 80011da:	f040 8116 	bne.w	800140a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	2b12      	cmp	r3, #18
 80011e4:	d034      	beq.n	8001250 <HAL_GPIO_Init+0xa4>
 80011e6:	2b12      	cmp	r3, #18
 80011e8:	d80d      	bhi.n	8001206 <HAL_GPIO_Init+0x5a>
 80011ea:	2b02      	cmp	r3, #2
 80011ec:	d02b      	beq.n	8001246 <HAL_GPIO_Init+0x9a>
 80011ee:	2b02      	cmp	r3, #2
 80011f0:	d804      	bhi.n	80011fc <HAL_GPIO_Init+0x50>
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d031      	beq.n	800125a <HAL_GPIO_Init+0xae>
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d01c      	beq.n	8001234 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80011fa:	e048      	b.n	800128e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80011fc:	2b03      	cmp	r3, #3
 80011fe:	d043      	beq.n	8001288 <HAL_GPIO_Init+0xdc>
 8001200:	2b11      	cmp	r3, #17
 8001202:	d01b      	beq.n	800123c <HAL_GPIO_Init+0x90>
          break;
 8001204:	e043      	b.n	800128e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001206:	4a89      	ldr	r2, [pc, #548]	; (800142c <HAL_GPIO_Init+0x280>)
 8001208:	4293      	cmp	r3, r2
 800120a:	d026      	beq.n	800125a <HAL_GPIO_Init+0xae>
 800120c:	4a87      	ldr	r2, [pc, #540]	; (800142c <HAL_GPIO_Init+0x280>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d806      	bhi.n	8001220 <HAL_GPIO_Init+0x74>
 8001212:	4a87      	ldr	r2, [pc, #540]	; (8001430 <HAL_GPIO_Init+0x284>)
 8001214:	4293      	cmp	r3, r2
 8001216:	d020      	beq.n	800125a <HAL_GPIO_Init+0xae>
 8001218:	4a86      	ldr	r2, [pc, #536]	; (8001434 <HAL_GPIO_Init+0x288>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d01d      	beq.n	800125a <HAL_GPIO_Init+0xae>
          break;
 800121e:	e036      	b.n	800128e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001220:	4a85      	ldr	r2, [pc, #532]	; (8001438 <HAL_GPIO_Init+0x28c>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d019      	beq.n	800125a <HAL_GPIO_Init+0xae>
 8001226:	4a85      	ldr	r2, [pc, #532]	; (800143c <HAL_GPIO_Init+0x290>)
 8001228:	4293      	cmp	r3, r2
 800122a:	d016      	beq.n	800125a <HAL_GPIO_Init+0xae>
 800122c:	4a84      	ldr	r2, [pc, #528]	; (8001440 <HAL_GPIO_Init+0x294>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d013      	beq.n	800125a <HAL_GPIO_Init+0xae>
          break;
 8001232:	e02c      	b.n	800128e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	623b      	str	r3, [r7, #32]
          break;
 800123a:	e028      	b.n	800128e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	3304      	adds	r3, #4
 8001242:	623b      	str	r3, [r7, #32]
          break;
 8001244:	e023      	b.n	800128e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	68db      	ldr	r3, [r3, #12]
 800124a:	3308      	adds	r3, #8
 800124c:	623b      	str	r3, [r7, #32]
          break;
 800124e:	e01e      	b.n	800128e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	68db      	ldr	r3, [r3, #12]
 8001254:	330c      	adds	r3, #12
 8001256:	623b      	str	r3, [r7, #32]
          break;
 8001258:	e019      	b.n	800128e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	689b      	ldr	r3, [r3, #8]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d102      	bne.n	8001268 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001262:	2304      	movs	r3, #4
 8001264:	623b      	str	r3, [r7, #32]
          break;
 8001266:	e012      	b.n	800128e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	2b01      	cmp	r3, #1
 800126e:	d105      	bne.n	800127c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001270:	2308      	movs	r3, #8
 8001272:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	69fa      	ldr	r2, [r7, #28]
 8001278:	611a      	str	r2, [r3, #16]
          break;
 800127a:	e008      	b.n	800128e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800127c:	2308      	movs	r3, #8
 800127e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	69fa      	ldr	r2, [r7, #28]
 8001284:	615a      	str	r2, [r3, #20]
          break;
 8001286:	e002      	b.n	800128e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001288:	2300      	movs	r3, #0
 800128a:	623b      	str	r3, [r7, #32]
          break;
 800128c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800128e:	69bb      	ldr	r3, [r7, #24]
 8001290:	2bff      	cmp	r3, #255	; 0xff
 8001292:	d801      	bhi.n	8001298 <HAL_GPIO_Init+0xec>
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	e001      	b.n	800129c <HAL_GPIO_Init+0xf0>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	3304      	adds	r3, #4
 800129c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800129e:	69bb      	ldr	r3, [r7, #24]
 80012a0:	2bff      	cmp	r3, #255	; 0xff
 80012a2:	d802      	bhi.n	80012aa <HAL_GPIO_Init+0xfe>
 80012a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	e002      	b.n	80012b0 <HAL_GPIO_Init+0x104>
 80012aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ac:	3b08      	subs	r3, #8
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	210f      	movs	r1, #15
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	fa01 f303 	lsl.w	r3, r1, r3
 80012be:	43db      	mvns	r3, r3
 80012c0:	401a      	ands	r2, r3
 80012c2:	6a39      	ldr	r1, [r7, #32]
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	fa01 f303 	lsl.w	r3, r1, r3
 80012ca:	431a      	orrs	r2, r3
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012d8:	2b00      	cmp	r3, #0
 80012da:	f000 8096 	beq.w	800140a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80012de:	4a59      	ldr	r2, [pc, #356]	; (8001444 <HAL_GPIO_Init+0x298>)
 80012e0:	4b58      	ldr	r3, [pc, #352]	; (8001444 <HAL_GPIO_Init+0x298>)
 80012e2:	699b      	ldr	r3, [r3, #24]
 80012e4:	f043 0301 	orr.w	r3, r3, #1
 80012e8:	6193      	str	r3, [r2, #24]
 80012ea:	4b56      	ldr	r3, [pc, #344]	; (8001444 <HAL_GPIO_Init+0x298>)
 80012ec:	699b      	ldr	r3, [r3, #24]
 80012ee:	f003 0301 	and.w	r3, r3, #1
 80012f2:	60bb      	str	r3, [r7, #8]
 80012f4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80012f6:	4a54      	ldr	r2, [pc, #336]	; (8001448 <HAL_GPIO_Init+0x29c>)
 80012f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fa:	089b      	lsrs	r3, r3, #2
 80012fc:	3302      	adds	r3, #2
 80012fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001302:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001306:	f003 0303 	and.w	r3, r3, #3
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	220f      	movs	r2, #15
 800130e:	fa02 f303 	lsl.w	r3, r2, r3
 8001312:	43db      	mvns	r3, r3
 8001314:	68fa      	ldr	r2, [r7, #12]
 8001316:	4013      	ands	r3, r2
 8001318:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a4b      	ldr	r2, [pc, #300]	; (800144c <HAL_GPIO_Init+0x2a0>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d013      	beq.n	800134a <HAL_GPIO_Init+0x19e>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4a4a      	ldr	r2, [pc, #296]	; (8001450 <HAL_GPIO_Init+0x2a4>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d00d      	beq.n	8001346 <HAL_GPIO_Init+0x19a>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4a49      	ldr	r2, [pc, #292]	; (8001454 <HAL_GPIO_Init+0x2a8>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d007      	beq.n	8001342 <HAL_GPIO_Init+0x196>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4a48      	ldr	r2, [pc, #288]	; (8001458 <HAL_GPIO_Init+0x2ac>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d101      	bne.n	800133e <HAL_GPIO_Init+0x192>
 800133a:	2303      	movs	r3, #3
 800133c:	e006      	b.n	800134c <HAL_GPIO_Init+0x1a0>
 800133e:	2304      	movs	r3, #4
 8001340:	e004      	b.n	800134c <HAL_GPIO_Init+0x1a0>
 8001342:	2302      	movs	r3, #2
 8001344:	e002      	b.n	800134c <HAL_GPIO_Init+0x1a0>
 8001346:	2301      	movs	r3, #1
 8001348:	e000      	b.n	800134c <HAL_GPIO_Init+0x1a0>
 800134a:	2300      	movs	r3, #0
 800134c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800134e:	f002 0203 	and.w	r2, r2, #3
 8001352:	0092      	lsls	r2, r2, #2
 8001354:	4093      	lsls	r3, r2
 8001356:	68fa      	ldr	r2, [r7, #12]
 8001358:	4313      	orrs	r3, r2
 800135a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800135c:	493a      	ldr	r1, [pc, #232]	; (8001448 <HAL_GPIO_Init+0x29c>)
 800135e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001360:	089b      	lsrs	r3, r3, #2
 8001362:	3302      	adds	r3, #2
 8001364:	68fa      	ldr	r2, [r7, #12]
 8001366:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001372:	2b00      	cmp	r3, #0
 8001374:	d006      	beq.n	8001384 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001376:	4939      	ldr	r1, [pc, #228]	; (800145c <HAL_GPIO_Init+0x2b0>)
 8001378:	4b38      	ldr	r3, [pc, #224]	; (800145c <HAL_GPIO_Init+0x2b0>)
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	69bb      	ldr	r3, [r7, #24]
 800137e:	4313      	orrs	r3, r2
 8001380:	600b      	str	r3, [r1, #0]
 8001382:	e006      	b.n	8001392 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001384:	4935      	ldr	r1, [pc, #212]	; (800145c <HAL_GPIO_Init+0x2b0>)
 8001386:	4b35      	ldr	r3, [pc, #212]	; (800145c <HAL_GPIO_Init+0x2b0>)
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	69bb      	ldr	r3, [r7, #24]
 800138c:	43db      	mvns	r3, r3
 800138e:	4013      	ands	r3, r2
 8001390:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800139a:	2b00      	cmp	r3, #0
 800139c:	d006      	beq.n	80013ac <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800139e:	492f      	ldr	r1, [pc, #188]	; (800145c <HAL_GPIO_Init+0x2b0>)
 80013a0:	4b2e      	ldr	r3, [pc, #184]	; (800145c <HAL_GPIO_Init+0x2b0>)
 80013a2:	685a      	ldr	r2, [r3, #4]
 80013a4:	69bb      	ldr	r3, [r7, #24]
 80013a6:	4313      	orrs	r3, r2
 80013a8:	604b      	str	r3, [r1, #4]
 80013aa:	e006      	b.n	80013ba <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80013ac:	492b      	ldr	r1, [pc, #172]	; (800145c <HAL_GPIO_Init+0x2b0>)
 80013ae:	4b2b      	ldr	r3, [pc, #172]	; (800145c <HAL_GPIO_Init+0x2b0>)
 80013b0:	685a      	ldr	r2, [r3, #4]
 80013b2:	69bb      	ldr	r3, [r7, #24]
 80013b4:	43db      	mvns	r3, r3
 80013b6:	4013      	ands	r3, r2
 80013b8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d006      	beq.n	80013d4 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80013c6:	4925      	ldr	r1, [pc, #148]	; (800145c <HAL_GPIO_Init+0x2b0>)
 80013c8:	4b24      	ldr	r3, [pc, #144]	; (800145c <HAL_GPIO_Init+0x2b0>)
 80013ca:	689a      	ldr	r2, [r3, #8]
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	4313      	orrs	r3, r2
 80013d0:	608b      	str	r3, [r1, #8]
 80013d2:	e006      	b.n	80013e2 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80013d4:	4921      	ldr	r1, [pc, #132]	; (800145c <HAL_GPIO_Init+0x2b0>)
 80013d6:	4b21      	ldr	r3, [pc, #132]	; (800145c <HAL_GPIO_Init+0x2b0>)
 80013d8:	689a      	ldr	r2, [r3, #8]
 80013da:	69bb      	ldr	r3, [r7, #24]
 80013dc:	43db      	mvns	r3, r3
 80013de:	4013      	ands	r3, r2
 80013e0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d006      	beq.n	80013fc <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80013ee:	491b      	ldr	r1, [pc, #108]	; (800145c <HAL_GPIO_Init+0x2b0>)
 80013f0:	4b1a      	ldr	r3, [pc, #104]	; (800145c <HAL_GPIO_Init+0x2b0>)
 80013f2:	68da      	ldr	r2, [r3, #12]
 80013f4:	69bb      	ldr	r3, [r7, #24]
 80013f6:	4313      	orrs	r3, r2
 80013f8:	60cb      	str	r3, [r1, #12]
 80013fa:	e006      	b.n	800140a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80013fc:	4917      	ldr	r1, [pc, #92]	; (800145c <HAL_GPIO_Init+0x2b0>)
 80013fe:	4b17      	ldr	r3, [pc, #92]	; (800145c <HAL_GPIO_Init+0x2b0>)
 8001400:	68da      	ldr	r2, [r3, #12]
 8001402:	69bb      	ldr	r3, [r7, #24]
 8001404:	43db      	mvns	r3, r3
 8001406:	4013      	ands	r3, r2
 8001408:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800140a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800140c:	3301      	adds	r3, #1
 800140e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001416:	fa22 f303 	lsr.w	r3, r2, r3
 800141a:	2b00      	cmp	r3, #0
 800141c:	f47f aed0 	bne.w	80011c0 <HAL_GPIO_Init+0x14>
  }
}
 8001420:	bf00      	nop
 8001422:	372c      	adds	r7, #44	; 0x2c
 8001424:	46bd      	mov	sp, r7
 8001426:	bc80      	pop	{r7}
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	10210000 	.word	0x10210000
 8001430:	10110000 	.word	0x10110000
 8001434:	10120000 	.word	0x10120000
 8001438:	10310000 	.word	0x10310000
 800143c:	10320000 	.word	0x10320000
 8001440:	10220000 	.word	0x10220000
 8001444:	40021000 	.word	0x40021000
 8001448:	40010000 	.word	0x40010000
 800144c:	40010800 	.word	0x40010800
 8001450:	40010c00 	.word	0x40010c00
 8001454:	40011000 	.word	0x40011000
 8001458:	40011400 	.word	0x40011400
 800145c:	40010400 	.word	0x40010400

08001460 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001460:	b590      	push	{r4, r7, lr}
 8001462:	b085      	sub	sp, #20
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d101      	bne.n	8001472 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	e11f      	b.n	80016b2 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001478:	b2db      	uxtb	r3, r3
 800147a:	2b00      	cmp	r3, #0
 800147c:	d106      	bne.n	800148c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2200      	movs	r2, #0
 8001482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	f7ff fc46 	bl	8000d18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2224      	movs	r2, #36	; 0x24
 8001490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	687a      	ldr	r2, [r7, #4]
 800149a:	6812      	ldr	r2, [r2, #0]
 800149c:	6812      	ldr	r2, [r2, #0]
 800149e:	f022 0201 	bic.w	r2, r2, #1
 80014a2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	687a      	ldr	r2, [r7, #4]
 80014aa:	6812      	ldr	r2, [r2, #0]
 80014ac:	6812      	ldr	r2, [r2, #0]
 80014ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80014b2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	687a      	ldr	r2, [r7, #4]
 80014ba:	6812      	ldr	r2, [r2, #0]
 80014bc:	6812      	ldr	r2, [r2, #0]
 80014be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80014c2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80014c4:	f001 fea8 	bl	8003218 <HAL_RCC_GetPCLK1Freq>
 80014c8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	4a7b      	ldr	r2, [pc, #492]	; (80016bc <HAL_I2C_Init+0x25c>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d807      	bhi.n	80014e4 <HAL_I2C_Init+0x84>
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	4a7a      	ldr	r2, [pc, #488]	; (80016c0 <HAL_I2C_Init+0x260>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	bf94      	ite	ls
 80014dc:	2301      	movls	r3, #1
 80014de:	2300      	movhi	r3, #0
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	e006      	b.n	80014f2 <HAL_I2C_Init+0x92>
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	4a77      	ldr	r2, [pc, #476]	; (80016c4 <HAL_I2C_Init+0x264>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	bf94      	ite	ls
 80014ec:	2301      	movls	r3, #1
 80014ee:	2300      	movhi	r3, #0
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e0db      	b.n	80016b2 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	4a72      	ldr	r2, [pc, #456]	; (80016c8 <HAL_I2C_Init+0x268>)
 80014fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001502:	0c9b      	lsrs	r3, r3, #18
 8001504:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	687a      	ldr	r2, [r7, #4]
 800150c:	6812      	ldr	r2, [r2, #0]
 800150e:	6852      	ldr	r2, [r2, #4]
 8001510:	f022 013f 	bic.w	r1, r2, #63	; 0x3f
 8001514:	68ba      	ldr	r2, [r7, #8]
 8001516:	430a      	orrs	r2, r1
 8001518:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	6a1b      	ldr	r3, [r3, #32]
 8001524:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	4863      	ldr	r0, [pc, #396]	; (80016bc <HAL_I2C_Init+0x25c>)
 800152e:	4283      	cmp	r3, r0
 8001530:	d802      	bhi.n	8001538 <HAL_I2C_Init+0xd8>
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	3301      	adds	r3, #1
 8001536:	e009      	b.n	800154c <HAL_I2C_Init+0xec>
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800153e:	fb00 f303 	mul.w	r3, r0, r3
 8001542:	4862      	ldr	r0, [pc, #392]	; (80016cc <HAL_I2C_Init+0x26c>)
 8001544:	fba0 0303 	umull	r0, r3, r0, r3
 8001548:	099b      	lsrs	r3, r3, #6
 800154a:	3301      	adds	r3, #1
 800154c:	430b      	orrs	r3, r1
 800154e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6818      	ldr	r0, [r3, #0]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	69db      	ldr	r3, [r3, #28]
 800155a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800155e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	4955      	ldr	r1, [pc, #340]	; (80016bc <HAL_I2C_Init+0x25c>)
 8001568:	428b      	cmp	r3, r1
 800156a:	d80d      	bhi.n	8001588 <HAL_I2C_Init+0x128>
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	1e59      	subs	r1, r3, #1
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	fbb1 f3f3 	udiv	r3, r1, r3
 800157a:	3301      	adds	r3, #1
 800157c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001580:	2b04      	cmp	r3, #4
 8001582:	bf38      	it	cc
 8001584:	2304      	movcc	r3, #4
 8001586:	e04f      	b.n	8001628 <HAL_I2C_Init+0x1c8>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d111      	bne.n	80015b4 <HAL_I2C_Init+0x154>
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	1e5c      	subs	r4, r3, #1
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6859      	ldr	r1, [r3, #4]
 8001598:	460b      	mov	r3, r1
 800159a:	005b      	lsls	r3, r3, #1
 800159c:	440b      	add	r3, r1
 800159e:	fbb4 f3f3 	udiv	r3, r4, r3
 80015a2:	3301      	adds	r3, #1
 80015a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	bf0c      	ite	eq
 80015ac:	2301      	moveq	r3, #1
 80015ae:	2300      	movne	r3, #0
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	e012      	b.n	80015da <HAL_I2C_Init+0x17a>
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	1e5c      	subs	r4, r3, #1
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6859      	ldr	r1, [r3, #4]
 80015bc:	460b      	mov	r3, r1
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	440b      	add	r3, r1
 80015c2:	0099      	lsls	r1, r3, #2
 80015c4:	440b      	add	r3, r1
 80015c6:	fbb4 f3f3 	udiv	r3, r4, r3
 80015ca:	3301      	adds	r3, #1
 80015cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	bf0c      	ite	eq
 80015d4:	2301      	moveq	r3, #1
 80015d6:	2300      	movne	r3, #0
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <HAL_I2C_Init+0x182>
 80015de:	2301      	movs	r3, #1
 80015e0:	e022      	b.n	8001628 <HAL_I2C_Init+0x1c8>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d10e      	bne.n	8001608 <HAL_I2C_Init+0x1a8>
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	1e5c      	subs	r4, r3, #1
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6859      	ldr	r1, [r3, #4]
 80015f2:	460b      	mov	r3, r1
 80015f4:	005b      	lsls	r3, r3, #1
 80015f6:	440b      	add	r3, r1
 80015f8:	fbb4 f3f3 	udiv	r3, r4, r3
 80015fc:	3301      	adds	r3, #1
 80015fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001602:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001606:	e00f      	b.n	8001628 <HAL_I2C_Init+0x1c8>
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	1e5c      	subs	r4, r3, #1
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6859      	ldr	r1, [r3, #4]
 8001610:	460b      	mov	r3, r1
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	440b      	add	r3, r1
 8001616:	0099      	lsls	r1, r3, #2
 8001618:	440b      	add	r3, r1
 800161a:	fbb4 f3f3 	udiv	r3, r4, r3
 800161e:	3301      	adds	r3, #1
 8001620:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001624:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001628:	4313      	orrs	r3, r2
 800162a:	61c3      	str	r3, [r0, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	687a      	ldr	r2, [r7, #4]
 8001632:	6812      	ldr	r2, [r2, #0]
 8001634:	6812      	ldr	r2, [r2, #0]
 8001636:	f022 01c0 	bic.w	r1, r2, #192	; 0xc0
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	69d0      	ldr	r0, [r2, #28]
 800163e:	687a      	ldr	r2, [r7, #4]
 8001640:	6a12      	ldr	r2, [r2, #32]
 8001642:	4302      	orrs	r2, r0
 8001644:	430a      	orrs	r2, r1
 8001646:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001656:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800165a:	6879      	ldr	r1, [r7, #4]
 800165c:	6908      	ldr	r0, [r1, #16]
 800165e:	6879      	ldr	r1, [r7, #4]
 8001660:	68c9      	ldr	r1, [r1, #12]
 8001662:	4301      	orrs	r1, r0
 8001664:	430b      	orrs	r3, r1
 8001666:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	687a      	ldr	r2, [r7, #4]
 800166e:	6812      	ldr	r2, [r2, #0]
 8001670:	68d2      	ldr	r2, [r2, #12]
 8001672:	f022 01ff 	bic.w	r1, r2, #255	; 0xff
 8001676:	687a      	ldr	r2, [r7, #4]
 8001678:	6950      	ldr	r0, [r2, #20]
 800167a:	687a      	ldr	r2, [r7, #4]
 800167c:	6992      	ldr	r2, [r2, #24]
 800167e:	4302      	orrs	r2, r0
 8001680:	430a      	orrs	r2, r1
 8001682:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	687a      	ldr	r2, [r7, #4]
 800168a:	6812      	ldr	r2, [r2, #0]
 800168c:	6812      	ldr	r2, [r2, #0]
 800168e:	f042 0201 	orr.w	r2, r2, #1
 8001692:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2200      	movs	r2, #0
 8001698:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2220      	movs	r2, #32
 800169e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2200      	movs	r2, #0
 80016a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2200      	movs	r2, #0
 80016ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80016b0:	2300      	movs	r3, #0
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3714      	adds	r7, #20
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd90      	pop	{r4, r7, pc}
 80016ba:	bf00      	nop
 80016bc:	000186a0 	.word	0x000186a0
 80016c0:	001e847f 	.word	0x001e847f
 80016c4:	003d08ff 	.word	0x003d08ff
 80016c8:	431bde83 	.word	0x431bde83
 80016cc:	10624dd3 	.word	0x10624dd3

080016d0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b088      	sub	sp, #32
 80016d4:	af02      	add	r7, sp, #8
 80016d6:	60f8      	str	r0, [r7, #12]
 80016d8:	607a      	str	r2, [r7, #4]
 80016da:	461a      	mov	r2, r3
 80016dc:	460b      	mov	r3, r1
 80016de:	817b      	strh	r3, [r7, #10]
 80016e0:	4613      	mov	r3, r2
 80016e2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80016e4:	f7ff fc54 	bl	8000f90 <HAL_GetTick>
 80016e8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	2b20      	cmp	r3, #32
 80016f4:	f040 80e0 	bne.w	80018b8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	9300      	str	r3, [sp, #0]
 80016fc:	2319      	movs	r3, #25
 80016fe:	2201      	movs	r2, #1
 8001700:	4970      	ldr	r1, [pc, #448]	; (80018c4 <HAL_I2C_Master_Transmit+0x1f4>)
 8001702:	68f8      	ldr	r0, [r7, #12]
 8001704:	f000 ffd6 	bl	80026b4 <I2C_WaitOnFlagUntilTimeout>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800170e:	2302      	movs	r3, #2
 8001710:	e0d3      	b.n	80018ba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001718:	2b01      	cmp	r3, #1
 800171a:	d101      	bne.n	8001720 <HAL_I2C_Master_Transmit+0x50>
 800171c:	2302      	movs	r3, #2
 800171e:	e0cc      	b.n	80018ba <HAL_I2C_Master_Transmit+0x1ea>
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	2201      	movs	r2, #1
 8001724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 0301 	and.w	r3, r3, #1
 8001732:	2b01      	cmp	r3, #1
 8001734:	d007      	beq.n	8001746 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	68fa      	ldr	r2, [r7, #12]
 800173c:	6812      	ldr	r2, [r2, #0]
 800173e:	6812      	ldr	r2, [r2, #0]
 8001740:	f042 0201 	orr.w	r2, r2, #1
 8001744:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	68fa      	ldr	r2, [r7, #12]
 800174c:	6812      	ldr	r2, [r2, #0]
 800174e:	6812      	ldr	r2, [r2, #0]
 8001750:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001754:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	2221      	movs	r2, #33	; 0x21
 800175a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	2210      	movs	r2, #16
 8001762:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	2200      	movs	r2, #0
 800176a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	687a      	ldr	r2, [r7, #4]
 8001770:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	893a      	ldrh	r2, [r7, #8]
 8001776:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800177c:	b29a      	uxth	r2, r3
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	4a50      	ldr	r2, [pc, #320]	; (80018c8 <HAL_I2C_Master_Transmit+0x1f8>)
 8001786:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001788:	8979      	ldrh	r1, [r7, #10]
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	6a3a      	ldr	r2, [r7, #32]
 800178e:	68f8      	ldr	r0, [r7, #12]
 8001790:	f000 fd58 	bl	8002244 <I2C_MasterRequestWrite>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e08d      	b.n	80018ba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800179e:	2300      	movs	r3, #0
 80017a0:	613b      	str	r3, [r7, #16]
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	695b      	ldr	r3, [r3, #20]
 80017a8:	613b      	str	r3, [r7, #16]
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	699b      	ldr	r3, [r3, #24]
 80017b0:	613b      	str	r3, [r7, #16]
 80017b2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80017b4:	e066      	b.n	8001884 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017b6:	697a      	ldr	r2, [r7, #20]
 80017b8:	6a39      	ldr	r1, [r7, #32]
 80017ba:	68f8      	ldr	r0, [r7, #12]
 80017bc:	f001 f850 	bl	8002860 <I2C_WaitOnTXEFlagUntilTimeout>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d00d      	beq.n	80017e2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ca:	2b04      	cmp	r3, #4
 80017cc:	d107      	bne.n	80017de <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	68fa      	ldr	r2, [r7, #12]
 80017d4:	6812      	ldr	r2, [r2, #0]
 80017d6:	6812      	ldr	r2, [r2, #0]
 80017d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017dc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e06b      	b.n	80018ba <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	68fa      	ldr	r2, [r7, #12]
 80017e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80017ea:	7812      	ldrb	r2, [r2, #0]
 80017ec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f2:	1c5a      	adds	r2, r3, #1
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017fc:	b29b      	uxth	r3, r3
 80017fe:	3b01      	subs	r3, #1
 8001800:	b29a      	uxth	r2, r3
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800180a:	3b01      	subs	r3, #1
 800180c:	b29a      	uxth	r2, r3
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	695b      	ldr	r3, [r3, #20]
 8001818:	f003 0304 	and.w	r3, r3, #4
 800181c:	2b04      	cmp	r3, #4
 800181e:	d11b      	bne.n	8001858 <HAL_I2C_Master_Transmit+0x188>
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001824:	2b00      	cmp	r3, #0
 8001826:	d017      	beq.n	8001858 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	68fa      	ldr	r2, [r7, #12]
 800182e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001830:	7812      	ldrb	r2, [r2, #0]
 8001832:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001838:	1c5a      	adds	r2, r3, #1
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001842:	b29b      	uxth	r3, r3
 8001844:	3b01      	subs	r3, #1
 8001846:	b29a      	uxth	r2, r3
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001850:	3b01      	subs	r3, #1
 8001852:	b29a      	uxth	r2, r3
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001858:	697a      	ldr	r2, [r7, #20]
 800185a:	6a39      	ldr	r1, [r7, #32]
 800185c:	68f8      	ldr	r0, [r7, #12]
 800185e:	f001 f840 	bl	80028e2 <I2C_WaitOnBTFFlagUntilTimeout>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d00d      	beq.n	8001884 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186c:	2b04      	cmp	r3, #4
 800186e:	d107      	bne.n	8001880 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	68fa      	ldr	r2, [r7, #12]
 8001876:	6812      	ldr	r2, [r2, #0]
 8001878:	6812      	ldr	r2, [r2, #0]
 800187a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800187e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e01a      	b.n	80018ba <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001888:	2b00      	cmp	r3, #0
 800188a:	d194      	bne.n	80017b6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	68fa      	ldr	r2, [r7, #12]
 8001892:	6812      	ldr	r2, [r2, #0]
 8001894:	6812      	ldr	r2, [r2, #0]
 8001896:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800189a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	2220      	movs	r2, #32
 80018a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	2200      	movs	r2, #0
 80018a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	2200      	movs	r2, #0
 80018b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80018b4:	2300      	movs	r3, #0
 80018b6:	e000      	b.n	80018ba <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80018b8:	2302      	movs	r3, #2
  }
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3718      	adds	r7, #24
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	00100002 	.word	0x00100002
 80018c8:	ffff0000 	.word	0xffff0000

080018cc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b08c      	sub	sp, #48	; 0x30
 80018d0:	af02      	add	r7, sp, #8
 80018d2:	60f8      	str	r0, [r7, #12]
 80018d4:	607a      	str	r2, [r7, #4]
 80018d6:	461a      	mov	r2, r3
 80018d8:	460b      	mov	r3, r1
 80018da:	817b      	strh	r3, [r7, #10]
 80018dc:	4613      	mov	r3, r2
 80018de:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80018e0:	2300      	movs	r3, #0
 80018e2:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80018e4:	f7ff fb54 	bl	8000f90 <HAL_GetTick>
 80018e8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	2b20      	cmp	r3, #32
 80018f4:	f040 8238 	bne.w	8001d68 <HAL_I2C_Master_Receive+0x49c>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80018f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fa:	9300      	str	r3, [sp, #0]
 80018fc:	2319      	movs	r3, #25
 80018fe:	2201      	movs	r2, #1
 8001900:	497e      	ldr	r1, [pc, #504]	; (8001afc <HAL_I2C_Master_Receive+0x230>)
 8001902:	68f8      	ldr	r0, [r7, #12]
 8001904:	f000 fed6 	bl	80026b4 <I2C_WaitOnFlagUntilTimeout>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800190e:	2302      	movs	r3, #2
 8001910:	e22b      	b.n	8001d6a <HAL_I2C_Master_Receive+0x49e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001918:	2b01      	cmp	r3, #1
 800191a:	d101      	bne.n	8001920 <HAL_I2C_Master_Receive+0x54>
 800191c:	2302      	movs	r3, #2
 800191e:	e224      	b.n	8001d6a <HAL_I2C_Master_Receive+0x49e>
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	2201      	movs	r2, #1
 8001924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 0301 	and.w	r3, r3, #1
 8001932:	2b01      	cmp	r3, #1
 8001934:	d007      	beq.n	8001946 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	68fa      	ldr	r2, [r7, #12]
 800193c:	6812      	ldr	r2, [r2, #0]
 800193e:	6812      	ldr	r2, [r2, #0]
 8001940:	f042 0201 	orr.w	r2, r2, #1
 8001944:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	68fa      	ldr	r2, [r7, #12]
 800194c:	6812      	ldr	r2, [r2, #0]
 800194e:	6812      	ldr	r2, [r2, #0]
 8001950:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001954:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	2222      	movs	r2, #34	; 0x22
 800195a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	2210      	movs	r2, #16
 8001962:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	2200      	movs	r2, #0
 800196a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	687a      	ldr	r2, [r7, #4]
 8001970:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	893a      	ldrh	r2, [r7, #8]
 8001976:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800197c:	b29a      	uxth	r2, r3
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	4a5e      	ldr	r2, [pc, #376]	; (8001b00 <HAL_I2C_Master_Receive+0x234>)
 8001986:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001988:	8979      	ldrh	r1, [r7, #10]
 800198a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800198e:	68f8      	ldr	r0, [r7, #12]
 8001990:	f000 fcda 	bl	8002348 <I2C_MasterRequestRead>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e1e5      	b.n	8001d6a <HAL_I2C_Master_Receive+0x49e>
    }

    if (hi2c->XferSize == 0U)
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d113      	bne.n	80019ce <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019a6:	2300      	movs	r3, #0
 80019a8:	61fb      	str	r3, [r7, #28]
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	695b      	ldr	r3, [r3, #20]
 80019b0:	61fb      	str	r3, [r7, #28]
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	699b      	ldr	r3, [r3, #24]
 80019b8:	61fb      	str	r3, [r7, #28]
 80019ba:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	68fa      	ldr	r2, [r7, #12]
 80019c2:	6812      	ldr	r2, [r2, #0]
 80019c4:	6812      	ldr	r2, [r2, #0]
 80019c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019ca:	601a      	str	r2, [r3, #0]
 80019cc:	e1b9      	b.n	8001d42 <HAL_I2C_Master_Receive+0x476>
    }
    else if (hi2c->XferSize == 1U)
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d11d      	bne.n	8001a12 <HAL_I2C_Master_Receive+0x146>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	68fa      	ldr	r2, [r7, #12]
 80019dc:	6812      	ldr	r2, [r2, #0]
 80019de:	6812      	ldr	r2, [r2, #0]
 80019e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019e4:	601a      	str	r2, [r3, #0]
 80019e6:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019e8:	2300      	movs	r3, #0
 80019ea:	61bb      	str	r3, [r7, #24]
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	695b      	ldr	r3, [r3, #20]
 80019f2:	61bb      	str	r3, [r7, #24]
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	699b      	ldr	r3, [r3, #24]
 80019fa:	61bb      	str	r3, [r7, #24]
 80019fc:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	68fa      	ldr	r2, [r7, #12]
 8001a04:	6812      	ldr	r2, [r2, #0]
 8001a06:	6812      	ldr	r2, [r2, #0]
 8001a08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a0c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001a0e:	b662      	cpsie	i
 8001a10:	e197      	b.n	8001d42 <HAL_I2C_Master_Receive+0x476>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d11d      	bne.n	8001a56 <HAL_I2C_Master_Receive+0x18a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	68fa      	ldr	r2, [r7, #12]
 8001a20:	6812      	ldr	r2, [r2, #0]
 8001a22:	6812      	ldr	r2, [r2, #0]
 8001a24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a28:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001a2a:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	617b      	str	r3, [r7, #20]
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	695b      	ldr	r3, [r3, #20]
 8001a36:	617b      	str	r3, [r7, #20]
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	699b      	ldr	r3, [r3, #24]
 8001a3e:	617b      	str	r3, [r7, #20]
 8001a40:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	68fa      	ldr	r2, [r7, #12]
 8001a48:	6812      	ldr	r2, [r2, #0]
 8001a4a:	6812      	ldr	r2, [r2, #0]
 8001a4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a50:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001a52:	b662      	cpsie	i
 8001a54:	e175      	b.n	8001d42 <HAL_I2C_Master_Receive+0x476>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	68fa      	ldr	r2, [r7, #12]
 8001a5c:	6812      	ldr	r2, [r2, #0]
 8001a5e:	6812      	ldr	r2, [r2, #0]
 8001a60:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001a64:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a66:	2300      	movs	r3, #0
 8001a68:	613b      	str	r3, [r7, #16]
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	695b      	ldr	r3, [r3, #20]
 8001a70:	613b      	str	r3, [r7, #16]
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	699b      	ldr	r3, [r3, #24]
 8001a78:	613b      	str	r3, [r7, #16]
 8001a7a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001a7c:	e161      	b.n	8001d42 <HAL_I2C_Master_Receive+0x476>
    {
      if (hi2c->XferSize <= 3U)
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a82:	2b03      	cmp	r3, #3
 8001a84:	f200 811a 	bhi.w	8001cbc <HAL_I2C_Master_Receive+0x3f0>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d123      	bne.n	8001ad8 <HAL_I2C_Master_Receive+0x20c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a92:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001a94:	68f8      	ldr	r0, [r7, #12]
 8001a96:	f000 ff65 	bl	8002964 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d001      	beq.n	8001aa4 <HAL_I2C_Master_Receive+0x1d8>
          {
            return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e162      	b.n	8001d6a <HAL_I2C_Master_Receive+0x49e>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa8:	68fa      	ldr	r2, [r7, #12]
 8001aaa:	6812      	ldr	r2, [r2, #0]
 8001aac:	6912      	ldr	r2, [r2, #16]
 8001aae:	b2d2      	uxtb	r2, r2
 8001ab0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab6:	1c5a      	adds	r2, r3, #1
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ac0:	3b01      	subs	r3, #1
 8001ac2:	b29a      	uxth	r2, r3
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001acc:	b29b      	uxth	r3, r3
 8001ace:	3b01      	subs	r3, #1
 8001ad0:	b29a      	uxth	r2, r3
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001ad6:	e134      	b.n	8001d42 <HAL_I2C_Master_Receive+0x476>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d150      	bne.n	8001b82 <HAL_I2C_Master_Receive+0x2b6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae2:	9300      	str	r3, [sp, #0]
 8001ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	4906      	ldr	r1, [pc, #24]	; (8001b04 <HAL_I2C_Master_Receive+0x238>)
 8001aea:	68f8      	ldr	r0, [r7, #12]
 8001aec:	f000 fde2 	bl	80026b4 <I2C_WaitOnFlagUntilTimeout>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d008      	beq.n	8001b08 <HAL_I2C_Master_Receive+0x23c>
          {
            return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e137      	b.n	8001d6a <HAL_I2C_Master_Receive+0x49e>
 8001afa:	bf00      	nop
 8001afc:	00100002 	.word	0x00100002
 8001b00:	ffff0000 	.word	0xffff0000
 8001b04:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001b08:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	68fa      	ldr	r2, [r7, #12]
 8001b10:	6812      	ldr	r2, [r2, #0]
 8001b12:	6812      	ldr	r2, [r2, #0]
 8001b14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b18:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b1e:	68fa      	ldr	r2, [r7, #12]
 8001b20:	6812      	ldr	r2, [r2, #0]
 8001b22:	6912      	ldr	r2, [r2, #16]
 8001b24:	b2d2      	uxtb	r2, r2
 8001b26:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b2c:	1c5a      	adds	r2, r3, #1
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b36:	3b01      	subs	r3, #1
 8001b38:	b29a      	uxth	r2, r3
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	3b01      	subs	r3, #1
 8001b46:	b29a      	uxth	r2, r3
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001b4c:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b52:	68fa      	ldr	r2, [r7, #12]
 8001b54:	6812      	ldr	r2, [r2, #0]
 8001b56:	6912      	ldr	r2, [r2, #16]
 8001b58:	b2d2      	uxtb	r2, r2
 8001b5a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b60:	1c5a      	adds	r2, r3, #1
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b6a:	3b01      	subs	r3, #1
 8001b6c:	b29a      	uxth	r2, r3
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b76:	b29b      	uxth	r3, r3
 8001b78:	3b01      	subs	r3, #1
 8001b7a:	b29a      	uxth	r2, r3
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001b80:	e0df      	b.n	8001d42 <HAL_I2C_Master_Receive+0x476>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b84:	9300      	str	r3, [sp, #0]
 8001b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b88:	2200      	movs	r2, #0
 8001b8a:	497a      	ldr	r1, [pc, #488]	; (8001d74 <HAL_I2C_Master_Receive+0x4a8>)
 8001b8c:	68f8      	ldr	r0, [r7, #12]
 8001b8e:	f000 fd91 	bl	80026b4 <I2C_WaitOnFlagUntilTimeout>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <HAL_I2C_Master_Receive+0x2d0>
          {
            return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e0e6      	b.n	8001d6a <HAL_I2C_Master_Receive+0x49e>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	68fa      	ldr	r2, [r7, #12]
 8001ba2:	6812      	ldr	r2, [r2, #0]
 8001ba4:	6812      	ldr	r2, [r2, #0]
 8001ba6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001baa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001bac:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb2:	68fa      	ldr	r2, [r7, #12]
 8001bb4:	6812      	ldr	r2, [r2, #0]
 8001bb6:	6912      	ldr	r2, [r2, #16]
 8001bb8:	b2d2      	uxtb	r2, r2
 8001bba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc0:	1c5a      	adds	r2, r3, #1
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bca:	3b01      	subs	r3, #1
 8001bcc:	b29a      	uxth	r2, r3
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	3b01      	subs	r3, #1
 8001bda:	b29a      	uxth	r2, r3
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001be0:	4b65      	ldr	r3, [pc, #404]	; (8001d78 <HAL_I2C_Master_Receive+0x4ac>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	08db      	lsrs	r3, r3, #3
 8001be6:	4a65      	ldr	r2, [pc, #404]	; (8001d7c <HAL_I2C_Master_Receive+0x4b0>)
 8001be8:	fba2 2303 	umull	r2, r3, r2, r3
 8001bec:	0a1a      	lsrs	r2, r3, #8
 8001bee:	4613      	mov	r3, r2
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	4413      	add	r3, r2
 8001bf4:	00da      	lsls	r2, r3, #3
 8001bf6:	1ad3      	subs	r3, r2, r3
 8001bf8:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8001bfa:	6a3b      	ldr	r3, [r7, #32]
 8001bfc:	3b01      	subs	r3, #1
 8001bfe:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8001c00:	6a3b      	ldr	r3, [r7, #32]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d117      	bne.n	8001c36 <HAL_I2C_Master_Receive+0x36a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	2220      	movs	r2, #32
 8001c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	2200      	movs	r2, #0
 8001c18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c20:	f043 0220 	orr.w	r2, r3, #32
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8001c28:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e099      	b.n	8001d6a <HAL_I2C_Master_Receive+0x49e>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	695b      	ldr	r3, [r3, #20]
 8001c3c:	f003 0304 	and.w	r3, r3, #4
 8001c40:	2b04      	cmp	r3, #4
 8001c42:	d1da      	bne.n	8001bfa <HAL_I2C_Master_Receive+0x32e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	68fa      	ldr	r2, [r7, #12]
 8001c4a:	6812      	ldr	r2, [r2, #0]
 8001c4c:	6812      	ldr	r2, [r2, #0]
 8001c4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c52:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c58:	68fa      	ldr	r2, [r7, #12]
 8001c5a:	6812      	ldr	r2, [r2, #0]
 8001c5c:	6912      	ldr	r2, [r2, #16]
 8001c5e:	b2d2      	uxtb	r2, r2
 8001c60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c66:	1c5a      	adds	r2, r3, #1
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c70:	3b01      	subs	r3, #1
 8001c72:	b29a      	uxth	r2, r3
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c7c:	b29b      	uxth	r3, r3
 8001c7e:	3b01      	subs	r3, #1
 8001c80:	b29a      	uxth	r2, r3
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001c86:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c8c:	68fa      	ldr	r2, [r7, #12]
 8001c8e:	6812      	ldr	r2, [r2, #0]
 8001c90:	6912      	ldr	r2, [r2, #16]
 8001c92:	b2d2      	uxtb	r2, r2
 8001c94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c9a:	1c5a      	adds	r2, r3, #1
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ca4:	3b01      	subs	r3, #1
 8001ca6:	b29a      	uxth	r2, r3
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cb0:	b29b      	uxth	r3, r3
 8001cb2:	3b01      	subs	r3, #1
 8001cb4:	b29a      	uxth	r2, r3
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001cba:	e042      	b.n	8001d42 <HAL_I2C_Master_Receive+0x476>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cbe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001cc0:	68f8      	ldr	r0, [r7, #12]
 8001cc2:	f000 fe4f 	bl	8002964 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d001      	beq.n	8001cd0 <HAL_I2C_Master_Receive+0x404>
        {
          return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e04c      	b.n	8001d6a <HAL_I2C_Master_Receive+0x49e>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd4:	68fa      	ldr	r2, [r7, #12]
 8001cd6:	6812      	ldr	r2, [r2, #0]
 8001cd8:	6912      	ldr	r2, [r2, #16]
 8001cda:	b2d2      	uxtb	r2, r2
 8001cdc:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce2:	1c5a      	adds	r2, r3, #1
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cec:	3b01      	subs	r3, #1
 8001cee:	b29a      	uxth	r2, r3
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cf8:	b29b      	uxth	r3, r3
 8001cfa:	3b01      	subs	r3, #1
 8001cfc:	b29a      	uxth	r2, r3
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	695b      	ldr	r3, [r3, #20]
 8001d08:	f003 0304 	and.w	r3, r3, #4
 8001d0c:	2b04      	cmp	r3, #4
 8001d0e:	d118      	bne.n	8001d42 <HAL_I2C_Master_Receive+0x476>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d14:	68fa      	ldr	r2, [r7, #12]
 8001d16:	6812      	ldr	r2, [r2, #0]
 8001d18:	6912      	ldr	r2, [r2, #16]
 8001d1a:	b2d2      	uxtb	r2, r2
 8001d1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d22:	1c5a      	adds	r2, r3, #1
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d2c:	3b01      	subs	r3, #1
 8001d2e:	b29a      	uxth	r2, r3
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d38:	b29b      	uxth	r3, r3
 8001d3a:	3b01      	subs	r3, #1
 8001d3c:	b29a      	uxth	r2, r3
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	f47f ae99 	bne.w	8001a7e <HAL_I2C_Master_Receive+0x1b2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2220      	movs	r2, #32
 8001d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2200      	movs	r2, #0
 8001d58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001d64:	2300      	movs	r3, #0
 8001d66:	e000      	b.n	8001d6a <HAL_I2C_Master_Receive+0x49e>
  }
  else
  {
    return HAL_BUSY;
 8001d68:	2302      	movs	r3, #2
  }
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3728      	adds	r7, #40	; 0x28
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	00010004 	.word	0x00010004
 8001d78:	20000000 	.word	0x20000000
 8001d7c:	14f8b589 	.word	0x14f8b589

08001d80 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b08c      	sub	sp, #48	; 0x30
 8001d84:	af02      	add	r7, sp, #8
 8001d86:	60f8      	str	r0, [r7, #12]
 8001d88:	4608      	mov	r0, r1
 8001d8a:	4611      	mov	r1, r2
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	4603      	mov	r3, r0
 8001d90:	817b      	strh	r3, [r7, #10]
 8001d92:	460b      	mov	r3, r1
 8001d94:	813b      	strh	r3, [r7, #8]
 8001d96:	4613      	mov	r3, r2
 8001d98:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001d9e:	f7ff f8f7 	bl	8000f90 <HAL_GetTick>
 8001da2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	2b20      	cmp	r3, #32
 8001dae:	f040 823d 	bne.w	800222c <HAL_I2C_Mem_Read+0x4ac>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db4:	9300      	str	r3, [sp, #0]
 8001db6:	2319      	movs	r3, #25
 8001db8:	2201      	movs	r2, #1
 8001dba:	4981      	ldr	r1, [pc, #516]	; (8001fc0 <HAL_I2C_Mem_Read+0x240>)
 8001dbc:	68f8      	ldr	r0, [r7, #12]
 8001dbe:	f000 fc79 	bl	80026b4 <I2C_WaitOnFlagUntilTimeout>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d001      	beq.n	8001dcc <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8001dc8:	2302      	movs	r3, #2
 8001dca:	e230      	b.n	800222e <HAL_I2C_Mem_Read+0x4ae>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d101      	bne.n	8001dda <HAL_I2C_Mem_Read+0x5a>
 8001dd6:	2302      	movs	r3, #2
 8001dd8:	e229      	b.n	800222e <HAL_I2C_Mem_Read+0x4ae>
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	2201      	movs	r2, #1
 8001dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0301 	and.w	r3, r3, #1
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d007      	beq.n	8001e00 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	68fa      	ldr	r2, [r7, #12]
 8001df6:	6812      	ldr	r2, [r2, #0]
 8001df8:	6812      	ldr	r2, [r2, #0]
 8001dfa:	f042 0201 	orr.w	r2, r2, #1
 8001dfe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	68fa      	ldr	r2, [r7, #12]
 8001e06:	6812      	ldr	r2, [r2, #0]
 8001e08:	6812      	ldr	r2, [r2, #0]
 8001e0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e0e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	2222      	movs	r2, #34	; 0x22
 8001e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2240      	movs	r2, #64	; 0x40
 8001e1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	2200      	movs	r2, #0
 8001e24:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e2a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001e30:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e36:	b29a      	uxth	r2, r3
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	4a61      	ldr	r2, [pc, #388]	; (8001fc4 <HAL_I2C_Mem_Read+0x244>)
 8001e40:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001e42:	88f8      	ldrh	r0, [r7, #6]
 8001e44:	893a      	ldrh	r2, [r7, #8]
 8001e46:	8979      	ldrh	r1, [r7, #10]
 8001e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4a:	9301      	str	r3, [sp, #4]
 8001e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e4e:	9300      	str	r3, [sp, #0]
 8001e50:	4603      	mov	r3, r0
 8001e52:	68f8      	ldr	r0, [r7, #12]
 8001e54:	f000 fb46 	bl	80024e4 <I2C_RequestMemoryRead>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e1e5      	b.n	800222e <HAL_I2C_Mem_Read+0x4ae>
    }

    if (hi2c->XferSize == 0U)
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d113      	bne.n	8001e92 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	61fb      	str	r3, [r7, #28]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	695b      	ldr	r3, [r3, #20]
 8001e74:	61fb      	str	r3, [r7, #28]
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	699b      	ldr	r3, [r3, #24]
 8001e7c:	61fb      	str	r3, [r7, #28]
 8001e7e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	68fa      	ldr	r2, [r7, #12]
 8001e86:	6812      	ldr	r2, [r2, #0]
 8001e88:	6812      	ldr	r2, [r2, #0]
 8001e8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e8e:	601a      	str	r2, [r3, #0]
 8001e90:	e1b9      	b.n	8002206 <HAL_I2C_Mem_Read+0x486>
    }
    else if (hi2c->XferSize == 1U)
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d11d      	bne.n	8001ed6 <HAL_I2C_Mem_Read+0x156>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	68fa      	ldr	r2, [r7, #12]
 8001ea0:	6812      	ldr	r2, [r2, #0]
 8001ea2:	6812      	ldr	r2, [r2, #0]
 8001ea4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ea8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001eaa:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001eac:	2300      	movs	r3, #0
 8001eae:	61bb      	str	r3, [r7, #24]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	695b      	ldr	r3, [r3, #20]
 8001eb6:	61bb      	str	r3, [r7, #24]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	699b      	ldr	r3, [r3, #24]
 8001ebe:	61bb      	str	r3, [r7, #24]
 8001ec0:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	68fa      	ldr	r2, [r7, #12]
 8001ec8:	6812      	ldr	r2, [r2, #0]
 8001eca:	6812      	ldr	r2, [r2, #0]
 8001ecc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ed0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001ed2:	b662      	cpsie	i
 8001ed4:	e197      	b.n	8002206 <HAL_I2C_Mem_Read+0x486>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d11d      	bne.n	8001f1a <HAL_I2C_Mem_Read+0x19a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	68fa      	ldr	r2, [r7, #12]
 8001ee4:	6812      	ldr	r2, [r2, #0]
 8001ee6:	6812      	ldr	r2, [r2, #0]
 8001ee8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001eec:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001eee:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	617b      	str	r3, [r7, #20]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	695b      	ldr	r3, [r3, #20]
 8001efa:	617b      	str	r3, [r7, #20]
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	699b      	ldr	r3, [r3, #24]
 8001f02:	617b      	str	r3, [r7, #20]
 8001f04:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	68fa      	ldr	r2, [r7, #12]
 8001f0c:	6812      	ldr	r2, [r2, #0]
 8001f0e:	6812      	ldr	r2, [r2, #0]
 8001f10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f14:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001f16:	b662      	cpsie	i
 8001f18:	e175      	b.n	8002206 <HAL_I2C_Mem_Read+0x486>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	68fa      	ldr	r2, [r7, #12]
 8001f20:	6812      	ldr	r2, [r2, #0]
 8001f22:	6812      	ldr	r2, [r2, #0]
 8001f24:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001f28:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	613b      	str	r3, [r7, #16]
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	695b      	ldr	r3, [r3, #20]
 8001f34:	613b      	str	r3, [r7, #16]
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	699b      	ldr	r3, [r3, #24]
 8001f3c:	613b      	str	r3, [r7, #16]
 8001f3e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001f40:	e161      	b.n	8002206 <HAL_I2C_Mem_Read+0x486>
    {
      if (hi2c->XferSize <= 3U)
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f46:	2b03      	cmp	r3, #3
 8001f48:	f200 811a 	bhi.w	8002180 <HAL_I2C_Mem_Read+0x400>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d123      	bne.n	8001f9c <HAL_I2C_Mem_Read+0x21c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f56:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001f58:	68f8      	ldr	r0, [r7, #12]
 8001f5a:	f000 fd03 	bl	8002964 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d001      	beq.n	8001f68 <HAL_I2C_Mem_Read+0x1e8>
          {
            return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e162      	b.n	800222e <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f6c:	68fa      	ldr	r2, [r7, #12]
 8001f6e:	6812      	ldr	r2, [r2, #0]
 8001f70:	6912      	ldr	r2, [r2, #16]
 8001f72:	b2d2      	uxtb	r2, r2
 8001f74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f7a:	1c5a      	adds	r2, r3, #1
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f84:	3b01      	subs	r3, #1
 8001f86:	b29a      	uxth	r2, r3
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f90:	b29b      	uxth	r3, r3
 8001f92:	3b01      	subs	r3, #1
 8001f94:	b29a      	uxth	r2, r3
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001f9a:	e134      	b.n	8002206 <HAL_I2C_Mem_Read+0x486>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	d150      	bne.n	8002046 <HAL_I2C_Mem_Read+0x2c6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa6:	9300      	str	r3, [sp, #0]
 8001fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001faa:	2200      	movs	r2, #0
 8001fac:	4906      	ldr	r1, [pc, #24]	; (8001fc8 <HAL_I2C_Mem_Read+0x248>)
 8001fae:	68f8      	ldr	r0, [r7, #12]
 8001fb0:	f000 fb80 	bl	80026b4 <I2C_WaitOnFlagUntilTimeout>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d008      	beq.n	8001fcc <HAL_I2C_Mem_Read+0x24c>
          {
            return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e137      	b.n	800222e <HAL_I2C_Mem_Read+0x4ae>
 8001fbe:	bf00      	nop
 8001fc0:	00100002 	.word	0x00100002
 8001fc4:	ffff0000 	.word	0xffff0000
 8001fc8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001fcc:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	68fa      	ldr	r2, [r7, #12]
 8001fd4:	6812      	ldr	r2, [r2, #0]
 8001fd6:	6812      	ldr	r2, [r2, #0]
 8001fd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fdc:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe2:	68fa      	ldr	r2, [r7, #12]
 8001fe4:	6812      	ldr	r2, [r2, #0]
 8001fe6:	6912      	ldr	r2, [r2, #16]
 8001fe8:	b2d2      	uxtb	r2, r2
 8001fea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff0:	1c5a      	adds	r2, r3, #1
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ffa:	3b01      	subs	r3, #1
 8001ffc:	b29a      	uxth	r2, r3
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002006:	b29b      	uxth	r3, r3
 8002008:	3b01      	subs	r3, #1
 800200a:	b29a      	uxth	r2, r3
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002010:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002016:	68fa      	ldr	r2, [r7, #12]
 8002018:	6812      	ldr	r2, [r2, #0]
 800201a:	6912      	ldr	r2, [r2, #16]
 800201c:	b2d2      	uxtb	r2, r2
 800201e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002024:	1c5a      	adds	r2, r3, #1
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800202e:	3b01      	subs	r3, #1
 8002030:	b29a      	uxth	r2, r3
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800203a:	b29b      	uxth	r3, r3
 800203c:	3b01      	subs	r3, #1
 800203e:	b29a      	uxth	r2, r3
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002044:	e0df      	b.n	8002206 <HAL_I2C_Mem_Read+0x486>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002048:	9300      	str	r3, [sp, #0]
 800204a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800204c:	2200      	movs	r2, #0
 800204e:	497a      	ldr	r1, [pc, #488]	; (8002238 <HAL_I2C_Mem_Read+0x4b8>)
 8002050:	68f8      	ldr	r0, [r7, #12]
 8002052:	f000 fb2f 	bl	80026b4 <I2C_WaitOnFlagUntilTimeout>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d001      	beq.n	8002060 <HAL_I2C_Mem_Read+0x2e0>
          {
            return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e0e6      	b.n	800222e <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	68fa      	ldr	r2, [r7, #12]
 8002066:	6812      	ldr	r2, [r2, #0]
 8002068:	6812      	ldr	r2, [r2, #0]
 800206a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800206e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002070:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002076:	68fa      	ldr	r2, [r7, #12]
 8002078:	6812      	ldr	r2, [r2, #0]
 800207a:	6912      	ldr	r2, [r2, #16]
 800207c:	b2d2      	uxtb	r2, r2
 800207e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002084:	1c5a      	adds	r2, r3, #1
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800208e:	3b01      	subs	r3, #1
 8002090:	b29a      	uxth	r2, r3
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800209a:	b29b      	uxth	r3, r3
 800209c:	3b01      	subs	r3, #1
 800209e:	b29a      	uxth	r2, r3
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80020a4:	4b65      	ldr	r3, [pc, #404]	; (800223c <HAL_I2C_Mem_Read+0x4bc>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	08db      	lsrs	r3, r3, #3
 80020aa:	4a65      	ldr	r2, [pc, #404]	; (8002240 <HAL_I2C_Mem_Read+0x4c0>)
 80020ac:	fba2 2303 	umull	r2, r3, r2, r3
 80020b0:	0a1a      	lsrs	r2, r3, #8
 80020b2:	4613      	mov	r3, r2
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	4413      	add	r3, r2
 80020b8:	00da      	lsls	r2, r3, #3
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80020be:	6a3b      	ldr	r3, [r7, #32]
 80020c0:	3b01      	subs	r3, #1
 80020c2:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80020c4:	6a3b      	ldr	r3, [r7, #32]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d117      	bne.n	80020fa <HAL_I2C_Mem_Read+0x37a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	2200      	movs	r2, #0
 80020ce:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2220      	movs	r2, #32
 80020d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2200      	movs	r2, #0
 80020dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e4:	f043 0220 	orr.w	r2, r3, #32
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80020ec:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	2200      	movs	r2, #0
 80020f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e099      	b.n	800222e <HAL_I2C_Mem_Read+0x4ae>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	695b      	ldr	r3, [r3, #20]
 8002100:	f003 0304 	and.w	r3, r3, #4
 8002104:	2b04      	cmp	r3, #4
 8002106:	d1da      	bne.n	80020be <HAL_I2C_Mem_Read+0x33e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	68fa      	ldr	r2, [r7, #12]
 800210e:	6812      	ldr	r2, [r2, #0]
 8002110:	6812      	ldr	r2, [r2, #0]
 8002112:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002116:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800211c:	68fa      	ldr	r2, [r7, #12]
 800211e:	6812      	ldr	r2, [r2, #0]
 8002120:	6912      	ldr	r2, [r2, #16]
 8002122:	b2d2      	uxtb	r2, r2
 8002124:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212a:	1c5a      	adds	r2, r3, #1
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002134:	3b01      	subs	r3, #1
 8002136:	b29a      	uxth	r2, r3
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002140:	b29b      	uxth	r3, r3
 8002142:	3b01      	subs	r3, #1
 8002144:	b29a      	uxth	r2, r3
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	855a      	strh	r2, [r3, #42]	; 0x2a
 800214a:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002150:	68fa      	ldr	r2, [r7, #12]
 8002152:	6812      	ldr	r2, [r2, #0]
 8002154:	6912      	ldr	r2, [r2, #16]
 8002156:	b2d2      	uxtb	r2, r2
 8002158:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800215e:	1c5a      	adds	r2, r3, #1
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002168:	3b01      	subs	r3, #1
 800216a:	b29a      	uxth	r2, r3
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002174:	b29b      	uxth	r3, r3
 8002176:	3b01      	subs	r3, #1
 8002178:	b29a      	uxth	r2, r3
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800217e:	e042      	b.n	8002206 <HAL_I2C_Mem_Read+0x486>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002180:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002182:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002184:	68f8      	ldr	r0, [r7, #12]
 8002186:	f000 fbed 	bl	8002964 <I2C_WaitOnRXNEFlagUntilTimeout>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d001      	beq.n	8002194 <HAL_I2C_Mem_Read+0x414>
        {
          return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e04c      	b.n	800222e <HAL_I2C_Mem_Read+0x4ae>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002198:	68fa      	ldr	r2, [r7, #12]
 800219a:	6812      	ldr	r2, [r2, #0]
 800219c:	6912      	ldr	r2, [r2, #16]
 800219e:	b2d2      	uxtb	r2, r2
 80021a0:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a6:	1c5a      	adds	r2, r3, #1
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021b0:	3b01      	subs	r3, #1
 80021b2:	b29a      	uxth	r2, r3
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021bc:	b29b      	uxth	r3, r3
 80021be:	3b01      	subs	r3, #1
 80021c0:	b29a      	uxth	r2, r3
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	695b      	ldr	r3, [r3, #20]
 80021cc:	f003 0304 	and.w	r3, r3, #4
 80021d0:	2b04      	cmp	r3, #4
 80021d2:	d118      	bne.n	8002206 <HAL_I2C_Mem_Read+0x486>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d8:	68fa      	ldr	r2, [r7, #12]
 80021da:	6812      	ldr	r2, [r2, #0]
 80021dc:	6912      	ldr	r2, [r2, #16]
 80021de:	b2d2      	uxtb	r2, r2
 80021e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e6:	1c5a      	adds	r2, r3, #1
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021f0:	3b01      	subs	r3, #1
 80021f2:	b29a      	uxth	r2, r3
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021fc:	b29b      	uxth	r3, r3
 80021fe:	3b01      	subs	r3, #1
 8002200:	b29a      	uxth	r2, r3
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800220a:	2b00      	cmp	r3, #0
 800220c:	f47f ae99 	bne.w	8001f42 <HAL_I2C_Mem_Read+0x1c2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2220      	movs	r2, #32
 8002214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2200      	movs	r2, #0
 800221c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	2200      	movs	r2, #0
 8002224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002228:	2300      	movs	r3, #0
 800222a:	e000      	b.n	800222e <HAL_I2C_Mem_Read+0x4ae>
  }
  else
  {
    return HAL_BUSY;
 800222c:	2302      	movs	r3, #2
  }
}
 800222e:	4618      	mov	r0, r3
 8002230:	3728      	adds	r7, #40	; 0x28
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	00010004 	.word	0x00010004
 800223c:	20000000 	.word	0x20000000
 8002240:	14f8b589 	.word	0x14f8b589

08002244 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b088      	sub	sp, #32
 8002248:	af02      	add	r7, sp, #8
 800224a:	60f8      	str	r0, [r7, #12]
 800224c:	607a      	str	r2, [r7, #4]
 800224e:	603b      	str	r3, [r7, #0]
 8002250:	460b      	mov	r3, r1
 8002252:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002258:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	2b08      	cmp	r3, #8
 800225e:	d006      	beq.n	800226e <I2C_MasterRequestWrite+0x2a>
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	2b01      	cmp	r3, #1
 8002264:	d003      	beq.n	800226e <I2C_MasterRequestWrite+0x2a>
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800226c:	d108      	bne.n	8002280 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	68fa      	ldr	r2, [r7, #12]
 8002274:	6812      	ldr	r2, [r2, #0]
 8002276:	6812      	ldr	r2, [r2, #0]
 8002278:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800227c:	601a      	str	r2, [r3, #0]
 800227e:	e00b      	b.n	8002298 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002284:	2b12      	cmp	r3, #18
 8002286:	d107      	bne.n	8002298 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	68fa      	ldr	r2, [r7, #12]
 800228e:	6812      	ldr	r2, [r2, #0]
 8002290:	6812      	ldr	r2, [r2, #0]
 8002292:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002296:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	9300      	str	r3, [sp, #0]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2200      	movs	r2, #0
 80022a0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80022a4:	68f8      	ldr	r0, [r7, #12]
 80022a6:	f000 fa05 	bl	80026b4 <I2C_WaitOnFlagUntilTimeout>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d00d      	beq.n	80022cc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022be:	d103      	bne.n	80022c8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022c6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80022c8:	2303      	movs	r3, #3
 80022ca:	e034      	b.n	8002336 <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	691b      	ldr	r3, [r3, #16]
 80022d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80022d4:	d107      	bne.n	80022e6 <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	897a      	ldrh	r2, [r7, #10]
 80022dc:	b2d2      	uxtb	r2, r2
 80022de:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80022e2:	611a      	str	r2, [r3, #16]
 80022e4:	e01b      	b.n	800231e <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	897a      	ldrh	r2, [r7, #10]
 80022ec:	11d2      	asrs	r2, r2, #7
 80022ee:	b2d2      	uxtb	r2, r2
 80022f0:	f002 0206 	and.w	r2, r2, #6
 80022f4:	b2d2      	uxtb	r2, r2
 80022f6:	f062 020f 	orn	r2, r2, #15
 80022fa:	b2d2      	uxtb	r2, r2
 80022fc:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	687a      	ldr	r2, [r7, #4]
 8002302:	490f      	ldr	r1, [pc, #60]	; (8002340 <I2C_MasterRequestWrite+0xfc>)
 8002304:	68f8      	ldr	r0, [r7, #12]
 8002306:	f000 fa2c 	bl	8002762 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d001      	beq.n	8002314 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e010      	b.n	8002336 <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	897a      	ldrh	r2, [r7, #10]
 800231a:	b2d2      	uxtb	r2, r2
 800231c:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	4908      	ldr	r1, [pc, #32]	; (8002344 <I2C_MasterRequestWrite+0x100>)
 8002324:	68f8      	ldr	r0, [r7, #12]
 8002326:	f000 fa1c 	bl	8002762 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d001      	beq.n	8002334 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e000      	b.n	8002336 <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 8002334:	2300      	movs	r3, #0
}
 8002336:	4618      	mov	r0, r3
 8002338:	3718      	adds	r7, #24
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	00010008 	.word	0x00010008
 8002344:	00010002 	.word	0x00010002

08002348 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b088      	sub	sp, #32
 800234c:	af02      	add	r7, sp, #8
 800234e:	60f8      	str	r0, [r7, #12]
 8002350:	607a      	str	r2, [r7, #4]
 8002352:	603b      	str	r3, [r7, #0]
 8002354:	460b      	mov	r3, r1
 8002356:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800235c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	68fa      	ldr	r2, [r7, #12]
 8002364:	6812      	ldr	r2, [r2, #0]
 8002366:	6812      	ldr	r2, [r2, #0]
 8002368:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800236c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	2b08      	cmp	r3, #8
 8002372:	d006      	beq.n	8002382 <I2C_MasterRequestRead+0x3a>
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	2b01      	cmp	r3, #1
 8002378:	d003      	beq.n	8002382 <I2C_MasterRequestRead+0x3a>
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002380:	d108      	bne.n	8002394 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	68fa      	ldr	r2, [r7, #12]
 8002388:	6812      	ldr	r2, [r2, #0]
 800238a:	6812      	ldr	r2, [r2, #0]
 800238c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002390:	601a      	str	r2, [r3, #0]
 8002392:	e00b      	b.n	80023ac <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002398:	2b11      	cmp	r3, #17
 800239a:	d107      	bne.n	80023ac <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	68fa      	ldr	r2, [r7, #12]
 80023a2:	6812      	ldr	r2, [r2, #0]
 80023a4:	6812      	ldr	r2, [r2, #0]
 80023a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023aa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	9300      	str	r3, [sp, #0]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2200      	movs	r2, #0
 80023b4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80023b8:	68f8      	ldr	r0, [r7, #12]
 80023ba:	f000 f97b 	bl	80026b4 <I2C_WaitOnFlagUntilTimeout>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d00d      	beq.n	80023e0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023d2:	d103      	bne.n	80023dc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023da:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	e079      	b.n	80024d4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	691b      	ldr	r3, [r3, #16]
 80023e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80023e8:	d108      	bne.n	80023fc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	897a      	ldrh	r2, [r7, #10]
 80023f0:	b2d2      	uxtb	r2, r2
 80023f2:	f042 0201 	orr.w	r2, r2, #1
 80023f6:	b2d2      	uxtb	r2, r2
 80023f8:	611a      	str	r2, [r3, #16]
 80023fa:	e05f      	b.n	80024bc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	897a      	ldrh	r2, [r7, #10]
 8002402:	11d2      	asrs	r2, r2, #7
 8002404:	b2d2      	uxtb	r2, r2
 8002406:	f002 0206 	and.w	r2, r2, #6
 800240a:	b2d2      	uxtb	r2, r2
 800240c:	f062 020f 	orn	r2, r2, #15
 8002410:	b2d2      	uxtb	r2, r2
 8002412:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	4930      	ldr	r1, [pc, #192]	; (80024dc <I2C_MasterRequestRead+0x194>)
 800241a:	68f8      	ldr	r0, [r7, #12]
 800241c:	f000 f9a1 	bl	8002762 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d001      	beq.n	800242a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e054      	b.n	80024d4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	897a      	ldrh	r2, [r7, #10]
 8002430:	b2d2      	uxtb	r2, r2
 8002432:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	4929      	ldr	r1, [pc, #164]	; (80024e0 <I2C_MasterRequestRead+0x198>)
 800243a:	68f8      	ldr	r0, [r7, #12]
 800243c:	f000 f991 	bl	8002762 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d001      	beq.n	800244a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e044      	b.n	80024d4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800244a:	2300      	movs	r3, #0
 800244c:	613b      	str	r3, [r7, #16]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	695b      	ldr	r3, [r3, #20]
 8002454:	613b      	str	r3, [r7, #16]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	699b      	ldr	r3, [r3, #24]
 800245c:	613b      	str	r3, [r7, #16]
 800245e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	68fa      	ldr	r2, [r7, #12]
 8002466:	6812      	ldr	r2, [r2, #0]
 8002468:	6812      	ldr	r2, [r2, #0]
 800246a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800246e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	9300      	str	r3, [sp, #0]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2200      	movs	r2, #0
 8002478:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800247c:	68f8      	ldr	r0, [r7, #12]
 800247e:	f000 f919 	bl	80026b4 <I2C_WaitOnFlagUntilTimeout>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d00d      	beq.n	80024a4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002492:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002496:	d103      	bne.n	80024a0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800249e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80024a0:	2303      	movs	r3, #3
 80024a2:	e017      	b.n	80024d4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	897a      	ldrh	r2, [r7, #10]
 80024aa:	11d2      	asrs	r2, r2, #7
 80024ac:	b2d2      	uxtb	r2, r2
 80024ae:	f002 0206 	and.w	r2, r2, #6
 80024b2:	b2d2      	uxtb	r2, r2
 80024b4:	f062 020e 	orn	r2, r2, #14
 80024b8:	b2d2      	uxtb	r2, r2
 80024ba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	4907      	ldr	r1, [pc, #28]	; (80024e0 <I2C_MasterRequestRead+0x198>)
 80024c2:	68f8      	ldr	r0, [r7, #12]
 80024c4:	f000 f94d 	bl	8002762 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d001      	beq.n	80024d2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e000      	b.n	80024d4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80024d2:	2300      	movs	r3, #0
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3718      	adds	r7, #24
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	00010008 	.word	0x00010008
 80024e0:	00010002 	.word	0x00010002

080024e4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b088      	sub	sp, #32
 80024e8:	af02      	add	r7, sp, #8
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	4608      	mov	r0, r1
 80024ee:	4611      	mov	r1, r2
 80024f0:	461a      	mov	r2, r3
 80024f2:	4603      	mov	r3, r0
 80024f4:	817b      	strh	r3, [r7, #10]
 80024f6:	460b      	mov	r3, r1
 80024f8:	813b      	strh	r3, [r7, #8]
 80024fa:	4613      	mov	r3, r2
 80024fc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	68fa      	ldr	r2, [r7, #12]
 8002504:	6812      	ldr	r2, [r2, #0]
 8002506:	6812      	ldr	r2, [r2, #0]
 8002508:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800250c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	68fa      	ldr	r2, [r7, #12]
 8002514:	6812      	ldr	r2, [r2, #0]
 8002516:	6812      	ldr	r2, [r2, #0]
 8002518:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800251c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800251e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002520:	9300      	str	r3, [sp, #0]
 8002522:	6a3b      	ldr	r3, [r7, #32]
 8002524:	2200      	movs	r2, #0
 8002526:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800252a:	68f8      	ldr	r0, [r7, #12]
 800252c:	f000 f8c2 	bl	80026b4 <I2C_WaitOnFlagUntilTimeout>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d00d      	beq.n	8002552 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002540:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002544:	d103      	bne.n	800254e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	f44f 7200 	mov.w	r2, #512	; 0x200
 800254c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e0a9      	b.n	80026a6 <I2C_RequestMemoryRead+0x1c2>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	897a      	ldrh	r2, [r7, #10]
 8002558:	b2d2      	uxtb	r2, r2
 800255a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800255e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002562:	6a3a      	ldr	r2, [r7, #32]
 8002564:	4952      	ldr	r1, [pc, #328]	; (80026b0 <I2C_RequestMemoryRead+0x1cc>)
 8002566:	68f8      	ldr	r0, [r7, #12]
 8002568:	f000 f8fb 	bl	8002762 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d001      	beq.n	8002576 <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e097      	b.n	80026a6 <I2C_RequestMemoryRead+0x1c2>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002576:	2300      	movs	r3, #0
 8002578:	617b      	str	r3, [r7, #20]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	695b      	ldr	r3, [r3, #20]
 8002580:	617b      	str	r3, [r7, #20]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	699b      	ldr	r3, [r3, #24]
 8002588:	617b      	str	r3, [r7, #20]
 800258a:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800258c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800258e:	6a39      	ldr	r1, [r7, #32]
 8002590:	68f8      	ldr	r0, [r7, #12]
 8002592:	f000 f965 	bl	8002860 <I2C_WaitOnTXEFlagUntilTimeout>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d00d      	beq.n	80025b8 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a0:	2b04      	cmp	r3, #4
 80025a2:	d107      	bne.n	80025b4 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	68fa      	ldr	r2, [r7, #12]
 80025aa:	6812      	ldr	r2, [r2, #0]
 80025ac:	6812      	ldr	r2, [r2, #0]
 80025ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025b2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e076      	b.n	80026a6 <I2C_RequestMemoryRead+0x1c2>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80025b8:	88fb      	ldrh	r3, [r7, #6]
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d105      	bne.n	80025ca <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	893a      	ldrh	r2, [r7, #8]
 80025c4:	b2d2      	uxtb	r2, r2
 80025c6:	611a      	str	r2, [r3, #16]
 80025c8:	e021      	b.n	800260e <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	893a      	ldrh	r2, [r7, #8]
 80025d0:	0a12      	lsrs	r2, r2, #8
 80025d2:	b292      	uxth	r2, r2
 80025d4:	b2d2      	uxtb	r2, r2
 80025d6:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025da:	6a39      	ldr	r1, [r7, #32]
 80025dc:	68f8      	ldr	r0, [r7, #12]
 80025de:	f000 f93f 	bl	8002860 <I2C_WaitOnTXEFlagUntilTimeout>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d00d      	beq.n	8002604 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ec:	2b04      	cmp	r3, #4
 80025ee:	d107      	bne.n	8002600 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	68fa      	ldr	r2, [r7, #12]
 80025f6:	6812      	ldr	r2, [r2, #0]
 80025f8:	6812      	ldr	r2, [r2, #0]
 80025fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025fe:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e050      	b.n	80026a6 <I2C_RequestMemoryRead+0x1c2>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	893a      	ldrh	r2, [r7, #8]
 800260a:	b2d2      	uxtb	r2, r2
 800260c:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800260e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002610:	6a39      	ldr	r1, [r7, #32]
 8002612:	68f8      	ldr	r0, [r7, #12]
 8002614:	f000 f924 	bl	8002860 <I2C_WaitOnTXEFlagUntilTimeout>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d00d      	beq.n	800263a <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002622:	2b04      	cmp	r3, #4
 8002624:	d107      	bne.n	8002636 <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	68fa      	ldr	r2, [r7, #12]
 800262c:	6812      	ldr	r2, [r2, #0]
 800262e:	6812      	ldr	r2, [r2, #0]
 8002630:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002634:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e035      	b.n	80026a6 <I2C_RequestMemoryRead+0x1c2>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	68fa      	ldr	r2, [r7, #12]
 8002640:	6812      	ldr	r2, [r2, #0]
 8002642:	6812      	ldr	r2, [r2, #0]
 8002644:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002648:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800264a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264c:	9300      	str	r3, [sp, #0]
 800264e:	6a3b      	ldr	r3, [r7, #32]
 8002650:	2200      	movs	r2, #0
 8002652:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002656:	68f8      	ldr	r0, [r7, #12]
 8002658:	f000 f82c 	bl	80026b4 <I2C_WaitOnFlagUntilTimeout>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d00d      	beq.n	800267e <I2C_RequestMemoryRead+0x19a>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800266c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002670:	d103      	bne.n	800267a <I2C_RequestMemoryRead+0x196>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002678:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	e013      	b.n	80026a6 <I2C_RequestMemoryRead+0x1c2>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	897a      	ldrh	r2, [r7, #10]
 8002684:	b2d2      	uxtb	r2, r2
 8002686:	f042 0201 	orr.w	r2, r2, #1
 800268a:	b2d2      	uxtb	r2, r2
 800268c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800268e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002690:	6a3a      	ldr	r2, [r7, #32]
 8002692:	4907      	ldr	r1, [pc, #28]	; (80026b0 <I2C_RequestMemoryRead+0x1cc>)
 8002694:	68f8      	ldr	r0, [r7, #12]
 8002696:	f000 f864 	bl	8002762 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d001      	beq.n	80026a4 <I2C_RequestMemoryRead+0x1c0>
  {
    return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e000      	b.n	80026a6 <I2C_RequestMemoryRead+0x1c2>
  }

  return HAL_OK;
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3718      	adds	r7, #24
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	00010002 	.word	0x00010002

080026b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b084      	sub	sp, #16
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	60f8      	str	r0, [r7, #12]
 80026bc:	60b9      	str	r1, [r7, #8]
 80026be:	603b      	str	r3, [r7, #0]
 80026c0:	4613      	mov	r3, r2
 80026c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026c4:	e025      	b.n	8002712 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026cc:	d021      	beq.n	8002712 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026ce:	f7fe fc5f 	bl	8000f90 <HAL_GetTick>
 80026d2:	4602      	mov	r2, r0
 80026d4:	69bb      	ldr	r3, [r7, #24]
 80026d6:	1ad2      	subs	r2, r2, r3
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	429a      	cmp	r2, r3
 80026dc:	d802      	bhi.n	80026e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d116      	bne.n	8002712 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2200      	movs	r2, #0
 80026e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2220      	movs	r2, #32
 80026ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2200      	movs	r2, #0
 80026f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fe:	f043 0220 	orr.w	r2, r3, #32
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2200      	movs	r2, #0
 800270a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e023      	b.n	800275a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	0c1b      	lsrs	r3, r3, #16
 8002716:	b2db      	uxtb	r3, r3
 8002718:	2b01      	cmp	r3, #1
 800271a:	d10d      	bne.n	8002738 <I2C_WaitOnFlagUntilTimeout+0x84>
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	695b      	ldr	r3, [r3, #20]
 8002722:	43da      	mvns	r2, r3
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	4013      	ands	r3, r2
 8002728:	b29b      	uxth	r3, r3
 800272a:	2b00      	cmp	r3, #0
 800272c:	bf0c      	ite	eq
 800272e:	2301      	moveq	r3, #1
 8002730:	2300      	movne	r3, #0
 8002732:	b2db      	uxtb	r3, r3
 8002734:	461a      	mov	r2, r3
 8002736:	e00c      	b.n	8002752 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	699b      	ldr	r3, [r3, #24]
 800273e:	43da      	mvns	r2, r3
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	4013      	ands	r3, r2
 8002744:	b29b      	uxth	r3, r3
 8002746:	2b00      	cmp	r3, #0
 8002748:	bf0c      	ite	eq
 800274a:	2301      	moveq	r3, #1
 800274c:	2300      	movne	r3, #0
 800274e:	b2db      	uxtb	r3, r3
 8002750:	461a      	mov	r2, r3
 8002752:	79fb      	ldrb	r3, [r7, #7]
 8002754:	429a      	cmp	r2, r3
 8002756:	d0b6      	beq.n	80026c6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002758:	2300      	movs	r3, #0
}
 800275a:	4618      	mov	r0, r3
 800275c:	3710      	adds	r7, #16
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}

08002762 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002762:	b580      	push	{r7, lr}
 8002764:	b084      	sub	sp, #16
 8002766:	af00      	add	r7, sp, #0
 8002768:	60f8      	str	r0, [r7, #12]
 800276a:	60b9      	str	r1, [r7, #8]
 800276c:	607a      	str	r2, [r7, #4]
 800276e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002770:	e051      	b.n	8002816 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	695b      	ldr	r3, [r3, #20]
 8002778:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800277c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002780:	d123      	bne.n	80027ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	68fa      	ldr	r2, [r7, #12]
 8002788:	6812      	ldr	r2, [r2, #0]
 800278a:	6812      	ldr	r2, [r2, #0]
 800278c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002790:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800279a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2200      	movs	r2, #0
 80027a0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2220      	movs	r2, #32
 80027a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2200      	movs	r2, #0
 80027ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b6:	f043 0204 	orr.w	r2, r3, #4
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2200      	movs	r2, #0
 80027c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e046      	b.n	8002858 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027d0:	d021      	beq.n	8002816 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027d2:	f7fe fbdd 	bl	8000f90 <HAL_GetTick>
 80027d6:	4602      	mov	r2, r0
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	1ad2      	subs	r2, r2, r3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	429a      	cmp	r2, r3
 80027e0:	d802      	bhi.n	80027e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d116      	bne.n	8002816 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2200      	movs	r2, #0
 80027ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2220      	movs	r2, #32
 80027f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2200      	movs	r2, #0
 80027fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002802:	f043 0220 	orr.w	r2, r3, #32
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2200      	movs	r2, #0
 800280e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e020      	b.n	8002858 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	0c1b      	lsrs	r3, r3, #16
 800281a:	b2db      	uxtb	r3, r3
 800281c:	2b01      	cmp	r3, #1
 800281e:	d10c      	bne.n	800283a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	695b      	ldr	r3, [r3, #20]
 8002826:	43da      	mvns	r2, r3
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	4013      	ands	r3, r2
 800282c:	b29b      	uxth	r3, r3
 800282e:	2b00      	cmp	r3, #0
 8002830:	bf14      	ite	ne
 8002832:	2301      	movne	r3, #1
 8002834:	2300      	moveq	r3, #0
 8002836:	b2db      	uxtb	r3, r3
 8002838:	e00b      	b.n	8002852 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	699b      	ldr	r3, [r3, #24]
 8002840:	43da      	mvns	r2, r3
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	4013      	ands	r3, r2
 8002846:	b29b      	uxth	r3, r3
 8002848:	2b00      	cmp	r3, #0
 800284a:	bf14      	ite	ne
 800284c:	2301      	movne	r3, #1
 800284e:	2300      	moveq	r3, #0
 8002850:	b2db      	uxtb	r3, r3
 8002852:	2b00      	cmp	r3, #0
 8002854:	d18d      	bne.n	8002772 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002856:	2300      	movs	r3, #0
}
 8002858:	4618      	mov	r0, r3
 800285a:	3710      	adds	r7, #16
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}

08002860 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	60f8      	str	r0, [r7, #12]
 8002868:	60b9      	str	r1, [r7, #8]
 800286a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800286c:	e02d      	b.n	80028ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800286e:	68f8      	ldr	r0, [r7, #12]
 8002870:	f000 f8ce 	bl	8002a10 <I2C_IsAcknowledgeFailed>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d001      	beq.n	800287e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e02d      	b.n	80028da <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002884:	d021      	beq.n	80028ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002886:	f7fe fb83 	bl	8000f90 <HAL_GetTick>
 800288a:	4602      	mov	r2, r0
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	1ad2      	subs	r2, r2, r3
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	429a      	cmp	r2, r3
 8002894:	d802      	bhi.n	800289c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d116      	bne.n	80028ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2200      	movs	r2, #0
 80028a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2220      	movs	r2, #32
 80028a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2200      	movs	r2, #0
 80028ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b6:	f043 0220 	orr.w	r2, r3, #32
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2200      	movs	r2, #0
 80028c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e007      	b.n	80028da <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	695b      	ldr	r3, [r3, #20]
 80028d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028d4:	2b80      	cmp	r3, #128	; 0x80
 80028d6:	d1ca      	bne.n	800286e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80028d8:	2300      	movs	r3, #0
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3710      	adds	r7, #16
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}

080028e2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028e2:	b580      	push	{r7, lr}
 80028e4:	b084      	sub	sp, #16
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	60f8      	str	r0, [r7, #12]
 80028ea:	60b9      	str	r1, [r7, #8]
 80028ec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80028ee:	e02d      	b.n	800294c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80028f0:	68f8      	ldr	r0, [r7, #12]
 80028f2:	f000 f88d 	bl	8002a10 <I2C_IsAcknowledgeFailed>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d001      	beq.n	8002900 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e02d      	b.n	800295c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002906:	d021      	beq.n	800294c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002908:	f7fe fb42 	bl	8000f90 <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	1ad2      	subs	r2, r2, r3
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	429a      	cmp	r2, r3
 8002916:	d802      	bhi.n	800291e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d116      	bne.n	800294c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2200      	movs	r2, #0
 8002922:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2220      	movs	r2, #32
 8002928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2200      	movs	r2, #0
 8002930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002938:	f043 0220 	orr.w	r2, r3, #32
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2200      	movs	r2, #0
 8002944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e007      	b.n	800295c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	695b      	ldr	r3, [r3, #20]
 8002952:	f003 0304 	and.w	r3, r3, #4
 8002956:	2b04      	cmp	r3, #4
 8002958:	d1ca      	bne.n	80028f0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800295a:	2300      	movs	r3, #0
}
 800295c:	4618      	mov	r0, r3
 800295e:	3710      	adds	r7, #16
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}

08002964 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	60f8      	str	r0, [r7, #12]
 800296c:	60b9      	str	r1, [r7, #8]
 800296e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002970:	e042      	b.n	80029f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	695b      	ldr	r3, [r3, #20]
 8002978:	f003 0310 	and.w	r3, r3, #16
 800297c:	2b10      	cmp	r3, #16
 800297e:	d119      	bne.n	80029b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f06f 0210 	mvn.w	r2, #16
 8002988:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2200      	movs	r2, #0
 800298e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2220      	movs	r2, #32
 8002994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2200      	movs	r2, #0
 800299c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2200      	movs	r2, #0
 80029ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e029      	b.n	8002a08 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029b4:	f7fe faec 	bl	8000f90 <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	1ad2      	subs	r2, r2, r3
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d802      	bhi.n	80029ca <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d116      	bne.n	80029f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2200      	movs	r2, #0
 80029ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2220      	movs	r2, #32
 80029d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2200      	movs	r2, #0
 80029dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e4:	f043 0220 	orr.w	r2, r3, #32
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2200      	movs	r2, #0
 80029f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e007      	b.n	8002a08 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	695b      	ldr	r3, [r3, #20]
 80029fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a02:	2b40      	cmp	r3, #64	; 0x40
 8002a04:	d1b5      	bne.n	8002972 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002a06:	2300      	movs	r3, #0
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3710      	adds	r7, #16
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	695b      	ldr	r3, [r3, #20]
 8002a1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a26:	d11b      	bne.n	8002a60 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a30:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2200      	movs	r2, #0
 8002a36:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2220      	movs	r2, #32
 8002a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4c:	f043 0204 	orr.w	r2, r3, #4
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e000      	b.n	8002a62 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002a60:	2300      	movs	r3, #0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	370c      	adds	r7, #12
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bc80      	pop	{r7}
 8002a6a:	4770      	bx	lr

08002a6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b086      	sub	sp, #24
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d101      	bne.n	8002a7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e26c      	b.n	8002f58 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0301 	and.w	r3, r3, #1
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	f000 8087 	beq.w	8002b9a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a8c:	4b92      	ldr	r3, [pc, #584]	; (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f003 030c 	and.w	r3, r3, #12
 8002a94:	2b04      	cmp	r3, #4
 8002a96:	d00c      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a98:	4b8f      	ldr	r3, [pc, #572]	; (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	f003 030c 	and.w	r3, r3, #12
 8002aa0:	2b08      	cmp	r3, #8
 8002aa2:	d112      	bne.n	8002aca <HAL_RCC_OscConfig+0x5e>
 8002aa4:	4b8c      	ldr	r3, [pc, #560]	; (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ab0:	d10b      	bne.n	8002aca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ab2:	4b89      	ldr	r3, [pc, #548]	; (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d06c      	beq.n	8002b98 <HAL_RCC_OscConfig+0x12c>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d168      	bne.n	8002b98 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e246      	b.n	8002f58 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ad2:	d106      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x76>
 8002ad4:	4a80      	ldr	r2, [pc, #512]	; (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002ad6:	4b80      	ldr	r3, [pc, #512]	; (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ade:	6013      	str	r3, [r2, #0]
 8002ae0:	e02e      	b.n	8002b40 <HAL_RCC_OscConfig+0xd4>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d10c      	bne.n	8002b04 <HAL_RCC_OscConfig+0x98>
 8002aea:	4a7b      	ldr	r2, [pc, #492]	; (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002aec:	4b7a      	ldr	r3, [pc, #488]	; (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002af4:	6013      	str	r3, [r2, #0]
 8002af6:	4a78      	ldr	r2, [pc, #480]	; (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002af8:	4b77      	ldr	r3, [pc, #476]	; (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b00:	6013      	str	r3, [r2, #0]
 8002b02:	e01d      	b.n	8002b40 <HAL_RCC_OscConfig+0xd4>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b0c:	d10c      	bne.n	8002b28 <HAL_RCC_OscConfig+0xbc>
 8002b0e:	4a72      	ldr	r2, [pc, #456]	; (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002b10:	4b71      	ldr	r3, [pc, #452]	; (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b18:	6013      	str	r3, [r2, #0]
 8002b1a:	4a6f      	ldr	r2, [pc, #444]	; (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002b1c:	4b6e      	ldr	r3, [pc, #440]	; (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b24:	6013      	str	r3, [r2, #0]
 8002b26:	e00b      	b.n	8002b40 <HAL_RCC_OscConfig+0xd4>
 8002b28:	4a6b      	ldr	r2, [pc, #428]	; (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002b2a:	4b6b      	ldr	r3, [pc, #428]	; (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b32:	6013      	str	r3, [r2, #0]
 8002b34:	4a68      	ldr	r2, [pc, #416]	; (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002b36:	4b68      	ldr	r3, [pc, #416]	; (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b3e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d013      	beq.n	8002b70 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b48:	f7fe fa22 	bl	8000f90 <HAL_GetTick>
 8002b4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b4e:	e008      	b.n	8002b62 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b50:	f7fe fa1e 	bl	8000f90 <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	2b64      	cmp	r3, #100	; 0x64
 8002b5c:	d901      	bls.n	8002b62 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e1fa      	b.n	8002f58 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b62:	4b5d      	ldr	r3, [pc, #372]	; (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d0f0      	beq.n	8002b50 <HAL_RCC_OscConfig+0xe4>
 8002b6e:	e014      	b.n	8002b9a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b70:	f7fe fa0e 	bl	8000f90 <HAL_GetTick>
 8002b74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b76:	e008      	b.n	8002b8a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b78:	f7fe fa0a 	bl	8000f90 <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	2b64      	cmp	r3, #100	; 0x64
 8002b84:	d901      	bls.n	8002b8a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e1e6      	b.n	8002f58 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b8a:	4b53      	ldr	r3, [pc, #332]	; (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d1f0      	bne.n	8002b78 <HAL_RCC_OscConfig+0x10c>
 8002b96:	e000      	b.n	8002b9a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0302 	and.w	r3, r3, #2
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d063      	beq.n	8002c6e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ba6:	4b4c      	ldr	r3, [pc, #304]	; (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	f003 030c 	and.w	r3, r3, #12
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d00b      	beq.n	8002bca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002bb2:	4b49      	ldr	r3, [pc, #292]	; (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f003 030c 	and.w	r3, r3, #12
 8002bba:	2b08      	cmp	r3, #8
 8002bbc:	d11c      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x18c>
 8002bbe:	4b46      	ldr	r3, [pc, #280]	; (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d116      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bca:	4b43      	ldr	r3, [pc, #268]	; (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0302 	and.w	r3, r3, #2
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d005      	beq.n	8002be2 <HAL_RCC_OscConfig+0x176>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	691b      	ldr	r3, [r3, #16]
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d001      	beq.n	8002be2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e1ba      	b.n	8002f58 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002be2:	493d      	ldr	r1, [pc, #244]	; (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002be4:	4b3c      	ldr	r3, [pc, #240]	; (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	695b      	ldr	r3, [r3, #20]
 8002bf0:	00db      	lsls	r3, r3, #3
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bf6:	e03a      	b.n	8002c6e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	691b      	ldr	r3, [r3, #16]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d020      	beq.n	8002c42 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c00:	4b36      	ldr	r3, [pc, #216]	; (8002cdc <HAL_RCC_OscConfig+0x270>)
 8002c02:	2201      	movs	r2, #1
 8002c04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c06:	f7fe f9c3 	bl	8000f90 <HAL_GetTick>
 8002c0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c0c:	e008      	b.n	8002c20 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c0e:	f7fe f9bf 	bl	8000f90 <HAL_GetTick>
 8002c12:	4602      	mov	r2, r0
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	2b02      	cmp	r3, #2
 8002c1a:	d901      	bls.n	8002c20 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002c1c:	2303      	movs	r3, #3
 8002c1e:	e19b      	b.n	8002f58 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c20:	4b2d      	ldr	r3, [pc, #180]	; (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 0302 	and.w	r3, r3, #2
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d0f0      	beq.n	8002c0e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c2c:	492a      	ldr	r1, [pc, #168]	; (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002c2e:	4b2a      	ldr	r3, [pc, #168]	; (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	695b      	ldr	r3, [r3, #20]
 8002c3a:	00db      	lsls	r3, r3, #3
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	600b      	str	r3, [r1, #0]
 8002c40:	e015      	b.n	8002c6e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c42:	4b26      	ldr	r3, [pc, #152]	; (8002cdc <HAL_RCC_OscConfig+0x270>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c48:	f7fe f9a2 	bl	8000f90 <HAL_GetTick>
 8002c4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c4e:	e008      	b.n	8002c62 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c50:	f7fe f99e 	bl	8000f90 <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d901      	bls.n	8002c62 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e17a      	b.n	8002f58 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c62:	4b1d      	ldr	r3, [pc, #116]	; (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0302 	and.w	r3, r3, #2
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d1f0      	bne.n	8002c50 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0308 	and.w	r3, r3, #8
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d03a      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	699b      	ldr	r3, [r3, #24]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d019      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c82:	4b17      	ldr	r3, [pc, #92]	; (8002ce0 <HAL_RCC_OscConfig+0x274>)
 8002c84:	2201      	movs	r2, #1
 8002c86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c88:	f7fe f982 	bl	8000f90 <HAL_GetTick>
 8002c8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c8e:	e008      	b.n	8002ca2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c90:	f7fe f97e 	bl	8000f90 <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d901      	bls.n	8002ca2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e15a      	b.n	8002f58 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ca2:	4b0d      	ldr	r3, [pc, #52]	; (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca6:	f003 0302 	and.w	r3, r3, #2
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d0f0      	beq.n	8002c90 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002cae:	2001      	movs	r0, #1
 8002cb0:	f000 fada 	bl	8003268 <RCC_Delay>
 8002cb4:	e01c      	b.n	8002cf0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cb6:	4b0a      	ldr	r3, [pc, #40]	; (8002ce0 <HAL_RCC_OscConfig+0x274>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cbc:	f7fe f968 	bl	8000f90 <HAL_GetTick>
 8002cc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cc2:	e00f      	b.n	8002ce4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cc4:	f7fe f964 	bl	8000f90 <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d908      	bls.n	8002ce4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e140      	b.n	8002f58 <HAL_RCC_OscConfig+0x4ec>
 8002cd6:	bf00      	nop
 8002cd8:	40021000 	.word	0x40021000
 8002cdc:	42420000 	.word	0x42420000
 8002ce0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ce4:	4b9e      	ldr	r3, [pc, #632]	; (8002f60 <HAL_RCC_OscConfig+0x4f4>)
 8002ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce8:	f003 0302 	and.w	r3, r3, #2
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d1e9      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0304 	and.w	r3, r3, #4
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	f000 80a6 	beq.w	8002e4a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d02:	4b97      	ldr	r3, [pc, #604]	; (8002f60 <HAL_RCC_OscConfig+0x4f4>)
 8002d04:	69db      	ldr	r3, [r3, #28]
 8002d06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d10d      	bne.n	8002d2a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d0e:	4a94      	ldr	r2, [pc, #592]	; (8002f60 <HAL_RCC_OscConfig+0x4f4>)
 8002d10:	4b93      	ldr	r3, [pc, #588]	; (8002f60 <HAL_RCC_OscConfig+0x4f4>)
 8002d12:	69db      	ldr	r3, [r3, #28]
 8002d14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d18:	61d3      	str	r3, [r2, #28]
 8002d1a:	4b91      	ldr	r3, [pc, #580]	; (8002f60 <HAL_RCC_OscConfig+0x4f4>)
 8002d1c:	69db      	ldr	r3, [r3, #28]
 8002d1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d22:	60bb      	str	r3, [r7, #8]
 8002d24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d26:	2301      	movs	r3, #1
 8002d28:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d2a:	4b8e      	ldr	r3, [pc, #568]	; (8002f64 <HAL_RCC_OscConfig+0x4f8>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d118      	bne.n	8002d68 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d36:	4a8b      	ldr	r2, [pc, #556]	; (8002f64 <HAL_RCC_OscConfig+0x4f8>)
 8002d38:	4b8a      	ldr	r3, [pc, #552]	; (8002f64 <HAL_RCC_OscConfig+0x4f8>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d42:	f7fe f925 	bl	8000f90 <HAL_GetTick>
 8002d46:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d48:	e008      	b.n	8002d5c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d4a:	f7fe f921 	bl	8000f90 <HAL_GetTick>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	2b64      	cmp	r3, #100	; 0x64
 8002d56:	d901      	bls.n	8002d5c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	e0fd      	b.n	8002f58 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d5c:	4b81      	ldr	r3, [pc, #516]	; (8002f64 <HAL_RCC_OscConfig+0x4f8>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d0f0      	beq.n	8002d4a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d106      	bne.n	8002d7e <HAL_RCC_OscConfig+0x312>
 8002d70:	4a7b      	ldr	r2, [pc, #492]	; (8002f60 <HAL_RCC_OscConfig+0x4f4>)
 8002d72:	4b7b      	ldr	r3, [pc, #492]	; (8002f60 <HAL_RCC_OscConfig+0x4f4>)
 8002d74:	6a1b      	ldr	r3, [r3, #32]
 8002d76:	f043 0301 	orr.w	r3, r3, #1
 8002d7a:	6213      	str	r3, [r2, #32]
 8002d7c:	e02d      	b.n	8002dda <HAL_RCC_OscConfig+0x36e>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d10c      	bne.n	8002da0 <HAL_RCC_OscConfig+0x334>
 8002d86:	4a76      	ldr	r2, [pc, #472]	; (8002f60 <HAL_RCC_OscConfig+0x4f4>)
 8002d88:	4b75      	ldr	r3, [pc, #468]	; (8002f60 <HAL_RCC_OscConfig+0x4f4>)
 8002d8a:	6a1b      	ldr	r3, [r3, #32]
 8002d8c:	f023 0301 	bic.w	r3, r3, #1
 8002d90:	6213      	str	r3, [r2, #32]
 8002d92:	4a73      	ldr	r2, [pc, #460]	; (8002f60 <HAL_RCC_OscConfig+0x4f4>)
 8002d94:	4b72      	ldr	r3, [pc, #456]	; (8002f60 <HAL_RCC_OscConfig+0x4f4>)
 8002d96:	6a1b      	ldr	r3, [r3, #32]
 8002d98:	f023 0304 	bic.w	r3, r3, #4
 8002d9c:	6213      	str	r3, [r2, #32]
 8002d9e:	e01c      	b.n	8002dda <HAL_RCC_OscConfig+0x36e>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	2b05      	cmp	r3, #5
 8002da6:	d10c      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x356>
 8002da8:	4a6d      	ldr	r2, [pc, #436]	; (8002f60 <HAL_RCC_OscConfig+0x4f4>)
 8002daa:	4b6d      	ldr	r3, [pc, #436]	; (8002f60 <HAL_RCC_OscConfig+0x4f4>)
 8002dac:	6a1b      	ldr	r3, [r3, #32]
 8002dae:	f043 0304 	orr.w	r3, r3, #4
 8002db2:	6213      	str	r3, [r2, #32]
 8002db4:	4a6a      	ldr	r2, [pc, #424]	; (8002f60 <HAL_RCC_OscConfig+0x4f4>)
 8002db6:	4b6a      	ldr	r3, [pc, #424]	; (8002f60 <HAL_RCC_OscConfig+0x4f4>)
 8002db8:	6a1b      	ldr	r3, [r3, #32]
 8002dba:	f043 0301 	orr.w	r3, r3, #1
 8002dbe:	6213      	str	r3, [r2, #32]
 8002dc0:	e00b      	b.n	8002dda <HAL_RCC_OscConfig+0x36e>
 8002dc2:	4a67      	ldr	r2, [pc, #412]	; (8002f60 <HAL_RCC_OscConfig+0x4f4>)
 8002dc4:	4b66      	ldr	r3, [pc, #408]	; (8002f60 <HAL_RCC_OscConfig+0x4f4>)
 8002dc6:	6a1b      	ldr	r3, [r3, #32]
 8002dc8:	f023 0301 	bic.w	r3, r3, #1
 8002dcc:	6213      	str	r3, [r2, #32]
 8002dce:	4a64      	ldr	r2, [pc, #400]	; (8002f60 <HAL_RCC_OscConfig+0x4f4>)
 8002dd0:	4b63      	ldr	r3, [pc, #396]	; (8002f60 <HAL_RCC_OscConfig+0x4f4>)
 8002dd2:	6a1b      	ldr	r3, [r3, #32]
 8002dd4:	f023 0304 	bic.w	r3, r3, #4
 8002dd8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	68db      	ldr	r3, [r3, #12]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d015      	beq.n	8002e0e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002de2:	f7fe f8d5 	bl	8000f90 <HAL_GetTick>
 8002de6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002de8:	e00a      	b.n	8002e00 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dea:	f7fe f8d1 	bl	8000f90 <HAL_GetTick>
 8002dee:	4602      	mov	r2, r0
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d901      	bls.n	8002e00 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	e0ab      	b.n	8002f58 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e00:	4b57      	ldr	r3, [pc, #348]	; (8002f60 <HAL_RCC_OscConfig+0x4f4>)
 8002e02:	6a1b      	ldr	r3, [r3, #32]
 8002e04:	f003 0302 	and.w	r3, r3, #2
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d0ee      	beq.n	8002dea <HAL_RCC_OscConfig+0x37e>
 8002e0c:	e014      	b.n	8002e38 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e0e:	f7fe f8bf 	bl	8000f90 <HAL_GetTick>
 8002e12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e14:	e00a      	b.n	8002e2c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e16:	f7fe f8bb 	bl	8000f90 <HAL_GetTick>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d901      	bls.n	8002e2c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e095      	b.n	8002f58 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e2c:	4b4c      	ldr	r3, [pc, #304]	; (8002f60 <HAL_RCC_OscConfig+0x4f4>)
 8002e2e:	6a1b      	ldr	r3, [r3, #32]
 8002e30:	f003 0302 	and.w	r3, r3, #2
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d1ee      	bne.n	8002e16 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002e38:	7dfb      	ldrb	r3, [r7, #23]
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d105      	bne.n	8002e4a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e3e:	4a48      	ldr	r2, [pc, #288]	; (8002f60 <HAL_RCC_OscConfig+0x4f4>)
 8002e40:	4b47      	ldr	r3, [pc, #284]	; (8002f60 <HAL_RCC_OscConfig+0x4f4>)
 8002e42:	69db      	ldr	r3, [r3, #28]
 8002e44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e48:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	69db      	ldr	r3, [r3, #28]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	f000 8081 	beq.w	8002f56 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e54:	4b42      	ldr	r3, [pc, #264]	; (8002f60 <HAL_RCC_OscConfig+0x4f4>)
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f003 030c 	and.w	r3, r3, #12
 8002e5c:	2b08      	cmp	r3, #8
 8002e5e:	d061      	beq.n	8002f24 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	69db      	ldr	r3, [r3, #28]
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	d146      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e68:	4b3f      	ldr	r3, [pc, #252]	; (8002f68 <HAL_RCC_OscConfig+0x4fc>)
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e6e:	f7fe f88f 	bl	8000f90 <HAL_GetTick>
 8002e72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e74:	e008      	b.n	8002e88 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e76:	f7fe f88b 	bl	8000f90 <HAL_GetTick>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d901      	bls.n	8002e88 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002e84:	2303      	movs	r3, #3
 8002e86:	e067      	b.n	8002f58 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e88:	4b35      	ldr	r3, [pc, #212]	; (8002f60 <HAL_RCC_OscConfig+0x4f4>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d1f0      	bne.n	8002e76 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6a1b      	ldr	r3, [r3, #32]
 8002e98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e9c:	d108      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002e9e:	4930      	ldr	r1, [pc, #192]	; (8002f60 <HAL_RCC_OscConfig+0x4f4>)
 8002ea0:	4b2f      	ldr	r3, [pc, #188]	; (8002f60 <HAL_RCC_OscConfig+0x4f4>)
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002eb0:	482b      	ldr	r0, [pc, #172]	; (8002f60 <HAL_RCC_OscConfig+0x4f4>)
 8002eb2:	4b2b      	ldr	r3, [pc, #172]	; (8002f60 <HAL_RCC_OscConfig+0x4f4>)
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6a19      	ldr	r1, [r3, #32]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec2:	430b      	orrs	r3, r1
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	6043      	str	r3, [r0, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ec8:	4b27      	ldr	r3, [pc, #156]	; (8002f68 <HAL_RCC_OscConfig+0x4fc>)
 8002eca:	2201      	movs	r2, #1
 8002ecc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ece:	f7fe f85f 	bl	8000f90 <HAL_GetTick>
 8002ed2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ed4:	e008      	b.n	8002ee8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ed6:	f7fe f85b 	bl	8000f90 <HAL_GetTick>
 8002eda:	4602      	mov	r2, r0
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	d901      	bls.n	8002ee8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	e037      	b.n	8002f58 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ee8:	4b1d      	ldr	r3, [pc, #116]	; (8002f60 <HAL_RCC_OscConfig+0x4f4>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d0f0      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x46a>
 8002ef4:	e02f      	b.n	8002f56 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ef6:	4b1c      	ldr	r3, [pc, #112]	; (8002f68 <HAL_RCC_OscConfig+0x4fc>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002efc:	f7fe f848 	bl	8000f90 <HAL_GetTick>
 8002f00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f02:	e008      	b.n	8002f16 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f04:	f7fe f844 	bl	8000f90 <HAL_GetTick>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d901      	bls.n	8002f16 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	e020      	b.n	8002f58 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f16:	4b12      	ldr	r3, [pc, #72]	; (8002f60 <HAL_RCC_OscConfig+0x4f4>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d1f0      	bne.n	8002f04 <HAL_RCC_OscConfig+0x498>
 8002f22:	e018      	b.n	8002f56 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	69db      	ldr	r3, [r3, #28]
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d101      	bne.n	8002f30 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e013      	b.n	8002f58 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f30:	4b0b      	ldr	r3, [pc, #44]	; (8002f60 <HAL_RCC_OscConfig+0x4f4>)
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6a1b      	ldr	r3, [r3, #32]
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d106      	bne.n	8002f52 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d001      	beq.n	8002f56 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e000      	b.n	8002f58 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002f56:	2300      	movs	r3, #0
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3718      	adds	r7, #24
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	40021000 	.word	0x40021000
 8002f64:	40007000 	.word	0x40007000
 8002f68:	42420060 	.word	0x42420060

08002f6c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b084      	sub	sp, #16
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d101      	bne.n	8002f80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e0d0      	b.n	8003122 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f80:	4b6a      	ldr	r3, [pc, #424]	; (800312c <HAL_RCC_ClockConfig+0x1c0>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0207 	and.w	r2, r3, #7
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d210      	bcs.n	8002fb0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f8e:	4967      	ldr	r1, [pc, #412]	; (800312c <HAL_RCC_ClockConfig+0x1c0>)
 8002f90:	4b66      	ldr	r3, [pc, #408]	; (800312c <HAL_RCC_ClockConfig+0x1c0>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f023 0207 	bic.w	r2, r3, #7
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f9e:	4b63      	ldr	r3, [pc, #396]	; (800312c <HAL_RCC_ClockConfig+0x1c0>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0207 	and.w	r2, r3, #7
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d001      	beq.n	8002fb0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e0b8      	b.n	8003122 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0302 	and.w	r3, r3, #2
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d020      	beq.n	8002ffe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0304 	and.w	r3, r3, #4
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d005      	beq.n	8002fd4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fc8:	4a59      	ldr	r2, [pc, #356]	; (8003130 <HAL_RCC_ClockConfig+0x1c4>)
 8002fca:	4b59      	ldr	r3, [pc, #356]	; (8003130 <HAL_RCC_ClockConfig+0x1c4>)
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002fd2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0308 	and.w	r3, r3, #8
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d005      	beq.n	8002fec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fe0:	4a53      	ldr	r2, [pc, #332]	; (8003130 <HAL_RCC_ClockConfig+0x1c4>)
 8002fe2:	4b53      	ldr	r3, [pc, #332]	; (8003130 <HAL_RCC_ClockConfig+0x1c4>)
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002fea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fec:	4950      	ldr	r1, [pc, #320]	; (8003130 <HAL_RCC_ClockConfig+0x1c4>)
 8002fee:	4b50      	ldr	r3, [pc, #320]	; (8003130 <HAL_RCC_ClockConfig+0x1c4>)
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 0301 	and.w	r3, r3, #1
 8003006:	2b00      	cmp	r3, #0
 8003008:	d040      	beq.n	800308c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	2b01      	cmp	r3, #1
 8003010:	d107      	bne.n	8003022 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003012:	4b47      	ldr	r3, [pc, #284]	; (8003130 <HAL_RCC_ClockConfig+0x1c4>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d115      	bne.n	800304a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e07f      	b.n	8003122 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	2b02      	cmp	r3, #2
 8003028:	d107      	bne.n	800303a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800302a:	4b41      	ldr	r3, [pc, #260]	; (8003130 <HAL_RCC_ClockConfig+0x1c4>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d109      	bne.n	800304a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e073      	b.n	8003122 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800303a:	4b3d      	ldr	r3, [pc, #244]	; (8003130 <HAL_RCC_ClockConfig+0x1c4>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0302 	and.w	r3, r3, #2
 8003042:	2b00      	cmp	r3, #0
 8003044:	d101      	bne.n	800304a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e06b      	b.n	8003122 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800304a:	4939      	ldr	r1, [pc, #228]	; (8003130 <HAL_RCC_ClockConfig+0x1c4>)
 800304c:	4b38      	ldr	r3, [pc, #224]	; (8003130 <HAL_RCC_ClockConfig+0x1c4>)
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	f023 0203 	bic.w	r2, r3, #3
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	4313      	orrs	r3, r2
 800305a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800305c:	f7fd ff98 	bl	8000f90 <HAL_GetTick>
 8003060:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003062:	e00a      	b.n	800307a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003064:	f7fd ff94 	bl	8000f90 <HAL_GetTick>
 8003068:	4602      	mov	r2, r0
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003072:	4293      	cmp	r3, r2
 8003074:	d901      	bls.n	800307a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	e053      	b.n	8003122 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800307a:	4b2d      	ldr	r3, [pc, #180]	; (8003130 <HAL_RCC_ClockConfig+0x1c4>)
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	f003 020c 	and.w	r2, r3, #12
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	429a      	cmp	r2, r3
 800308a:	d1eb      	bne.n	8003064 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800308c:	4b27      	ldr	r3, [pc, #156]	; (800312c <HAL_RCC_ClockConfig+0x1c0>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 0207 	and.w	r2, r3, #7
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	429a      	cmp	r2, r3
 8003098:	d910      	bls.n	80030bc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800309a:	4924      	ldr	r1, [pc, #144]	; (800312c <HAL_RCC_ClockConfig+0x1c0>)
 800309c:	4b23      	ldr	r3, [pc, #140]	; (800312c <HAL_RCC_ClockConfig+0x1c0>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f023 0207 	bic.w	r2, r3, #7
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030aa:	4b20      	ldr	r3, [pc, #128]	; (800312c <HAL_RCC_ClockConfig+0x1c0>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 0207 	and.w	r2, r3, #7
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d001      	beq.n	80030bc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e032      	b.n	8003122 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0304 	and.w	r3, r3, #4
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d008      	beq.n	80030da <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030c8:	4919      	ldr	r1, [pc, #100]	; (8003130 <HAL_RCC_ClockConfig+0x1c4>)
 80030ca:	4b19      	ldr	r3, [pc, #100]	; (8003130 <HAL_RCC_ClockConfig+0x1c4>)
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	68db      	ldr	r3, [r3, #12]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 0308 	and.w	r3, r3, #8
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d009      	beq.n	80030fa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80030e6:	4912      	ldr	r1, [pc, #72]	; (8003130 <HAL_RCC_ClockConfig+0x1c4>)
 80030e8:	4b11      	ldr	r3, [pc, #68]	; (8003130 <HAL_RCC_ClockConfig+0x1c4>)
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	691b      	ldr	r3, [r3, #16]
 80030f4:	00db      	lsls	r3, r3, #3
 80030f6:	4313      	orrs	r3, r2
 80030f8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80030fa:	f000 f821 	bl	8003140 <HAL_RCC_GetSysClockFreq>
 80030fe:	4601      	mov	r1, r0
 8003100:	4b0b      	ldr	r3, [pc, #44]	; (8003130 <HAL_RCC_ClockConfig+0x1c4>)
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	091b      	lsrs	r3, r3, #4
 8003106:	f003 030f 	and.w	r3, r3, #15
 800310a:	4a0a      	ldr	r2, [pc, #40]	; (8003134 <HAL_RCC_ClockConfig+0x1c8>)
 800310c:	5cd3      	ldrb	r3, [r2, r3]
 800310e:	fa21 f303 	lsr.w	r3, r1, r3
 8003112:	4a09      	ldr	r2, [pc, #36]	; (8003138 <HAL_RCC_ClockConfig+0x1cc>)
 8003114:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003116:	4b09      	ldr	r3, [pc, #36]	; (800313c <HAL_RCC_ClockConfig+0x1d0>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4618      	mov	r0, r3
 800311c:	f7fd fef6 	bl	8000f0c <HAL_InitTick>

  return HAL_OK;
 8003120:	2300      	movs	r3, #0
}
 8003122:	4618      	mov	r0, r3
 8003124:	3710      	adds	r7, #16
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	40022000 	.word	0x40022000
 8003130:	40021000 	.word	0x40021000
 8003134:	08003de0 	.word	0x08003de0
 8003138:	20000000 	.word	0x20000000
 800313c:	20000004 	.word	0x20000004

08003140 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003140:	b490      	push	{r4, r7}
 8003142:	b08a      	sub	sp, #40	; 0x28
 8003144:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003146:	4b2a      	ldr	r3, [pc, #168]	; (80031f0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003148:	1d3c      	adds	r4, r7, #4
 800314a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800314c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003150:	4b28      	ldr	r3, [pc, #160]	; (80031f4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003152:	881b      	ldrh	r3, [r3, #0]
 8003154:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003156:	2300      	movs	r3, #0
 8003158:	61fb      	str	r3, [r7, #28]
 800315a:	2300      	movs	r3, #0
 800315c:	61bb      	str	r3, [r7, #24]
 800315e:	2300      	movs	r3, #0
 8003160:	627b      	str	r3, [r7, #36]	; 0x24
 8003162:	2300      	movs	r3, #0
 8003164:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003166:	2300      	movs	r3, #0
 8003168:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800316a:	4b23      	ldr	r3, [pc, #140]	; (80031f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	f003 030c 	and.w	r3, r3, #12
 8003176:	2b04      	cmp	r3, #4
 8003178:	d002      	beq.n	8003180 <HAL_RCC_GetSysClockFreq+0x40>
 800317a:	2b08      	cmp	r3, #8
 800317c:	d003      	beq.n	8003186 <HAL_RCC_GetSysClockFreq+0x46>
 800317e:	e02d      	b.n	80031dc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003180:	4b1e      	ldr	r3, [pc, #120]	; (80031fc <HAL_RCC_GetSysClockFreq+0xbc>)
 8003182:	623b      	str	r3, [r7, #32]
      break;
 8003184:	e02d      	b.n	80031e2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	0c9b      	lsrs	r3, r3, #18
 800318a:	f003 030f 	and.w	r3, r3, #15
 800318e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003192:	4413      	add	r3, r2
 8003194:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003198:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d013      	beq.n	80031cc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80031a4:	4b14      	ldr	r3, [pc, #80]	; (80031f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	0c5b      	lsrs	r3, r3, #17
 80031aa:	f003 0301 	and.w	r3, r3, #1
 80031ae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80031b2:	4413      	add	r3, r2
 80031b4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80031b8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	4a0f      	ldr	r2, [pc, #60]	; (80031fc <HAL_RCC_GetSysClockFreq+0xbc>)
 80031be:	fb02 f203 	mul.w	r2, r2, r3
 80031c2:	69bb      	ldr	r3, [r7, #24]
 80031c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80031c8:	627b      	str	r3, [r7, #36]	; 0x24
 80031ca:	e004      	b.n	80031d6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	4a0c      	ldr	r2, [pc, #48]	; (8003200 <HAL_RCC_GetSysClockFreq+0xc0>)
 80031d0:	fb02 f303 	mul.w	r3, r2, r3
 80031d4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80031d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d8:	623b      	str	r3, [r7, #32]
      break;
 80031da:	e002      	b.n	80031e2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80031dc:	4b07      	ldr	r3, [pc, #28]	; (80031fc <HAL_RCC_GetSysClockFreq+0xbc>)
 80031de:	623b      	str	r3, [r7, #32]
      break;
 80031e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031e2:	6a3b      	ldr	r3, [r7, #32]
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3728      	adds	r7, #40	; 0x28
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bc90      	pop	{r4, r7}
 80031ec:	4770      	bx	lr
 80031ee:	bf00      	nop
 80031f0:	08003dcc 	.word	0x08003dcc
 80031f4:	08003ddc 	.word	0x08003ddc
 80031f8:	40021000 	.word	0x40021000
 80031fc:	007a1200 	.word	0x007a1200
 8003200:	003d0900 	.word	0x003d0900

08003204 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003204:	b480      	push	{r7}
 8003206:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003208:	4b02      	ldr	r3, [pc, #8]	; (8003214 <HAL_RCC_GetHCLKFreq+0x10>)
 800320a:	681b      	ldr	r3, [r3, #0]
}
 800320c:	4618      	mov	r0, r3
 800320e:	46bd      	mov	sp, r7
 8003210:	bc80      	pop	{r7}
 8003212:	4770      	bx	lr
 8003214:	20000000 	.word	0x20000000

08003218 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800321c:	f7ff fff2 	bl	8003204 <HAL_RCC_GetHCLKFreq>
 8003220:	4601      	mov	r1, r0
 8003222:	4b05      	ldr	r3, [pc, #20]	; (8003238 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	0a1b      	lsrs	r3, r3, #8
 8003228:	f003 0307 	and.w	r3, r3, #7
 800322c:	4a03      	ldr	r2, [pc, #12]	; (800323c <HAL_RCC_GetPCLK1Freq+0x24>)
 800322e:	5cd3      	ldrb	r3, [r2, r3]
 8003230:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003234:	4618      	mov	r0, r3
 8003236:	bd80      	pop	{r7, pc}
 8003238:	40021000 	.word	0x40021000
 800323c:	08003df0 	.word	0x08003df0

08003240 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003244:	f7ff ffde 	bl	8003204 <HAL_RCC_GetHCLKFreq>
 8003248:	4601      	mov	r1, r0
 800324a:	4b05      	ldr	r3, [pc, #20]	; (8003260 <HAL_RCC_GetPCLK2Freq+0x20>)
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	0adb      	lsrs	r3, r3, #11
 8003250:	f003 0307 	and.w	r3, r3, #7
 8003254:	4a03      	ldr	r2, [pc, #12]	; (8003264 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003256:	5cd3      	ldrb	r3, [r2, r3]
 8003258:	fa21 f303 	lsr.w	r3, r1, r3
}
 800325c:	4618      	mov	r0, r3
 800325e:	bd80      	pop	{r7, pc}
 8003260:	40021000 	.word	0x40021000
 8003264:	08003df0 	.word	0x08003df0

08003268 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003268:	b480      	push	{r7}
 800326a:	b085      	sub	sp, #20
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003270:	4b0a      	ldr	r3, [pc, #40]	; (800329c <RCC_Delay+0x34>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a0a      	ldr	r2, [pc, #40]	; (80032a0 <RCC_Delay+0x38>)
 8003276:	fba2 2303 	umull	r2, r3, r2, r3
 800327a:	0a5b      	lsrs	r3, r3, #9
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	fb02 f303 	mul.w	r3, r2, r3
 8003282:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003284:	bf00      	nop
  }
  while (Delay --);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	1e5a      	subs	r2, r3, #1
 800328a:	60fa      	str	r2, [r7, #12]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d1f9      	bne.n	8003284 <RCC_Delay+0x1c>
}
 8003290:	bf00      	nop
 8003292:	3714      	adds	r7, #20
 8003294:	46bd      	mov	sp, r7
 8003296:	bc80      	pop	{r7}
 8003298:	4770      	bx	lr
 800329a:	bf00      	nop
 800329c:	20000000 	.word	0x20000000
 80032a0:	10624dd3 	.word	0x10624dd3

080032a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b082      	sub	sp, #8
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d101      	bne.n	80032b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e03f      	b.n	8003336 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d106      	bne.n	80032d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f7fd fd62 	bl	8000d94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2224      	movs	r2, #36	; 0x24
 80032d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	6812      	ldr	r2, [r2, #0]
 80032e0:	68d2      	ldr	r2, [r2, #12]
 80032e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80032e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f000 f829 	bl	8003340 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	6812      	ldr	r2, [r2, #0]
 80032f6:	6912      	ldr	r2, [r2, #16]
 80032f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80032fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	6812      	ldr	r2, [r2, #0]
 8003306:	6952      	ldr	r2, [r2, #20]
 8003308:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800330c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	6812      	ldr	r2, [r2, #0]
 8003316:	68d2      	ldr	r2, [r2, #12]
 8003318:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800331c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2220      	movs	r2, #32
 8003328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2220      	movs	r2, #32
 8003330:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003334:	2300      	movs	r3, #0
}
 8003336:	4618      	mov	r0, r3
 8003338:	3708      	adds	r7, #8
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
	...

08003340 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003340:	b590      	push	{r4, r7, lr}
 8003342:	b085      	sub	sp, #20
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	6812      	ldr	r2, [r2, #0]
 8003350:	6912      	ldr	r2, [r2, #16]
 8003352:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	68d2      	ldr	r2, [r2, #12]
 800335a:	430a      	orrs	r2, r1
 800335c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	689a      	ldr	r2, [r3, #8]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	691b      	ldr	r3, [r3, #16]
 8003366:	431a      	orrs	r2, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	695b      	ldr	r3, [r3, #20]
 800336c:	4313      	orrs	r3, r2
 800336e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800337e:	f023 030c 	bic.w	r3, r3, #12
 8003382:	68b9      	ldr	r1, [r7, #8]
 8003384:	430b      	orrs	r3, r1
 8003386:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	687a      	ldr	r2, [r7, #4]
 800338e:	6812      	ldr	r2, [r2, #0]
 8003390:	6952      	ldr	r2, [r2, #20]
 8003392:	f422 7140 	bic.w	r1, r2, #768	; 0x300
 8003396:	687a      	ldr	r2, [r7, #4]
 8003398:	6992      	ldr	r2, [r2, #24]
 800339a:	430a      	orrs	r2, r1
 800339c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a2c      	ldr	r2, [pc, #176]	; (8003454 <UART_SetConfig+0x114>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d103      	bne.n	80033b0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80033a8:	f7ff ff4a 	bl	8003240 <HAL_RCC_GetPCLK2Freq>
 80033ac:	60f8      	str	r0, [r7, #12]
 80033ae:	e002      	b.n	80033b6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80033b0:	f7ff ff32 	bl	8003218 <HAL_RCC_GetPCLK1Freq>
 80033b4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6819      	ldr	r1, [r3, #0]
 80033ba:	68fa      	ldr	r2, [r7, #12]
 80033bc:	4613      	mov	r3, r2
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	4413      	add	r3, r2
 80033c2:	009a      	lsls	r2, r3, #2
 80033c4:	441a      	add	r2, r3
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80033d0:	4a21      	ldr	r2, [pc, #132]	; (8003458 <UART_SetConfig+0x118>)
 80033d2:	fba2 2303 	umull	r2, r3, r2, r3
 80033d6:	095b      	lsrs	r3, r3, #5
 80033d8:	0118      	lsls	r0, r3, #4
 80033da:	68fa      	ldr	r2, [r7, #12]
 80033dc:	4613      	mov	r3, r2
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	4413      	add	r3, r2
 80033e2:	009a      	lsls	r2, r3, #2
 80033e4:	441a      	add	r2, r3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80033f0:	4b19      	ldr	r3, [pc, #100]	; (8003458 <UART_SetConfig+0x118>)
 80033f2:	fba3 4302 	umull	r4, r3, r3, r2
 80033f6:	095b      	lsrs	r3, r3, #5
 80033f8:	2464      	movs	r4, #100	; 0x64
 80033fa:	fb04 f303 	mul.w	r3, r4, r3
 80033fe:	1ad3      	subs	r3, r2, r3
 8003400:	011b      	lsls	r3, r3, #4
 8003402:	3332      	adds	r3, #50	; 0x32
 8003404:	4a14      	ldr	r2, [pc, #80]	; (8003458 <UART_SetConfig+0x118>)
 8003406:	fba2 2303 	umull	r2, r3, r2, r3
 800340a:	095b      	lsrs	r3, r3, #5
 800340c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003410:	4418      	add	r0, r3
 8003412:	68fa      	ldr	r2, [r7, #12]
 8003414:	4613      	mov	r3, r2
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	4413      	add	r3, r2
 800341a:	009a      	lsls	r2, r3, #2
 800341c:	441a      	add	r2, r3
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	fbb2 f2f3 	udiv	r2, r2, r3
 8003428:	4b0b      	ldr	r3, [pc, #44]	; (8003458 <UART_SetConfig+0x118>)
 800342a:	fba3 4302 	umull	r4, r3, r3, r2
 800342e:	095b      	lsrs	r3, r3, #5
 8003430:	2464      	movs	r4, #100	; 0x64
 8003432:	fb04 f303 	mul.w	r3, r4, r3
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	011b      	lsls	r3, r3, #4
 800343a:	3332      	adds	r3, #50	; 0x32
 800343c:	4a06      	ldr	r2, [pc, #24]	; (8003458 <UART_SetConfig+0x118>)
 800343e:	fba2 2303 	umull	r2, r3, r2, r3
 8003442:	095b      	lsrs	r3, r3, #5
 8003444:	f003 030f 	and.w	r3, r3, #15
 8003448:	4403      	add	r3, r0
 800344a:	608b      	str	r3, [r1, #8]
#endif /* USART_CR1_OVER8 */
}
 800344c:	bf00      	nop
 800344e:	3714      	adds	r7, #20
 8003450:	46bd      	mov	sp, r7
 8003452:	bd90      	pop	{r4, r7, pc}
 8003454:	40013800 	.word	0x40013800
 8003458:	51eb851f 	.word	0x51eb851f

0800345c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800345c:	480c      	ldr	r0, [pc, #48]	; (8003490 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800345e:	490d      	ldr	r1, [pc, #52]	; (8003494 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003460:	4a0d      	ldr	r2, [pc, #52]	; (8003498 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003462:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003464:	e002      	b.n	800346c <LoopCopyDataInit>

08003466 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003466:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003468:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800346a:	3304      	adds	r3, #4

0800346c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800346c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800346e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003470:	d3f9      	bcc.n	8003466 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003472:	4a0a      	ldr	r2, [pc, #40]	; (800349c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003474:	4c0a      	ldr	r4, [pc, #40]	; (80034a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003476:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003478:	e001      	b.n	800347e <LoopFillZerobss>

0800347a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800347a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800347c:	3204      	adds	r2, #4

0800347e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800347e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003480:	d3fb      	bcc.n	800347a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003482:	f7fd fd27 	bl	8000ed4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003486:	f000 f815 	bl	80034b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800348a:	f7fd fa6f 	bl	800096c <main>
  bx lr
 800348e:	4770      	bx	lr
  ldr r0, =_sdata
 8003490:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003494:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8003498:	08003e34 	.word	0x08003e34
  ldr r2, =_sbss
 800349c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80034a0:	20000150 	.word	0x20000150

080034a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80034a4:	e7fe      	b.n	80034a4 <ADC1_2_IRQHandler>
	...

080034a8 <__errno>:
 80034a8:	4b01      	ldr	r3, [pc, #4]	; (80034b0 <__errno+0x8>)
 80034aa:	6818      	ldr	r0, [r3, #0]
 80034ac:	4770      	bx	lr
 80034ae:	bf00      	nop
 80034b0:	2000000c 	.word	0x2000000c

080034b4 <__libc_init_array>:
 80034b4:	b570      	push	{r4, r5, r6, lr}
 80034b6:	2500      	movs	r5, #0
 80034b8:	4e0c      	ldr	r6, [pc, #48]	; (80034ec <__libc_init_array+0x38>)
 80034ba:	4c0d      	ldr	r4, [pc, #52]	; (80034f0 <__libc_init_array+0x3c>)
 80034bc:	1ba4      	subs	r4, r4, r6
 80034be:	10a4      	asrs	r4, r4, #2
 80034c0:	42a5      	cmp	r5, r4
 80034c2:	d109      	bne.n	80034d8 <__libc_init_array+0x24>
 80034c4:	f000 fc4e 	bl	8003d64 <_init>
 80034c8:	2500      	movs	r5, #0
 80034ca:	4e0a      	ldr	r6, [pc, #40]	; (80034f4 <__libc_init_array+0x40>)
 80034cc:	4c0a      	ldr	r4, [pc, #40]	; (80034f8 <__libc_init_array+0x44>)
 80034ce:	1ba4      	subs	r4, r4, r6
 80034d0:	10a4      	asrs	r4, r4, #2
 80034d2:	42a5      	cmp	r5, r4
 80034d4:	d105      	bne.n	80034e2 <__libc_init_array+0x2e>
 80034d6:	bd70      	pop	{r4, r5, r6, pc}
 80034d8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80034dc:	4798      	blx	r3
 80034de:	3501      	adds	r5, #1
 80034e0:	e7ee      	b.n	80034c0 <__libc_init_array+0xc>
 80034e2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80034e6:	4798      	blx	r3
 80034e8:	3501      	adds	r5, #1
 80034ea:	e7f2      	b.n	80034d2 <__libc_init_array+0x1e>
 80034ec:	08003e2c 	.word	0x08003e2c
 80034f0:	08003e2c 	.word	0x08003e2c
 80034f4:	08003e2c 	.word	0x08003e2c
 80034f8:	08003e30 	.word	0x08003e30

080034fc <memset>:
 80034fc:	4603      	mov	r3, r0
 80034fe:	4402      	add	r2, r0
 8003500:	4293      	cmp	r3, r2
 8003502:	d100      	bne.n	8003506 <memset+0xa>
 8003504:	4770      	bx	lr
 8003506:	f803 1b01 	strb.w	r1, [r3], #1
 800350a:	e7f9      	b.n	8003500 <memset+0x4>

0800350c <siprintf>:
 800350c:	b40e      	push	{r1, r2, r3}
 800350e:	f44f 7102 	mov.w	r1, #520	; 0x208
 8003512:	b500      	push	{lr}
 8003514:	b09c      	sub	sp, #112	; 0x70
 8003516:	f8ad 1014 	strh.w	r1, [sp, #20]
 800351a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800351e:	9104      	str	r1, [sp, #16]
 8003520:	9107      	str	r1, [sp, #28]
 8003522:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003526:	ab1d      	add	r3, sp, #116	; 0x74
 8003528:	9002      	str	r0, [sp, #8]
 800352a:	9006      	str	r0, [sp, #24]
 800352c:	4808      	ldr	r0, [pc, #32]	; (8003550 <siprintf+0x44>)
 800352e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003532:	f8ad 1016 	strh.w	r1, [sp, #22]
 8003536:	6800      	ldr	r0, [r0, #0]
 8003538:	a902      	add	r1, sp, #8
 800353a:	9301      	str	r3, [sp, #4]
 800353c:	f000 f866 	bl	800360c <_svfiprintf_r>
 8003540:	2200      	movs	r2, #0
 8003542:	9b02      	ldr	r3, [sp, #8]
 8003544:	701a      	strb	r2, [r3, #0]
 8003546:	b01c      	add	sp, #112	; 0x70
 8003548:	f85d eb04 	ldr.w	lr, [sp], #4
 800354c:	b003      	add	sp, #12
 800354e:	4770      	bx	lr
 8003550:	2000000c 	.word	0x2000000c

08003554 <__ssputs_r>:
 8003554:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003558:	688e      	ldr	r6, [r1, #8]
 800355a:	4682      	mov	sl, r0
 800355c:	429e      	cmp	r6, r3
 800355e:	460c      	mov	r4, r1
 8003560:	4691      	mov	r9, r2
 8003562:	4698      	mov	r8, r3
 8003564:	d835      	bhi.n	80035d2 <__ssputs_r+0x7e>
 8003566:	898a      	ldrh	r2, [r1, #12]
 8003568:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800356c:	d031      	beq.n	80035d2 <__ssputs_r+0x7e>
 800356e:	2302      	movs	r3, #2
 8003570:	6825      	ldr	r5, [r4, #0]
 8003572:	6909      	ldr	r1, [r1, #16]
 8003574:	1a6f      	subs	r7, r5, r1
 8003576:	6965      	ldr	r5, [r4, #20]
 8003578:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800357c:	fb95 f5f3 	sdiv	r5, r5, r3
 8003580:	f108 0301 	add.w	r3, r8, #1
 8003584:	443b      	add	r3, r7
 8003586:	429d      	cmp	r5, r3
 8003588:	bf38      	it	cc
 800358a:	461d      	movcc	r5, r3
 800358c:	0553      	lsls	r3, r2, #21
 800358e:	d531      	bpl.n	80035f4 <__ssputs_r+0xa0>
 8003590:	4629      	mov	r1, r5
 8003592:	f000 fb47 	bl	8003c24 <_malloc_r>
 8003596:	4606      	mov	r6, r0
 8003598:	b950      	cbnz	r0, 80035b0 <__ssputs_r+0x5c>
 800359a:	230c      	movs	r3, #12
 800359c:	f8ca 3000 	str.w	r3, [sl]
 80035a0:	89a3      	ldrh	r3, [r4, #12]
 80035a2:	f04f 30ff 	mov.w	r0, #4294967295
 80035a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035aa:	81a3      	strh	r3, [r4, #12]
 80035ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035b0:	463a      	mov	r2, r7
 80035b2:	6921      	ldr	r1, [r4, #16]
 80035b4:	f000 fac4 	bl	8003b40 <memcpy>
 80035b8:	89a3      	ldrh	r3, [r4, #12]
 80035ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80035be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035c2:	81a3      	strh	r3, [r4, #12]
 80035c4:	6126      	str	r6, [r4, #16]
 80035c6:	443e      	add	r6, r7
 80035c8:	6026      	str	r6, [r4, #0]
 80035ca:	4646      	mov	r6, r8
 80035cc:	6165      	str	r5, [r4, #20]
 80035ce:	1bed      	subs	r5, r5, r7
 80035d0:	60a5      	str	r5, [r4, #8]
 80035d2:	4546      	cmp	r6, r8
 80035d4:	bf28      	it	cs
 80035d6:	4646      	movcs	r6, r8
 80035d8:	4649      	mov	r1, r9
 80035da:	4632      	mov	r2, r6
 80035dc:	6820      	ldr	r0, [r4, #0]
 80035de:	f000 faba 	bl	8003b56 <memmove>
 80035e2:	68a3      	ldr	r3, [r4, #8]
 80035e4:	2000      	movs	r0, #0
 80035e6:	1b9b      	subs	r3, r3, r6
 80035e8:	60a3      	str	r3, [r4, #8]
 80035ea:	6823      	ldr	r3, [r4, #0]
 80035ec:	441e      	add	r6, r3
 80035ee:	6026      	str	r6, [r4, #0]
 80035f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035f4:	462a      	mov	r2, r5
 80035f6:	f000 fb73 	bl	8003ce0 <_realloc_r>
 80035fa:	4606      	mov	r6, r0
 80035fc:	2800      	cmp	r0, #0
 80035fe:	d1e1      	bne.n	80035c4 <__ssputs_r+0x70>
 8003600:	6921      	ldr	r1, [r4, #16]
 8003602:	4650      	mov	r0, sl
 8003604:	f000 fac2 	bl	8003b8c <_free_r>
 8003608:	e7c7      	b.n	800359a <__ssputs_r+0x46>
	...

0800360c <_svfiprintf_r>:
 800360c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003610:	b09d      	sub	sp, #116	; 0x74
 8003612:	9303      	str	r3, [sp, #12]
 8003614:	898b      	ldrh	r3, [r1, #12]
 8003616:	4680      	mov	r8, r0
 8003618:	061c      	lsls	r4, r3, #24
 800361a:	460d      	mov	r5, r1
 800361c:	4616      	mov	r6, r2
 800361e:	d50f      	bpl.n	8003640 <_svfiprintf_r+0x34>
 8003620:	690b      	ldr	r3, [r1, #16]
 8003622:	b96b      	cbnz	r3, 8003640 <_svfiprintf_r+0x34>
 8003624:	2140      	movs	r1, #64	; 0x40
 8003626:	f000 fafd 	bl	8003c24 <_malloc_r>
 800362a:	6028      	str	r0, [r5, #0]
 800362c:	6128      	str	r0, [r5, #16]
 800362e:	b928      	cbnz	r0, 800363c <_svfiprintf_r+0x30>
 8003630:	230c      	movs	r3, #12
 8003632:	f8c8 3000 	str.w	r3, [r8]
 8003636:	f04f 30ff 	mov.w	r0, #4294967295
 800363a:	e0c4      	b.n	80037c6 <_svfiprintf_r+0x1ba>
 800363c:	2340      	movs	r3, #64	; 0x40
 800363e:	616b      	str	r3, [r5, #20]
 8003640:	2300      	movs	r3, #0
 8003642:	9309      	str	r3, [sp, #36]	; 0x24
 8003644:	2320      	movs	r3, #32
 8003646:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800364a:	2330      	movs	r3, #48	; 0x30
 800364c:	f04f 0b01 	mov.w	fp, #1
 8003650:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003654:	4637      	mov	r7, r6
 8003656:	463c      	mov	r4, r7
 8003658:	f814 3b01 	ldrb.w	r3, [r4], #1
 800365c:	2b00      	cmp	r3, #0
 800365e:	d13c      	bne.n	80036da <_svfiprintf_r+0xce>
 8003660:	ebb7 0a06 	subs.w	sl, r7, r6
 8003664:	d00b      	beq.n	800367e <_svfiprintf_r+0x72>
 8003666:	4653      	mov	r3, sl
 8003668:	4632      	mov	r2, r6
 800366a:	4629      	mov	r1, r5
 800366c:	4640      	mov	r0, r8
 800366e:	f7ff ff71 	bl	8003554 <__ssputs_r>
 8003672:	3001      	adds	r0, #1
 8003674:	f000 80a2 	beq.w	80037bc <_svfiprintf_r+0x1b0>
 8003678:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800367a:	4453      	add	r3, sl
 800367c:	9309      	str	r3, [sp, #36]	; 0x24
 800367e:	783b      	ldrb	r3, [r7, #0]
 8003680:	2b00      	cmp	r3, #0
 8003682:	f000 809b 	beq.w	80037bc <_svfiprintf_r+0x1b0>
 8003686:	2300      	movs	r3, #0
 8003688:	f04f 32ff 	mov.w	r2, #4294967295
 800368c:	9304      	str	r3, [sp, #16]
 800368e:	9307      	str	r3, [sp, #28]
 8003690:	9205      	str	r2, [sp, #20]
 8003692:	9306      	str	r3, [sp, #24]
 8003694:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003698:	931a      	str	r3, [sp, #104]	; 0x68
 800369a:	2205      	movs	r2, #5
 800369c:	7821      	ldrb	r1, [r4, #0]
 800369e:	4850      	ldr	r0, [pc, #320]	; (80037e0 <_svfiprintf_r+0x1d4>)
 80036a0:	f000 fa40 	bl	8003b24 <memchr>
 80036a4:	1c67      	adds	r7, r4, #1
 80036a6:	9b04      	ldr	r3, [sp, #16]
 80036a8:	b9d8      	cbnz	r0, 80036e2 <_svfiprintf_r+0xd6>
 80036aa:	06d9      	lsls	r1, r3, #27
 80036ac:	bf44      	itt	mi
 80036ae:	2220      	movmi	r2, #32
 80036b0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80036b4:	071a      	lsls	r2, r3, #28
 80036b6:	bf44      	itt	mi
 80036b8:	222b      	movmi	r2, #43	; 0x2b
 80036ba:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80036be:	7822      	ldrb	r2, [r4, #0]
 80036c0:	2a2a      	cmp	r2, #42	; 0x2a
 80036c2:	d016      	beq.n	80036f2 <_svfiprintf_r+0xe6>
 80036c4:	2100      	movs	r1, #0
 80036c6:	200a      	movs	r0, #10
 80036c8:	9a07      	ldr	r2, [sp, #28]
 80036ca:	4627      	mov	r7, r4
 80036cc:	783b      	ldrb	r3, [r7, #0]
 80036ce:	3401      	adds	r4, #1
 80036d0:	3b30      	subs	r3, #48	; 0x30
 80036d2:	2b09      	cmp	r3, #9
 80036d4:	d950      	bls.n	8003778 <_svfiprintf_r+0x16c>
 80036d6:	b1c9      	cbz	r1, 800370c <_svfiprintf_r+0x100>
 80036d8:	e011      	b.n	80036fe <_svfiprintf_r+0xf2>
 80036da:	2b25      	cmp	r3, #37	; 0x25
 80036dc:	d0c0      	beq.n	8003660 <_svfiprintf_r+0x54>
 80036de:	4627      	mov	r7, r4
 80036e0:	e7b9      	b.n	8003656 <_svfiprintf_r+0x4a>
 80036e2:	4a3f      	ldr	r2, [pc, #252]	; (80037e0 <_svfiprintf_r+0x1d4>)
 80036e4:	463c      	mov	r4, r7
 80036e6:	1a80      	subs	r0, r0, r2
 80036e8:	fa0b f000 	lsl.w	r0, fp, r0
 80036ec:	4318      	orrs	r0, r3
 80036ee:	9004      	str	r0, [sp, #16]
 80036f0:	e7d3      	b.n	800369a <_svfiprintf_r+0x8e>
 80036f2:	9a03      	ldr	r2, [sp, #12]
 80036f4:	1d11      	adds	r1, r2, #4
 80036f6:	6812      	ldr	r2, [r2, #0]
 80036f8:	9103      	str	r1, [sp, #12]
 80036fa:	2a00      	cmp	r2, #0
 80036fc:	db01      	blt.n	8003702 <_svfiprintf_r+0xf6>
 80036fe:	9207      	str	r2, [sp, #28]
 8003700:	e004      	b.n	800370c <_svfiprintf_r+0x100>
 8003702:	4252      	negs	r2, r2
 8003704:	f043 0302 	orr.w	r3, r3, #2
 8003708:	9207      	str	r2, [sp, #28]
 800370a:	9304      	str	r3, [sp, #16]
 800370c:	783b      	ldrb	r3, [r7, #0]
 800370e:	2b2e      	cmp	r3, #46	; 0x2e
 8003710:	d10d      	bne.n	800372e <_svfiprintf_r+0x122>
 8003712:	787b      	ldrb	r3, [r7, #1]
 8003714:	1c79      	adds	r1, r7, #1
 8003716:	2b2a      	cmp	r3, #42	; 0x2a
 8003718:	d132      	bne.n	8003780 <_svfiprintf_r+0x174>
 800371a:	9b03      	ldr	r3, [sp, #12]
 800371c:	3702      	adds	r7, #2
 800371e:	1d1a      	adds	r2, r3, #4
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	9203      	str	r2, [sp, #12]
 8003724:	2b00      	cmp	r3, #0
 8003726:	bfb8      	it	lt
 8003728:	f04f 33ff 	movlt.w	r3, #4294967295
 800372c:	9305      	str	r3, [sp, #20]
 800372e:	4c2d      	ldr	r4, [pc, #180]	; (80037e4 <_svfiprintf_r+0x1d8>)
 8003730:	2203      	movs	r2, #3
 8003732:	7839      	ldrb	r1, [r7, #0]
 8003734:	4620      	mov	r0, r4
 8003736:	f000 f9f5 	bl	8003b24 <memchr>
 800373a:	b138      	cbz	r0, 800374c <_svfiprintf_r+0x140>
 800373c:	2340      	movs	r3, #64	; 0x40
 800373e:	1b00      	subs	r0, r0, r4
 8003740:	fa03 f000 	lsl.w	r0, r3, r0
 8003744:	9b04      	ldr	r3, [sp, #16]
 8003746:	3701      	adds	r7, #1
 8003748:	4303      	orrs	r3, r0
 800374a:	9304      	str	r3, [sp, #16]
 800374c:	7839      	ldrb	r1, [r7, #0]
 800374e:	2206      	movs	r2, #6
 8003750:	4825      	ldr	r0, [pc, #148]	; (80037e8 <_svfiprintf_r+0x1dc>)
 8003752:	1c7e      	adds	r6, r7, #1
 8003754:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003758:	f000 f9e4 	bl	8003b24 <memchr>
 800375c:	2800      	cmp	r0, #0
 800375e:	d035      	beq.n	80037cc <_svfiprintf_r+0x1c0>
 8003760:	4b22      	ldr	r3, [pc, #136]	; (80037ec <_svfiprintf_r+0x1e0>)
 8003762:	b9fb      	cbnz	r3, 80037a4 <_svfiprintf_r+0x198>
 8003764:	9b03      	ldr	r3, [sp, #12]
 8003766:	3307      	adds	r3, #7
 8003768:	f023 0307 	bic.w	r3, r3, #7
 800376c:	3308      	adds	r3, #8
 800376e:	9303      	str	r3, [sp, #12]
 8003770:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003772:	444b      	add	r3, r9
 8003774:	9309      	str	r3, [sp, #36]	; 0x24
 8003776:	e76d      	b.n	8003654 <_svfiprintf_r+0x48>
 8003778:	fb00 3202 	mla	r2, r0, r2, r3
 800377c:	2101      	movs	r1, #1
 800377e:	e7a4      	b.n	80036ca <_svfiprintf_r+0xbe>
 8003780:	2300      	movs	r3, #0
 8003782:	240a      	movs	r4, #10
 8003784:	4618      	mov	r0, r3
 8003786:	9305      	str	r3, [sp, #20]
 8003788:	460f      	mov	r7, r1
 800378a:	783a      	ldrb	r2, [r7, #0]
 800378c:	3101      	adds	r1, #1
 800378e:	3a30      	subs	r2, #48	; 0x30
 8003790:	2a09      	cmp	r2, #9
 8003792:	d903      	bls.n	800379c <_svfiprintf_r+0x190>
 8003794:	2b00      	cmp	r3, #0
 8003796:	d0ca      	beq.n	800372e <_svfiprintf_r+0x122>
 8003798:	9005      	str	r0, [sp, #20]
 800379a:	e7c8      	b.n	800372e <_svfiprintf_r+0x122>
 800379c:	fb04 2000 	mla	r0, r4, r0, r2
 80037a0:	2301      	movs	r3, #1
 80037a2:	e7f1      	b.n	8003788 <_svfiprintf_r+0x17c>
 80037a4:	ab03      	add	r3, sp, #12
 80037a6:	9300      	str	r3, [sp, #0]
 80037a8:	462a      	mov	r2, r5
 80037aa:	4b11      	ldr	r3, [pc, #68]	; (80037f0 <_svfiprintf_r+0x1e4>)
 80037ac:	a904      	add	r1, sp, #16
 80037ae:	4640      	mov	r0, r8
 80037b0:	f3af 8000 	nop.w
 80037b4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80037b8:	4681      	mov	r9, r0
 80037ba:	d1d9      	bne.n	8003770 <_svfiprintf_r+0x164>
 80037bc:	89ab      	ldrh	r3, [r5, #12]
 80037be:	065b      	lsls	r3, r3, #25
 80037c0:	f53f af39 	bmi.w	8003636 <_svfiprintf_r+0x2a>
 80037c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80037c6:	b01d      	add	sp, #116	; 0x74
 80037c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037cc:	ab03      	add	r3, sp, #12
 80037ce:	9300      	str	r3, [sp, #0]
 80037d0:	462a      	mov	r2, r5
 80037d2:	4b07      	ldr	r3, [pc, #28]	; (80037f0 <_svfiprintf_r+0x1e4>)
 80037d4:	a904      	add	r1, sp, #16
 80037d6:	4640      	mov	r0, r8
 80037d8:	f000 f884 	bl	80038e4 <_printf_i>
 80037dc:	e7ea      	b.n	80037b4 <_svfiprintf_r+0x1a8>
 80037de:	bf00      	nop
 80037e0:	08003df8 	.word	0x08003df8
 80037e4:	08003dfe 	.word	0x08003dfe
 80037e8:	08003e02 	.word	0x08003e02
 80037ec:	00000000 	.word	0x00000000
 80037f0:	08003555 	.word	0x08003555

080037f4 <_printf_common>:
 80037f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80037f8:	4691      	mov	r9, r2
 80037fa:	461f      	mov	r7, r3
 80037fc:	688a      	ldr	r2, [r1, #8]
 80037fe:	690b      	ldr	r3, [r1, #16]
 8003800:	4606      	mov	r6, r0
 8003802:	4293      	cmp	r3, r2
 8003804:	bfb8      	it	lt
 8003806:	4613      	movlt	r3, r2
 8003808:	f8c9 3000 	str.w	r3, [r9]
 800380c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003810:	460c      	mov	r4, r1
 8003812:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003816:	b112      	cbz	r2, 800381e <_printf_common+0x2a>
 8003818:	3301      	adds	r3, #1
 800381a:	f8c9 3000 	str.w	r3, [r9]
 800381e:	6823      	ldr	r3, [r4, #0]
 8003820:	0699      	lsls	r1, r3, #26
 8003822:	bf42      	ittt	mi
 8003824:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003828:	3302      	addmi	r3, #2
 800382a:	f8c9 3000 	strmi.w	r3, [r9]
 800382e:	6825      	ldr	r5, [r4, #0]
 8003830:	f015 0506 	ands.w	r5, r5, #6
 8003834:	d107      	bne.n	8003846 <_printf_common+0x52>
 8003836:	f104 0a19 	add.w	sl, r4, #25
 800383a:	68e3      	ldr	r3, [r4, #12]
 800383c:	f8d9 2000 	ldr.w	r2, [r9]
 8003840:	1a9b      	subs	r3, r3, r2
 8003842:	429d      	cmp	r5, r3
 8003844:	db2a      	blt.n	800389c <_printf_common+0xa8>
 8003846:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800384a:	6822      	ldr	r2, [r4, #0]
 800384c:	3300      	adds	r3, #0
 800384e:	bf18      	it	ne
 8003850:	2301      	movne	r3, #1
 8003852:	0692      	lsls	r2, r2, #26
 8003854:	d42f      	bmi.n	80038b6 <_printf_common+0xc2>
 8003856:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800385a:	4639      	mov	r1, r7
 800385c:	4630      	mov	r0, r6
 800385e:	47c0      	blx	r8
 8003860:	3001      	adds	r0, #1
 8003862:	d022      	beq.n	80038aa <_printf_common+0xb6>
 8003864:	6823      	ldr	r3, [r4, #0]
 8003866:	68e5      	ldr	r5, [r4, #12]
 8003868:	f003 0306 	and.w	r3, r3, #6
 800386c:	2b04      	cmp	r3, #4
 800386e:	bf18      	it	ne
 8003870:	2500      	movne	r5, #0
 8003872:	f8d9 2000 	ldr.w	r2, [r9]
 8003876:	f04f 0900 	mov.w	r9, #0
 800387a:	bf08      	it	eq
 800387c:	1aad      	subeq	r5, r5, r2
 800387e:	68a3      	ldr	r3, [r4, #8]
 8003880:	6922      	ldr	r2, [r4, #16]
 8003882:	bf08      	it	eq
 8003884:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003888:	4293      	cmp	r3, r2
 800388a:	bfc4      	itt	gt
 800388c:	1a9b      	subgt	r3, r3, r2
 800388e:	18ed      	addgt	r5, r5, r3
 8003890:	341a      	adds	r4, #26
 8003892:	454d      	cmp	r5, r9
 8003894:	d11b      	bne.n	80038ce <_printf_common+0xda>
 8003896:	2000      	movs	r0, #0
 8003898:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800389c:	2301      	movs	r3, #1
 800389e:	4652      	mov	r2, sl
 80038a0:	4639      	mov	r1, r7
 80038a2:	4630      	mov	r0, r6
 80038a4:	47c0      	blx	r8
 80038a6:	3001      	adds	r0, #1
 80038a8:	d103      	bne.n	80038b2 <_printf_common+0xbe>
 80038aa:	f04f 30ff 	mov.w	r0, #4294967295
 80038ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038b2:	3501      	adds	r5, #1
 80038b4:	e7c1      	b.n	800383a <_printf_common+0x46>
 80038b6:	2030      	movs	r0, #48	; 0x30
 80038b8:	18e1      	adds	r1, r4, r3
 80038ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80038be:	1c5a      	adds	r2, r3, #1
 80038c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80038c4:	4422      	add	r2, r4
 80038c6:	3302      	adds	r3, #2
 80038c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80038cc:	e7c3      	b.n	8003856 <_printf_common+0x62>
 80038ce:	2301      	movs	r3, #1
 80038d0:	4622      	mov	r2, r4
 80038d2:	4639      	mov	r1, r7
 80038d4:	4630      	mov	r0, r6
 80038d6:	47c0      	blx	r8
 80038d8:	3001      	adds	r0, #1
 80038da:	d0e6      	beq.n	80038aa <_printf_common+0xb6>
 80038dc:	f109 0901 	add.w	r9, r9, #1
 80038e0:	e7d7      	b.n	8003892 <_printf_common+0x9e>
	...

080038e4 <_printf_i>:
 80038e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80038e8:	4617      	mov	r7, r2
 80038ea:	7e0a      	ldrb	r2, [r1, #24]
 80038ec:	b085      	sub	sp, #20
 80038ee:	2a6e      	cmp	r2, #110	; 0x6e
 80038f0:	4698      	mov	r8, r3
 80038f2:	4606      	mov	r6, r0
 80038f4:	460c      	mov	r4, r1
 80038f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80038f8:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80038fc:	f000 80bc 	beq.w	8003a78 <_printf_i+0x194>
 8003900:	d81a      	bhi.n	8003938 <_printf_i+0x54>
 8003902:	2a63      	cmp	r2, #99	; 0x63
 8003904:	d02e      	beq.n	8003964 <_printf_i+0x80>
 8003906:	d80a      	bhi.n	800391e <_printf_i+0x3a>
 8003908:	2a00      	cmp	r2, #0
 800390a:	f000 80c8 	beq.w	8003a9e <_printf_i+0x1ba>
 800390e:	2a58      	cmp	r2, #88	; 0x58
 8003910:	f000 808a 	beq.w	8003a28 <_printf_i+0x144>
 8003914:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003918:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800391c:	e02a      	b.n	8003974 <_printf_i+0x90>
 800391e:	2a64      	cmp	r2, #100	; 0x64
 8003920:	d001      	beq.n	8003926 <_printf_i+0x42>
 8003922:	2a69      	cmp	r2, #105	; 0x69
 8003924:	d1f6      	bne.n	8003914 <_printf_i+0x30>
 8003926:	6821      	ldr	r1, [r4, #0]
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800392e:	d023      	beq.n	8003978 <_printf_i+0x94>
 8003930:	1d11      	adds	r1, r2, #4
 8003932:	6019      	str	r1, [r3, #0]
 8003934:	6813      	ldr	r3, [r2, #0]
 8003936:	e027      	b.n	8003988 <_printf_i+0xa4>
 8003938:	2a73      	cmp	r2, #115	; 0x73
 800393a:	f000 80b4 	beq.w	8003aa6 <_printf_i+0x1c2>
 800393e:	d808      	bhi.n	8003952 <_printf_i+0x6e>
 8003940:	2a6f      	cmp	r2, #111	; 0x6f
 8003942:	d02a      	beq.n	800399a <_printf_i+0xb6>
 8003944:	2a70      	cmp	r2, #112	; 0x70
 8003946:	d1e5      	bne.n	8003914 <_printf_i+0x30>
 8003948:	680a      	ldr	r2, [r1, #0]
 800394a:	f042 0220 	orr.w	r2, r2, #32
 800394e:	600a      	str	r2, [r1, #0]
 8003950:	e003      	b.n	800395a <_printf_i+0x76>
 8003952:	2a75      	cmp	r2, #117	; 0x75
 8003954:	d021      	beq.n	800399a <_printf_i+0xb6>
 8003956:	2a78      	cmp	r2, #120	; 0x78
 8003958:	d1dc      	bne.n	8003914 <_printf_i+0x30>
 800395a:	2278      	movs	r2, #120	; 0x78
 800395c:	496f      	ldr	r1, [pc, #444]	; (8003b1c <_printf_i+0x238>)
 800395e:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8003962:	e064      	b.n	8003a2e <_printf_i+0x14a>
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800396a:	1d11      	adds	r1, r2, #4
 800396c:	6019      	str	r1, [r3, #0]
 800396e:	6813      	ldr	r3, [r2, #0]
 8003970:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003974:	2301      	movs	r3, #1
 8003976:	e0a3      	b.n	8003ac0 <_printf_i+0x1dc>
 8003978:	f011 0f40 	tst.w	r1, #64	; 0x40
 800397c:	f102 0104 	add.w	r1, r2, #4
 8003980:	6019      	str	r1, [r3, #0]
 8003982:	d0d7      	beq.n	8003934 <_printf_i+0x50>
 8003984:	f9b2 3000 	ldrsh.w	r3, [r2]
 8003988:	2b00      	cmp	r3, #0
 800398a:	da03      	bge.n	8003994 <_printf_i+0xb0>
 800398c:	222d      	movs	r2, #45	; 0x2d
 800398e:	425b      	negs	r3, r3
 8003990:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003994:	4962      	ldr	r1, [pc, #392]	; (8003b20 <_printf_i+0x23c>)
 8003996:	220a      	movs	r2, #10
 8003998:	e017      	b.n	80039ca <_printf_i+0xe6>
 800399a:	6820      	ldr	r0, [r4, #0]
 800399c:	6819      	ldr	r1, [r3, #0]
 800399e:	f010 0f80 	tst.w	r0, #128	; 0x80
 80039a2:	d003      	beq.n	80039ac <_printf_i+0xc8>
 80039a4:	1d08      	adds	r0, r1, #4
 80039a6:	6018      	str	r0, [r3, #0]
 80039a8:	680b      	ldr	r3, [r1, #0]
 80039aa:	e006      	b.n	80039ba <_printf_i+0xd6>
 80039ac:	f010 0f40 	tst.w	r0, #64	; 0x40
 80039b0:	f101 0004 	add.w	r0, r1, #4
 80039b4:	6018      	str	r0, [r3, #0]
 80039b6:	d0f7      	beq.n	80039a8 <_printf_i+0xc4>
 80039b8:	880b      	ldrh	r3, [r1, #0]
 80039ba:	2a6f      	cmp	r2, #111	; 0x6f
 80039bc:	bf14      	ite	ne
 80039be:	220a      	movne	r2, #10
 80039c0:	2208      	moveq	r2, #8
 80039c2:	4957      	ldr	r1, [pc, #348]	; (8003b20 <_printf_i+0x23c>)
 80039c4:	2000      	movs	r0, #0
 80039c6:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80039ca:	6865      	ldr	r5, [r4, #4]
 80039cc:	2d00      	cmp	r5, #0
 80039ce:	60a5      	str	r5, [r4, #8]
 80039d0:	f2c0 809c 	blt.w	8003b0c <_printf_i+0x228>
 80039d4:	6820      	ldr	r0, [r4, #0]
 80039d6:	f020 0004 	bic.w	r0, r0, #4
 80039da:	6020      	str	r0, [r4, #0]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d13f      	bne.n	8003a60 <_printf_i+0x17c>
 80039e0:	2d00      	cmp	r5, #0
 80039e2:	f040 8095 	bne.w	8003b10 <_printf_i+0x22c>
 80039e6:	4675      	mov	r5, lr
 80039e8:	2a08      	cmp	r2, #8
 80039ea:	d10b      	bne.n	8003a04 <_printf_i+0x120>
 80039ec:	6823      	ldr	r3, [r4, #0]
 80039ee:	07da      	lsls	r2, r3, #31
 80039f0:	d508      	bpl.n	8003a04 <_printf_i+0x120>
 80039f2:	6923      	ldr	r3, [r4, #16]
 80039f4:	6862      	ldr	r2, [r4, #4]
 80039f6:	429a      	cmp	r2, r3
 80039f8:	bfde      	ittt	le
 80039fa:	2330      	movle	r3, #48	; 0x30
 80039fc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003a00:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003a04:	ebae 0305 	sub.w	r3, lr, r5
 8003a08:	6123      	str	r3, [r4, #16]
 8003a0a:	f8cd 8000 	str.w	r8, [sp]
 8003a0e:	463b      	mov	r3, r7
 8003a10:	aa03      	add	r2, sp, #12
 8003a12:	4621      	mov	r1, r4
 8003a14:	4630      	mov	r0, r6
 8003a16:	f7ff feed 	bl	80037f4 <_printf_common>
 8003a1a:	3001      	adds	r0, #1
 8003a1c:	d155      	bne.n	8003aca <_printf_i+0x1e6>
 8003a1e:	f04f 30ff 	mov.w	r0, #4294967295
 8003a22:	b005      	add	sp, #20
 8003a24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003a28:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8003a2c:	493c      	ldr	r1, [pc, #240]	; (8003b20 <_printf_i+0x23c>)
 8003a2e:	6822      	ldr	r2, [r4, #0]
 8003a30:	6818      	ldr	r0, [r3, #0]
 8003a32:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003a36:	f100 0504 	add.w	r5, r0, #4
 8003a3a:	601d      	str	r5, [r3, #0]
 8003a3c:	d001      	beq.n	8003a42 <_printf_i+0x15e>
 8003a3e:	6803      	ldr	r3, [r0, #0]
 8003a40:	e002      	b.n	8003a48 <_printf_i+0x164>
 8003a42:	0655      	lsls	r5, r2, #25
 8003a44:	d5fb      	bpl.n	8003a3e <_printf_i+0x15a>
 8003a46:	8803      	ldrh	r3, [r0, #0]
 8003a48:	07d0      	lsls	r0, r2, #31
 8003a4a:	bf44      	itt	mi
 8003a4c:	f042 0220 	orrmi.w	r2, r2, #32
 8003a50:	6022      	strmi	r2, [r4, #0]
 8003a52:	b91b      	cbnz	r3, 8003a5c <_printf_i+0x178>
 8003a54:	6822      	ldr	r2, [r4, #0]
 8003a56:	f022 0220 	bic.w	r2, r2, #32
 8003a5a:	6022      	str	r2, [r4, #0]
 8003a5c:	2210      	movs	r2, #16
 8003a5e:	e7b1      	b.n	80039c4 <_printf_i+0xe0>
 8003a60:	4675      	mov	r5, lr
 8003a62:	fbb3 f0f2 	udiv	r0, r3, r2
 8003a66:	fb02 3310 	mls	r3, r2, r0, r3
 8003a6a:	5ccb      	ldrb	r3, [r1, r3]
 8003a6c:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003a70:	4603      	mov	r3, r0
 8003a72:	2800      	cmp	r0, #0
 8003a74:	d1f5      	bne.n	8003a62 <_printf_i+0x17e>
 8003a76:	e7b7      	b.n	80039e8 <_printf_i+0x104>
 8003a78:	6808      	ldr	r0, [r1, #0]
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003a80:	6949      	ldr	r1, [r1, #20]
 8003a82:	d004      	beq.n	8003a8e <_printf_i+0x1aa>
 8003a84:	1d10      	adds	r0, r2, #4
 8003a86:	6018      	str	r0, [r3, #0]
 8003a88:	6813      	ldr	r3, [r2, #0]
 8003a8a:	6019      	str	r1, [r3, #0]
 8003a8c:	e007      	b.n	8003a9e <_printf_i+0x1ba>
 8003a8e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003a92:	f102 0004 	add.w	r0, r2, #4
 8003a96:	6018      	str	r0, [r3, #0]
 8003a98:	6813      	ldr	r3, [r2, #0]
 8003a9a:	d0f6      	beq.n	8003a8a <_printf_i+0x1a6>
 8003a9c:	8019      	strh	r1, [r3, #0]
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	4675      	mov	r5, lr
 8003aa2:	6123      	str	r3, [r4, #16]
 8003aa4:	e7b1      	b.n	8003a0a <_printf_i+0x126>
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	1d11      	adds	r1, r2, #4
 8003aaa:	6019      	str	r1, [r3, #0]
 8003aac:	6815      	ldr	r5, [r2, #0]
 8003aae:	2100      	movs	r1, #0
 8003ab0:	6862      	ldr	r2, [r4, #4]
 8003ab2:	4628      	mov	r0, r5
 8003ab4:	f000 f836 	bl	8003b24 <memchr>
 8003ab8:	b108      	cbz	r0, 8003abe <_printf_i+0x1da>
 8003aba:	1b40      	subs	r0, r0, r5
 8003abc:	6060      	str	r0, [r4, #4]
 8003abe:	6863      	ldr	r3, [r4, #4]
 8003ac0:	6123      	str	r3, [r4, #16]
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ac8:	e79f      	b.n	8003a0a <_printf_i+0x126>
 8003aca:	6923      	ldr	r3, [r4, #16]
 8003acc:	462a      	mov	r2, r5
 8003ace:	4639      	mov	r1, r7
 8003ad0:	4630      	mov	r0, r6
 8003ad2:	47c0      	blx	r8
 8003ad4:	3001      	adds	r0, #1
 8003ad6:	d0a2      	beq.n	8003a1e <_printf_i+0x13a>
 8003ad8:	6823      	ldr	r3, [r4, #0]
 8003ada:	079b      	lsls	r3, r3, #30
 8003adc:	d507      	bpl.n	8003aee <_printf_i+0x20a>
 8003ade:	2500      	movs	r5, #0
 8003ae0:	f104 0919 	add.w	r9, r4, #25
 8003ae4:	68e3      	ldr	r3, [r4, #12]
 8003ae6:	9a03      	ldr	r2, [sp, #12]
 8003ae8:	1a9b      	subs	r3, r3, r2
 8003aea:	429d      	cmp	r5, r3
 8003aec:	db05      	blt.n	8003afa <_printf_i+0x216>
 8003aee:	68e0      	ldr	r0, [r4, #12]
 8003af0:	9b03      	ldr	r3, [sp, #12]
 8003af2:	4298      	cmp	r0, r3
 8003af4:	bfb8      	it	lt
 8003af6:	4618      	movlt	r0, r3
 8003af8:	e793      	b.n	8003a22 <_printf_i+0x13e>
 8003afa:	2301      	movs	r3, #1
 8003afc:	464a      	mov	r2, r9
 8003afe:	4639      	mov	r1, r7
 8003b00:	4630      	mov	r0, r6
 8003b02:	47c0      	blx	r8
 8003b04:	3001      	adds	r0, #1
 8003b06:	d08a      	beq.n	8003a1e <_printf_i+0x13a>
 8003b08:	3501      	adds	r5, #1
 8003b0a:	e7eb      	b.n	8003ae4 <_printf_i+0x200>
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d1a7      	bne.n	8003a60 <_printf_i+0x17c>
 8003b10:	780b      	ldrb	r3, [r1, #0]
 8003b12:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003b16:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003b1a:	e765      	b.n	80039e8 <_printf_i+0x104>
 8003b1c:	08003e1a 	.word	0x08003e1a
 8003b20:	08003e09 	.word	0x08003e09

08003b24 <memchr>:
 8003b24:	b510      	push	{r4, lr}
 8003b26:	b2c9      	uxtb	r1, r1
 8003b28:	4402      	add	r2, r0
 8003b2a:	4290      	cmp	r0, r2
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	d101      	bne.n	8003b34 <memchr+0x10>
 8003b30:	2000      	movs	r0, #0
 8003b32:	bd10      	pop	{r4, pc}
 8003b34:	781c      	ldrb	r4, [r3, #0]
 8003b36:	3001      	adds	r0, #1
 8003b38:	428c      	cmp	r4, r1
 8003b3a:	d1f6      	bne.n	8003b2a <memchr+0x6>
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	bd10      	pop	{r4, pc}

08003b40 <memcpy>:
 8003b40:	b510      	push	{r4, lr}
 8003b42:	1e43      	subs	r3, r0, #1
 8003b44:	440a      	add	r2, r1
 8003b46:	4291      	cmp	r1, r2
 8003b48:	d100      	bne.n	8003b4c <memcpy+0xc>
 8003b4a:	bd10      	pop	{r4, pc}
 8003b4c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b50:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003b54:	e7f7      	b.n	8003b46 <memcpy+0x6>

08003b56 <memmove>:
 8003b56:	4288      	cmp	r0, r1
 8003b58:	b510      	push	{r4, lr}
 8003b5a:	eb01 0302 	add.w	r3, r1, r2
 8003b5e:	d803      	bhi.n	8003b68 <memmove+0x12>
 8003b60:	1e42      	subs	r2, r0, #1
 8003b62:	4299      	cmp	r1, r3
 8003b64:	d10c      	bne.n	8003b80 <memmove+0x2a>
 8003b66:	bd10      	pop	{r4, pc}
 8003b68:	4298      	cmp	r0, r3
 8003b6a:	d2f9      	bcs.n	8003b60 <memmove+0xa>
 8003b6c:	1881      	adds	r1, r0, r2
 8003b6e:	1ad2      	subs	r2, r2, r3
 8003b70:	42d3      	cmn	r3, r2
 8003b72:	d100      	bne.n	8003b76 <memmove+0x20>
 8003b74:	bd10      	pop	{r4, pc}
 8003b76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003b7a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003b7e:	e7f7      	b.n	8003b70 <memmove+0x1a>
 8003b80:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b84:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003b88:	e7eb      	b.n	8003b62 <memmove+0xc>
	...

08003b8c <_free_r>:
 8003b8c:	b538      	push	{r3, r4, r5, lr}
 8003b8e:	4605      	mov	r5, r0
 8003b90:	2900      	cmp	r1, #0
 8003b92:	d043      	beq.n	8003c1c <_free_r+0x90>
 8003b94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b98:	1f0c      	subs	r4, r1, #4
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	bfb8      	it	lt
 8003b9e:	18e4      	addlt	r4, r4, r3
 8003ba0:	f000 f8d4 	bl	8003d4c <__malloc_lock>
 8003ba4:	4a1e      	ldr	r2, [pc, #120]	; (8003c20 <_free_r+0x94>)
 8003ba6:	6813      	ldr	r3, [r2, #0]
 8003ba8:	4610      	mov	r0, r2
 8003baa:	b933      	cbnz	r3, 8003bba <_free_r+0x2e>
 8003bac:	6063      	str	r3, [r4, #4]
 8003bae:	6014      	str	r4, [r2, #0]
 8003bb0:	4628      	mov	r0, r5
 8003bb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003bb6:	f000 b8ca 	b.w	8003d4e <__malloc_unlock>
 8003bba:	42a3      	cmp	r3, r4
 8003bbc:	d90b      	bls.n	8003bd6 <_free_r+0x4a>
 8003bbe:	6821      	ldr	r1, [r4, #0]
 8003bc0:	1862      	adds	r2, r4, r1
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	bf01      	itttt	eq
 8003bc6:	681a      	ldreq	r2, [r3, #0]
 8003bc8:	685b      	ldreq	r3, [r3, #4]
 8003bca:	1852      	addeq	r2, r2, r1
 8003bcc:	6022      	streq	r2, [r4, #0]
 8003bce:	6063      	str	r3, [r4, #4]
 8003bd0:	6004      	str	r4, [r0, #0]
 8003bd2:	e7ed      	b.n	8003bb0 <_free_r+0x24>
 8003bd4:	4613      	mov	r3, r2
 8003bd6:	685a      	ldr	r2, [r3, #4]
 8003bd8:	b10a      	cbz	r2, 8003bde <_free_r+0x52>
 8003bda:	42a2      	cmp	r2, r4
 8003bdc:	d9fa      	bls.n	8003bd4 <_free_r+0x48>
 8003bde:	6819      	ldr	r1, [r3, #0]
 8003be0:	1858      	adds	r0, r3, r1
 8003be2:	42a0      	cmp	r0, r4
 8003be4:	d10b      	bne.n	8003bfe <_free_r+0x72>
 8003be6:	6820      	ldr	r0, [r4, #0]
 8003be8:	4401      	add	r1, r0
 8003bea:	1858      	adds	r0, r3, r1
 8003bec:	4282      	cmp	r2, r0
 8003bee:	6019      	str	r1, [r3, #0]
 8003bf0:	d1de      	bne.n	8003bb0 <_free_r+0x24>
 8003bf2:	6810      	ldr	r0, [r2, #0]
 8003bf4:	6852      	ldr	r2, [r2, #4]
 8003bf6:	4401      	add	r1, r0
 8003bf8:	6019      	str	r1, [r3, #0]
 8003bfa:	605a      	str	r2, [r3, #4]
 8003bfc:	e7d8      	b.n	8003bb0 <_free_r+0x24>
 8003bfe:	d902      	bls.n	8003c06 <_free_r+0x7a>
 8003c00:	230c      	movs	r3, #12
 8003c02:	602b      	str	r3, [r5, #0]
 8003c04:	e7d4      	b.n	8003bb0 <_free_r+0x24>
 8003c06:	6820      	ldr	r0, [r4, #0]
 8003c08:	1821      	adds	r1, r4, r0
 8003c0a:	428a      	cmp	r2, r1
 8003c0c:	bf01      	itttt	eq
 8003c0e:	6811      	ldreq	r1, [r2, #0]
 8003c10:	6852      	ldreq	r2, [r2, #4]
 8003c12:	1809      	addeq	r1, r1, r0
 8003c14:	6021      	streq	r1, [r4, #0]
 8003c16:	6062      	str	r2, [r4, #4]
 8003c18:	605c      	str	r4, [r3, #4]
 8003c1a:	e7c9      	b.n	8003bb0 <_free_r+0x24>
 8003c1c:	bd38      	pop	{r3, r4, r5, pc}
 8003c1e:	bf00      	nop
 8003c20:	20000090 	.word	0x20000090

08003c24 <_malloc_r>:
 8003c24:	b570      	push	{r4, r5, r6, lr}
 8003c26:	1ccd      	adds	r5, r1, #3
 8003c28:	f025 0503 	bic.w	r5, r5, #3
 8003c2c:	3508      	adds	r5, #8
 8003c2e:	2d0c      	cmp	r5, #12
 8003c30:	bf38      	it	cc
 8003c32:	250c      	movcc	r5, #12
 8003c34:	2d00      	cmp	r5, #0
 8003c36:	4606      	mov	r6, r0
 8003c38:	db01      	blt.n	8003c3e <_malloc_r+0x1a>
 8003c3a:	42a9      	cmp	r1, r5
 8003c3c:	d903      	bls.n	8003c46 <_malloc_r+0x22>
 8003c3e:	230c      	movs	r3, #12
 8003c40:	6033      	str	r3, [r6, #0]
 8003c42:	2000      	movs	r0, #0
 8003c44:	bd70      	pop	{r4, r5, r6, pc}
 8003c46:	f000 f881 	bl	8003d4c <__malloc_lock>
 8003c4a:	4a23      	ldr	r2, [pc, #140]	; (8003cd8 <_malloc_r+0xb4>)
 8003c4c:	6814      	ldr	r4, [r2, #0]
 8003c4e:	4621      	mov	r1, r4
 8003c50:	b991      	cbnz	r1, 8003c78 <_malloc_r+0x54>
 8003c52:	4c22      	ldr	r4, [pc, #136]	; (8003cdc <_malloc_r+0xb8>)
 8003c54:	6823      	ldr	r3, [r4, #0]
 8003c56:	b91b      	cbnz	r3, 8003c60 <_malloc_r+0x3c>
 8003c58:	4630      	mov	r0, r6
 8003c5a:	f000 f867 	bl	8003d2c <_sbrk_r>
 8003c5e:	6020      	str	r0, [r4, #0]
 8003c60:	4629      	mov	r1, r5
 8003c62:	4630      	mov	r0, r6
 8003c64:	f000 f862 	bl	8003d2c <_sbrk_r>
 8003c68:	1c43      	adds	r3, r0, #1
 8003c6a:	d126      	bne.n	8003cba <_malloc_r+0x96>
 8003c6c:	230c      	movs	r3, #12
 8003c6e:	4630      	mov	r0, r6
 8003c70:	6033      	str	r3, [r6, #0]
 8003c72:	f000 f86c 	bl	8003d4e <__malloc_unlock>
 8003c76:	e7e4      	b.n	8003c42 <_malloc_r+0x1e>
 8003c78:	680b      	ldr	r3, [r1, #0]
 8003c7a:	1b5b      	subs	r3, r3, r5
 8003c7c:	d41a      	bmi.n	8003cb4 <_malloc_r+0x90>
 8003c7e:	2b0b      	cmp	r3, #11
 8003c80:	d90f      	bls.n	8003ca2 <_malloc_r+0x7e>
 8003c82:	600b      	str	r3, [r1, #0]
 8003c84:	18cc      	adds	r4, r1, r3
 8003c86:	50cd      	str	r5, [r1, r3]
 8003c88:	4630      	mov	r0, r6
 8003c8a:	f000 f860 	bl	8003d4e <__malloc_unlock>
 8003c8e:	f104 000b 	add.w	r0, r4, #11
 8003c92:	1d23      	adds	r3, r4, #4
 8003c94:	f020 0007 	bic.w	r0, r0, #7
 8003c98:	1ac3      	subs	r3, r0, r3
 8003c9a:	d01b      	beq.n	8003cd4 <_malloc_r+0xb0>
 8003c9c:	425a      	negs	r2, r3
 8003c9e:	50e2      	str	r2, [r4, r3]
 8003ca0:	bd70      	pop	{r4, r5, r6, pc}
 8003ca2:	428c      	cmp	r4, r1
 8003ca4:	bf0b      	itete	eq
 8003ca6:	6863      	ldreq	r3, [r4, #4]
 8003ca8:	684b      	ldrne	r3, [r1, #4]
 8003caa:	6013      	streq	r3, [r2, #0]
 8003cac:	6063      	strne	r3, [r4, #4]
 8003cae:	bf18      	it	ne
 8003cb0:	460c      	movne	r4, r1
 8003cb2:	e7e9      	b.n	8003c88 <_malloc_r+0x64>
 8003cb4:	460c      	mov	r4, r1
 8003cb6:	6849      	ldr	r1, [r1, #4]
 8003cb8:	e7ca      	b.n	8003c50 <_malloc_r+0x2c>
 8003cba:	1cc4      	adds	r4, r0, #3
 8003cbc:	f024 0403 	bic.w	r4, r4, #3
 8003cc0:	42a0      	cmp	r0, r4
 8003cc2:	d005      	beq.n	8003cd0 <_malloc_r+0xac>
 8003cc4:	1a21      	subs	r1, r4, r0
 8003cc6:	4630      	mov	r0, r6
 8003cc8:	f000 f830 	bl	8003d2c <_sbrk_r>
 8003ccc:	3001      	adds	r0, #1
 8003cce:	d0cd      	beq.n	8003c6c <_malloc_r+0x48>
 8003cd0:	6025      	str	r5, [r4, #0]
 8003cd2:	e7d9      	b.n	8003c88 <_malloc_r+0x64>
 8003cd4:	bd70      	pop	{r4, r5, r6, pc}
 8003cd6:	bf00      	nop
 8003cd8:	20000090 	.word	0x20000090
 8003cdc:	20000094 	.word	0x20000094

08003ce0 <_realloc_r>:
 8003ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ce2:	4607      	mov	r7, r0
 8003ce4:	4614      	mov	r4, r2
 8003ce6:	460e      	mov	r6, r1
 8003ce8:	b921      	cbnz	r1, 8003cf4 <_realloc_r+0x14>
 8003cea:	4611      	mov	r1, r2
 8003cec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003cf0:	f7ff bf98 	b.w	8003c24 <_malloc_r>
 8003cf4:	b922      	cbnz	r2, 8003d00 <_realloc_r+0x20>
 8003cf6:	f7ff ff49 	bl	8003b8c <_free_r>
 8003cfa:	4625      	mov	r5, r4
 8003cfc:	4628      	mov	r0, r5
 8003cfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d00:	f000 f826 	bl	8003d50 <_malloc_usable_size_r>
 8003d04:	4284      	cmp	r4, r0
 8003d06:	d90f      	bls.n	8003d28 <_realloc_r+0x48>
 8003d08:	4621      	mov	r1, r4
 8003d0a:	4638      	mov	r0, r7
 8003d0c:	f7ff ff8a 	bl	8003c24 <_malloc_r>
 8003d10:	4605      	mov	r5, r0
 8003d12:	2800      	cmp	r0, #0
 8003d14:	d0f2      	beq.n	8003cfc <_realloc_r+0x1c>
 8003d16:	4631      	mov	r1, r6
 8003d18:	4622      	mov	r2, r4
 8003d1a:	f7ff ff11 	bl	8003b40 <memcpy>
 8003d1e:	4631      	mov	r1, r6
 8003d20:	4638      	mov	r0, r7
 8003d22:	f7ff ff33 	bl	8003b8c <_free_r>
 8003d26:	e7e9      	b.n	8003cfc <_realloc_r+0x1c>
 8003d28:	4635      	mov	r5, r6
 8003d2a:	e7e7      	b.n	8003cfc <_realloc_r+0x1c>

08003d2c <_sbrk_r>:
 8003d2c:	b538      	push	{r3, r4, r5, lr}
 8003d2e:	2300      	movs	r3, #0
 8003d30:	4c05      	ldr	r4, [pc, #20]	; (8003d48 <_sbrk_r+0x1c>)
 8003d32:	4605      	mov	r5, r0
 8003d34:	4608      	mov	r0, r1
 8003d36:	6023      	str	r3, [r4, #0]
 8003d38:	f7fd f8a0 	bl	8000e7c <_sbrk>
 8003d3c:	1c43      	adds	r3, r0, #1
 8003d3e:	d102      	bne.n	8003d46 <_sbrk_r+0x1a>
 8003d40:	6823      	ldr	r3, [r4, #0]
 8003d42:	b103      	cbz	r3, 8003d46 <_sbrk_r+0x1a>
 8003d44:	602b      	str	r3, [r5, #0]
 8003d46:	bd38      	pop	{r3, r4, r5, pc}
 8003d48:	2000014c 	.word	0x2000014c

08003d4c <__malloc_lock>:
 8003d4c:	4770      	bx	lr

08003d4e <__malloc_unlock>:
 8003d4e:	4770      	bx	lr

08003d50 <_malloc_usable_size_r>:
 8003d50:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8003d54:	2800      	cmp	r0, #0
 8003d56:	f1a0 0004 	sub.w	r0, r0, #4
 8003d5a:	bfbc      	itt	lt
 8003d5c:	580b      	ldrlt	r3, [r1, r0]
 8003d5e:	18c0      	addlt	r0, r0, r3
 8003d60:	4770      	bx	lr
	...

08003d64 <_init>:
 8003d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d66:	bf00      	nop
 8003d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d6a:	bc08      	pop	{r3}
 8003d6c:	469e      	mov	lr, r3
 8003d6e:	4770      	bx	lr

08003d70 <_fini>:
 8003d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d72:	bf00      	nop
 8003d74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d76:	bc08      	pop	{r3}
 8003d78:	469e      	mov	lr, r3
 8003d7a:	4770      	bx	lr
