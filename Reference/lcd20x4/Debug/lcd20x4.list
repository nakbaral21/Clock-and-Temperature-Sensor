
lcd20x4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000112c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08001238  08001238  00011238  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001290  08001290  00011290  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001294  08001294  00011294  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08001298  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000074  2000000c  080012a4  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000080  080012a4  00020080  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000cc6e  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001b78  00000000  00000000  0002cca3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003c37  00000000  00000000  0002e81b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000500  00000000  00000000  00032458  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000008a0  00000000  00000000  00032958  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00003dd4  00000000  00000000  000331f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000021e8  00000000  00000000  00036fcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000391b4  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000dd4  00000000  00000000  00039230  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001220 	.word	0x08001220

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001220 	.word	0x08001220

0800014c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800014c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800014e:	4b0e      	ldr	r3, [pc, #56]	; (8000188 <HAL_InitTick+0x3c>)
{
 8000150:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000152:	7818      	ldrb	r0, [r3, #0]
 8000154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000158:	fbb3 f3f0 	udiv	r3, r3, r0
 800015c:	4a0b      	ldr	r2, [pc, #44]	; (800018c <HAL_InitTick+0x40>)
 800015e:	6810      	ldr	r0, [r2, #0]
 8000160:	fbb0 f0f3 	udiv	r0, r0, r3
 8000164:	f000 f892 	bl	800028c <HAL_SYSTICK_Config>
 8000168:	4604      	mov	r4, r0
 800016a:	b958      	cbnz	r0, 8000184 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800016c:	2d0f      	cmp	r5, #15
 800016e:	d809      	bhi.n	8000184 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000170:	4602      	mov	r2, r0
 8000172:	4629      	mov	r1, r5
 8000174:	f04f 30ff 	mov.w	r0, #4294967295
 8000178:	f000 f854 	bl	8000224 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <HAL_InitTick+0x44>)
 800017e:	4620      	mov	r0, r4
 8000180:	601d      	str	r5, [r3, #0]
 8000182:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000184:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000186:	bd38      	pop	{r3, r4, r5, pc}
 8000188:	20000000 	.word	0x20000000
 800018c:	20000008 	.word	0x20000008
 8000190:	20000004 	.word	0x20000004

08000194 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000194:	4a07      	ldr	r2, [pc, #28]	; (80001b4 <HAL_Init+0x20>)
{
 8000196:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000198:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800019a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800019c:	f043 0310 	orr.w	r3, r3, #16
 80001a0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001a2:	f000 f82d 	bl	8000200 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001a6:	2000      	movs	r0, #0
 80001a8:	f7ff ffd0 	bl	800014c <HAL_InitTick>
  HAL_MspInit();
 80001ac:	f000 ff62 	bl	8001074 <HAL_MspInit>
}
 80001b0:	2000      	movs	r0, #0
 80001b2:	bd08      	pop	{r3, pc}
 80001b4:	40022000 	.word	0x40022000

080001b8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001b8:	4a03      	ldr	r2, [pc, #12]	; (80001c8 <HAL_IncTick+0x10>)
 80001ba:	4b04      	ldr	r3, [pc, #16]	; (80001cc <HAL_IncTick+0x14>)
 80001bc:	6811      	ldr	r1, [r2, #0]
 80001be:	781b      	ldrb	r3, [r3, #0]
 80001c0:	440b      	add	r3, r1
 80001c2:	6013      	str	r3, [r2, #0]
 80001c4:	4770      	bx	lr
 80001c6:	bf00      	nop
 80001c8:	20000028 	.word	0x20000028
 80001cc:	20000000 	.word	0x20000000

080001d0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001d0:	4b01      	ldr	r3, [pc, #4]	; (80001d8 <HAL_GetTick+0x8>)
 80001d2:	6818      	ldr	r0, [r3, #0]
}
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	20000028 	.word	0x20000028

080001dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80001dc:	b538      	push	{r3, r4, r5, lr}
 80001de:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80001e0:	f7ff fff6 	bl	80001d0 <HAL_GetTick>
 80001e4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80001e6:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80001e8:	bf1e      	ittt	ne
 80001ea:	4b04      	ldrne	r3, [pc, #16]	; (80001fc <HAL_Delay+0x20>)
 80001ec:	781b      	ldrbne	r3, [r3, #0]
 80001ee:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80001f0:	f7ff ffee 	bl	80001d0 <HAL_GetTick>
 80001f4:	1b40      	subs	r0, r0, r5
 80001f6:	4284      	cmp	r4, r0
 80001f8:	d8fa      	bhi.n	80001f0 <HAL_Delay+0x14>
  {
  }
}
 80001fa:	bd38      	pop	{r3, r4, r5, pc}
 80001fc:	20000000 	.word	0x20000000

08000200 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000200:	4a07      	ldr	r2, [pc, #28]	; (8000220 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000202:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000204:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000206:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800020a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800020e:	041b      	lsls	r3, r3, #16
 8000210:	0c1b      	lsrs	r3, r3, #16
 8000212:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000216:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800021a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800021c:	60d3      	str	r3, [r2, #12]
 800021e:	4770      	bx	lr
 8000220:	e000ed00 	.word	0xe000ed00

08000224 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000224:	4b17      	ldr	r3, [pc, #92]	; (8000284 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000226:	b530      	push	{r4, r5, lr}
 8000228:	68dc      	ldr	r4, [r3, #12]
 800022a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800022e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000232:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000234:	2b04      	cmp	r3, #4
 8000236:	bf28      	it	cs
 8000238:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800023a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800023c:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000240:	bf98      	it	ls
 8000242:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000244:	fa05 f303 	lsl.w	r3, r5, r3
 8000248:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800024c:	bf88      	it	hi
 800024e:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000250:	4019      	ands	r1, r3
 8000252:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000254:	fa05 f404 	lsl.w	r4, r5, r4
 8000258:	3c01      	subs	r4, #1
 800025a:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 800025c:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800025e:	ea42 0201 	orr.w	r2, r2, r1
 8000262:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000266:	bfaf      	iteee	ge
 8000268:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800026c:	4b06      	ldrlt	r3, [pc, #24]	; (8000288 <HAL_NVIC_SetPriority+0x64>)
 800026e:	f000 000f 	andlt.w	r0, r0, #15
 8000272:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000274:	bfa5      	ittet	ge
 8000276:	b2d2      	uxtbge	r2, r2
 8000278:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800027c:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800027e:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000282:	bd30      	pop	{r4, r5, pc}
 8000284:	e000ed00 	.word	0xe000ed00
 8000288:	e000ed14 	.word	0xe000ed14

0800028c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800028c:	3801      	subs	r0, #1
 800028e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000292:	d20a      	bcs.n	80002aa <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000294:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000296:	4b06      	ldr	r3, [pc, #24]	; (80002b0 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000298:	4a06      	ldr	r2, [pc, #24]	; (80002b4 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800029a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800029c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002a0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002a2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002a4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002a6:	601a      	str	r2, [r3, #0]
 80002a8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80002aa:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop
 80002b0:	e000e010 	.word	0xe000e010
 80002b4:	e000ed00 	.word	0xe000ed00

080002b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80002b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 80002bc:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80002be:	4616      	mov	r6, r2
 80002c0:	4b65      	ldr	r3, [pc, #404]	; (8000458 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80002c2:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8000468 <HAL_GPIO_Init+0x1b0>
 80002c6:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 800046c <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 80002ca:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80002ce:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 80002d0:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80002d4:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 80002d8:	45a0      	cmp	r8, r4
 80002da:	d17f      	bne.n	80003dc <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 80002dc:	684d      	ldr	r5, [r1, #4]
 80002de:	2d12      	cmp	r5, #18
 80002e0:	f000 80af 	beq.w	8000442 <HAL_GPIO_Init+0x18a>
 80002e4:	f200 8088 	bhi.w	80003f8 <HAL_GPIO_Init+0x140>
 80002e8:	2d02      	cmp	r5, #2
 80002ea:	f000 80a7 	beq.w	800043c <HAL_GPIO_Init+0x184>
 80002ee:	d87c      	bhi.n	80003ea <HAL_GPIO_Init+0x132>
 80002f0:	2d00      	cmp	r5, #0
 80002f2:	f000 808e 	beq.w	8000412 <HAL_GPIO_Init+0x15a>
 80002f6:	2d01      	cmp	r5, #1
 80002f8:	f000 809e 	beq.w	8000438 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80002fc:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000300:	2cff      	cmp	r4, #255	; 0xff
 8000302:	bf93      	iteet	ls
 8000304:	4682      	movls	sl, r0
 8000306:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 800030a:	3d08      	subhi	r5, #8
 800030c:	f8d0 b000 	ldrls.w	fp, [r0]
 8000310:	bf92      	itee	ls
 8000312:	00b5      	lslls	r5, r6, #2
 8000314:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000318:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800031a:	fa09 f805 	lsl.w	r8, r9, r5
 800031e:	ea2b 0808 	bic.w	r8, fp, r8
 8000322:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000326:	bf88      	it	hi
 8000328:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800032c:	ea48 0505 	orr.w	r5, r8, r5
 8000330:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000334:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000338:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 800033c:	d04e      	beq.n	80003dc <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800033e:	4d47      	ldr	r5, [pc, #284]	; (800045c <HAL_GPIO_Init+0x1a4>)
 8000340:	4f46      	ldr	r7, [pc, #280]	; (800045c <HAL_GPIO_Init+0x1a4>)
 8000342:	69ad      	ldr	r5, [r5, #24]
 8000344:	f026 0803 	bic.w	r8, r6, #3
 8000348:	f045 0501 	orr.w	r5, r5, #1
 800034c:	61bd      	str	r5, [r7, #24]
 800034e:	69bd      	ldr	r5, [r7, #24]
 8000350:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000354:	f005 0501 	and.w	r5, r5, #1
 8000358:	9501      	str	r5, [sp, #4]
 800035a:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800035e:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000362:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000364:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8000368:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800036c:	fa09 f90b 	lsl.w	r9, r9, fp
 8000370:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000374:	4d3a      	ldr	r5, [pc, #232]	; (8000460 <HAL_GPIO_Init+0x1a8>)
 8000376:	42a8      	cmp	r0, r5
 8000378:	d068      	beq.n	800044c <HAL_GPIO_Init+0x194>
 800037a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800037e:	42a8      	cmp	r0, r5
 8000380:	d066      	beq.n	8000450 <HAL_GPIO_Init+0x198>
 8000382:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000386:	42a8      	cmp	r0, r5
 8000388:	d064      	beq.n	8000454 <HAL_GPIO_Init+0x19c>
 800038a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800038e:	42a8      	cmp	r0, r5
 8000390:	bf0c      	ite	eq
 8000392:	2503      	moveq	r5, #3
 8000394:	2504      	movne	r5, #4
 8000396:	fa05 f50b 	lsl.w	r5, r5, fp
 800039a:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 800039e:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80003a2:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80003a4:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80003a8:	bf14      	ite	ne
 80003aa:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80003ac:	43a5      	biceq	r5, r4
 80003ae:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80003b0:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80003b2:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80003b6:	bf14      	ite	ne
 80003b8:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80003ba:	43a5      	biceq	r5, r4
 80003bc:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80003be:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80003c0:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80003c4:	bf14      	ite	ne
 80003c6:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80003c8:	43a5      	biceq	r5, r4
 80003ca:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80003cc:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80003ce:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80003d2:	bf14      	ite	ne
 80003d4:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80003d6:	ea25 0404 	biceq.w	r4, r5, r4
 80003da:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 80003dc:	3601      	adds	r6, #1
 80003de:	2e10      	cmp	r6, #16
 80003e0:	f47f af73 	bne.w	80002ca <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 80003e4:	b003      	add	sp, #12
 80003e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 80003ea:	2d03      	cmp	r5, #3
 80003ec:	d022      	beq.n	8000434 <HAL_GPIO_Init+0x17c>
 80003ee:	2d11      	cmp	r5, #17
 80003f0:	d184      	bne.n	80002fc <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80003f2:	68ca      	ldr	r2, [r1, #12]
 80003f4:	3204      	adds	r2, #4
          break;
 80003f6:	e781      	b.n	80002fc <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 80003f8:	4f1a      	ldr	r7, [pc, #104]	; (8000464 <HAL_GPIO_Init+0x1ac>)
 80003fa:	42bd      	cmp	r5, r7
 80003fc:	d009      	beq.n	8000412 <HAL_GPIO_Init+0x15a>
 80003fe:	d812      	bhi.n	8000426 <HAL_GPIO_Init+0x16e>
 8000400:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8000470 <HAL_GPIO_Init+0x1b8>
 8000404:	454d      	cmp	r5, r9
 8000406:	d004      	beq.n	8000412 <HAL_GPIO_Init+0x15a>
 8000408:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 800040c:	454d      	cmp	r5, r9
 800040e:	f47f af75 	bne.w	80002fc <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000412:	688a      	ldr	r2, [r1, #8]
 8000414:	b1c2      	cbz	r2, 8000448 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000416:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8000418:	bf0c      	ite	eq
 800041a:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 800041e:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000422:	2208      	movs	r2, #8
 8000424:	e76a      	b.n	80002fc <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8000426:	4575      	cmp	r5, lr
 8000428:	d0f3      	beq.n	8000412 <HAL_GPIO_Init+0x15a>
 800042a:	4565      	cmp	r5, ip
 800042c:	d0f1      	beq.n	8000412 <HAL_GPIO_Init+0x15a>
 800042e:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8000474 <HAL_GPIO_Init+0x1bc>
 8000432:	e7eb      	b.n	800040c <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000434:	2200      	movs	r2, #0
 8000436:	e761      	b.n	80002fc <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000438:	68ca      	ldr	r2, [r1, #12]
          break;
 800043a:	e75f      	b.n	80002fc <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800043c:	68ca      	ldr	r2, [r1, #12]
 800043e:	3208      	adds	r2, #8
          break;
 8000440:	e75c      	b.n	80002fc <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000442:	68ca      	ldr	r2, [r1, #12]
 8000444:	320c      	adds	r2, #12
          break;
 8000446:	e759      	b.n	80002fc <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000448:	2204      	movs	r2, #4
 800044a:	e757      	b.n	80002fc <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800044c:	2500      	movs	r5, #0
 800044e:	e7a2      	b.n	8000396 <HAL_GPIO_Init+0xde>
 8000450:	2501      	movs	r5, #1
 8000452:	e7a0      	b.n	8000396 <HAL_GPIO_Init+0xde>
 8000454:	2502      	movs	r5, #2
 8000456:	e79e      	b.n	8000396 <HAL_GPIO_Init+0xde>
 8000458:	40010400 	.word	0x40010400
 800045c:	40021000 	.word	0x40021000
 8000460:	40010800 	.word	0x40010800
 8000464:	10210000 	.word	0x10210000
 8000468:	10310000 	.word	0x10310000
 800046c:	10320000 	.word	0x10320000
 8000470:	10110000 	.word	0x10110000
 8000474:	10220000 	.word	0x10220000

08000478 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000478:	b10a      	cbz	r2, 800047e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800047a:	6101      	str	r1, [r0, #16]
 800047c:	4770      	bx	lr
 800047e:	0409      	lsls	r1, r1, #16
 8000480:	e7fb      	b.n	800047a <HAL_GPIO_WritePin+0x2>

08000482 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000482:	6802      	ldr	r2, [r0, #0]
 8000484:	6953      	ldr	r3, [r2, #20]
 8000486:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 800048a:	d00d      	beq.n	80004a8 <I2C_IsAcknowledgeFailed+0x26>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800048c:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8000490:	6153      	str	r3, [r2, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8000492:	2304      	movs	r3, #4
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->State= HAL_I2C_STATE_READY;
 8000494:	2220      	movs	r2, #32
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8000496:	6403      	str	r3, [r0, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 8000498:	2300      	movs	r3, #0
 800049a:	6303      	str	r3, [r0, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800049c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    hi2c->State= HAL_I2C_STATE_READY;
 80004a0:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

    return HAL_ERROR;
 80004a4:	2001      	movs	r0, #1
 80004a6:	4770      	bx	lr
  }
  return HAL_OK;
 80004a8:	4618      	mov	r0, r3
}
 80004aa:	4770      	bx	lr

080004ac <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 80004ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80004b0:	4604      	mov	r4, r0
 80004b2:	4617      	mov	r7, r2
 80004b4:	4699      	mov	r9, r3
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80004b6:	f3c1 4807 	ubfx	r8, r1, #16, #8
 80004ba:	b28e      	uxth	r6, r1
 80004bc:	6825      	ldr	r5, [r4, #0]
 80004be:	f1b8 0f01 	cmp.w	r8, #1
 80004c2:	bf0c      	ite	eq
 80004c4:	696b      	ldreq	r3, [r5, #20]
 80004c6:	69ab      	ldrne	r3, [r5, #24]
 80004c8:	ea36 0303 	bics.w	r3, r6, r3
 80004cc:	bf14      	ite	ne
 80004ce:	2001      	movne	r0, #1
 80004d0:	2000      	moveq	r0, #0
 80004d2:	b908      	cbnz	r0, 80004d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>
}
 80004d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80004d8:	696b      	ldr	r3, [r5, #20]
 80004da:	055a      	lsls	r2, r3, #21
 80004dc:	d512      	bpl.n	8000504 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x58>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80004de:	682b      	ldr	r3, [r5, #0]
      hi2c->State= HAL_I2C_STATE_READY;
 80004e0:	2220      	movs	r2, #32
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80004e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004e6:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80004e8:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 80004ec:	616b      	str	r3, [r5, #20]
      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80004ee:	2304      	movs	r3, #4
 80004f0:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 80004f2:	2300      	movs	r3, #0
      return HAL_ERROR;
 80004f4:	2001      	movs	r0, #1
      hi2c->PreviousState = I2C_STATE_NONE;
 80004f6:	6323      	str	r3, [r4, #48]	; 0x30
      __HAL_UNLOCK(hi2c);
 80004f8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->State= HAL_I2C_STATE_READY;
 80004fc:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 8000500:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 8000504:	1c7b      	adds	r3, r7, #1
 8000506:	d0d9      	beq.n	80004bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000508:	b94f      	cbnz	r7, 800051e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x72>
        hi2c->PreviousState = I2C_STATE_NONE;
 800050a:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 800050c:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 800050e:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8000510:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8000514:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        return HAL_TIMEOUT;
 8000518:	2003      	movs	r0, #3
 800051a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800051e:	f7ff fe57 	bl	80001d0 <HAL_GetTick>
 8000522:	eba0 0009 	sub.w	r0, r0, r9
 8000526:	4287      	cmp	r7, r0
 8000528:	d2c8      	bcs.n	80004bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 800052a:	e7ee      	b.n	800050a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>

0800052c <I2C_WaitOnFlagUntilTimeout>:
{
 800052c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000530:	4604      	mov	r4, r0
 8000532:	4690      	mov	r8, r2
 8000534:	461f      	mov	r7, r3
 8000536:	9e08      	ldr	r6, [sp, #32]
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8000538:	f3c1 4907 	ubfx	r9, r1, #16, #8
 800053c:	b28d      	uxth	r5, r1
 800053e:	6823      	ldr	r3, [r4, #0]
 8000540:	f1b9 0f01 	cmp.w	r9, #1
 8000544:	bf0c      	ite	eq
 8000546:	695b      	ldreq	r3, [r3, #20]
 8000548:	699b      	ldrne	r3, [r3, #24]
 800054a:	ea35 0303 	bics.w	r3, r5, r3
 800054e:	bf0c      	ite	eq
 8000550:	2301      	moveq	r3, #1
 8000552:	2300      	movne	r3, #0
 8000554:	4543      	cmp	r3, r8
 8000556:	d002      	beq.n	800055e <I2C_WaitOnFlagUntilTimeout+0x32>
  return HAL_OK;
 8000558:	2000      	movs	r0, #0
}
 800055a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 800055e:	1c7b      	adds	r3, r7, #1
 8000560:	d0ed      	beq.n	800053e <I2C_WaitOnFlagUntilTimeout+0x12>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000562:	b95f      	cbnz	r7, 800057c <I2C_WaitOnFlagUntilTimeout+0x50>
        hi2c->PreviousState = I2C_STATE_NONE;
 8000564:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 8000566:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8000568:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 800056a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 800056e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8000572:	2003      	movs	r0, #3
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000574:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8000578:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800057c:	f7ff fe28 	bl	80001d0 <HAL_GetTick>
 8000580:	1b80      	subs	r0, r0, r6
 8000582:	4287      	cmp	r7, r0
 8000584:	d2db      	bcs.n	800053e <I2C_WaitOnFlagUntilTimeout+0x12>
 8000586:	e7ed      	b.n	8000564 <I2C_WaitOnFlagUntilTimeout+0x38>

08000588 <I2C_WaitOnTXEFlagUntilTimeout>:
{    
 8000588:	b570      	push	{r4, r5, r6, lr}
 800058a:	4604      	mov	r4, r0
 800058c:	460d      	mov	r5, r1
 800058e:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000590:	6823      	ldr	r3, [r4, #0]
 8000592:	695b      	ldr	r3, [r3, #20]
 8000594:	061b      	lsls	r3, r3, #24
 8000596:	d501      	bpl.n	800059c <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;      
 8000598:	2000      	movs	r0, #0
 800059a:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800059c:	4620      	mov	r0, r4
 800059e:	f7ff ff70 	bl	8000482 <I2C_IsAcknowledgeFailed>
 80005a2:	b9a8      	cbnz	r0, 80005d0 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 80005a4:	1c6a      	adds	r2, r5, #1
 80005a6:	d0f3      	beq.n	8000590 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80005a8:	b965      	cbnz	r5, 80005c4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80005aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 80005ac:	2220      	movs	r2, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80005ae:	f043 0320 	orr.w	r3, r3, #32
 80005b2:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 80005b4:	2300      	movs	r3, #0
        __HAL_UNLOCK(hi2c);
 80005b6:	2003      	movs	r0, #3
        hi2c->PreviousState = I2C_STATE_NONE;
 80005b8:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 80005ba:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 80005be:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 80005c2:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80005c4:	f7ff fe04 	bl	80001d0 <HAL_GetTick>
 80005c8:	1b80      	subs	r0, r0, r6
 80005ca:	4285      	cmp	r5, r0
 80005cc:	d2e0      	bcs.n	8000590 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
 80005ce:	e7ec      	b.n	80005aa <I2C_WaitOnTXEFlagUntilTimeout+0x22>
      return HAL_ERROR;
 80005d0:	2001      	movs	r0, #1
}
 80005d2:	bd70      	pop	{r4, r5, r6, pc}

080005d4 <I2C_WaitOnBTFFlagUntilTimeout>:
{  
 80005d4:	b570      	push	{r4, r5, r6, lr}
 80005d6:	4604      	mov	r4, r0
 80005d8:	460d      	mov	r5, r1
 80005da:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80005dc:	6823      	ldr	r3, [r4, #0]
 80005de:	695b      	ldr	r3, [r3, #20]
 80005e0:	075b      	lsls	r3, r3, #29
 80005e2:	d501      	bpl.n	80005e8 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 80005e4:	2000      	movs	r0, #0
 80005e6:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80005e8:	4620      	mov	r0, r4
 80005ea:	f7ff ff4a 	bl	8000482 <I2C_IsAcknowledgeFailed>
 80005ee:	b9a8      	cbnz	r0, 800061c <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 80005f0:	1c6a      	adds	r2, r5, #1
 80005f2:	d0f3      	beq.n	80005dc <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80005f4:	b965      	cbnz	r5, 8000610 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80005f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 80005f8:	2220      	movs	r2, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80005fa:	f043 0320 	orr.w	r3, r3, #32
 80005fe:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8000600:	2300      	movs	r3, #0
        __HAL_UNLOCK(hi2c);
 8000602:	2003      	movs	r0, #3
        hi2c->PreviousState = I2C_STATE_NONE;
 8000604:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8000606:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 800060a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 800060e:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8000610:	f7ff fdde 	bl	80001d0 <HAL_GetTick>
 8000614:	1b80      	subs	r0, r0, r6
 8000616:	4285      	cmp	r5, r0
 8000618:	d2e0      	bcs.n	80005dc <I2C_WaitOnBTFFlagUntilTimeout+0x8>
 800061a:	e7ec      	b.n	80005f6 <I2C_WaitOnBTFFlagUntilTimeout+0x22>
      return HAL_ERROR;
 800061c:	2001      	movs	r0, #1
}
 800061e:	bd70      	pop	{r4, r5, r6, pc}

08000620 <HAL_I2C_Init>:
{
 8000620:	b538      	push	{r3, r4, r5, lr}
  if(hi2c == NULL)
 8000622:	4604      	mov	r4, r0
 8000624:	b908      	cbnz	r0, 800062a <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 8000626:	2001      	movs	r0, #1
 8000628:	bd38      	pop	{r3, r4, r5, pc}
  if(hi2c->State == HAL_I2C_STATE_RESET)
 800062a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800062e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000632:	b91b      	cbnz	r3, 800063c <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8000634:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8000638:	f000 fd3e 	bl	80010b8 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800063c:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 800063e:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000640:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8000644:	6813      	ldr	r3, [r2, #0]
 8000646:	f023 0301 	bic.w	r3, r3, #1
 800064a:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800064c:	f000 fbb8 	bl	8000dc0 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000650:	6863      	ldr	r3, [r4, #4]
 8000652:	4a2f      	ldr	r2, [pc, #188]	; (8000710 <HAL_I2C_Init+0xf0>)
 8000654:	4293      	cmp	r3, r2
 8000656:	d830      	bhi.n	80006ba <HAL_I2C_Init+0x9a>
 8000658:	4a2e      	ldr	r2, [pc, #184]	; (8000714 <HAL_I2C_Init+0xf4>)
 800065a:	4290      	cmp	r0, r2
 800065c:	d9e3      	bls.n	8000626 <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 800065e:	4a2e      	ldr	r2, [pc, #184]	; (8000718 <HAL_I2C_Init+0xf8>)
  hi2c->Instance->CR2 = freqrange;
 8000660:	6821      	ldr	r1, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8000662:	fbb0 f2f2 	udiv	r2, r0, r2
  hi2c->Instance->CR2 = freqrange;
 8000666:	604a      	str	r2, [r1, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000668:	3201      	adds	r2, #1
 800066a:	620a      	str	r2, [r1, #32]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 800066c:	4a28      	ldr	r2, [pc, #160]	; (8000710 <HAL_I2C_Init+0xf0>)
 800066e:	3801      	subs	r0, #1
 8000670:	4293      	cmp	r3, r2
 8000672:	d832      	bhi.n	80006da <HAL_I2C_Init+0xba>
 8000674:	005b      	lsls	r3, r3, #1
 8000676:	fbb0 f0f3 	udiv	r0, r0, r3
 800067a:	1c43      	adds	r3, r0, #1
 800067c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000680:	2b04      	cmp	r3, #4
 8000682:	bf38      	it	cc
 8000684:	2304      	movcc	r3, #4
 8000686:	61cb      	str	r3, [r1, #28]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000688:	6a22      	ldr	r2, [r4, #32]
 800068a:	69e3      	ldr	r3, [r4, #28]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800068c:	2000      	movs	r0, #0
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800068e:	4313      	orrs	r3, r2
 8000690:	600b      	str	r3, [r1, #0]
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8000692:	68e2      	ldr	r2, [r4, #12]
 8000694:	6923      	ldr	r3, [r4, #16]
 8000696:	4313      	orrs	r3, r2
 8000698:	608b      	str	r3, [r1, #8]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 800069a:	69a2      	ldr	r2, [r4, #24]
 800069c:	6963      	ldr	r3, [r4, #20]
 800069e:	4313      	orrs	r3, r2
 80006a0:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 80006a2:	680b      	ldr	r3, [r1, #0]
 80006a4:	f043 0301 	orr.w	r3, r3, #1
 80006a8:	600b      	str	r3, [r1, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80006aa:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80006ac:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80006ae:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80006b2:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80006b4:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 80006b8:	bd38      	pop	{r3, r4, r5, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80006ba:	4a18      	ldr	r2, [pc, #96]	; (800071c <HAL_I2C_Init+0xfc>)
 80006bc:	4290      	cmp	r0, r2
 80006be:	d9b2      	bls.n	8000626 <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 80006c0:	4d15      	ldr	r5, [pc, #84]	; (8000718 <HAL_I2C_Init+0xf8>)
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80006c2:	f44f 7296 	mov.w	r2, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 80006c6:	fbb0 f5f5 	udiv	r5, r0, r5
  hi2c->Instance->CR2 = freqrange;
 80006ca:	6821      	ldr	r1, [r4, #0]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80006cc:	436a      	muls	r2, r5
  hi2c->Instance->CR2 = freqrange;
 80006ce:	604d      	str	r5, [r1, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80006d0:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 80006d4:	fbb2 f2f5 	udiv	r2, r2, r5
 80006d8:	e7c6      	b.n	8000668 <HAL_I2C_Init+0x48>
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80006da:	68a2      	ldr	r2, [r4, #8]
 80006dc:	b952      	cbnz	r2, 80006f4 <HAL_I2C_Init+0xd4>
 80006de:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80006e2:	fbb0 f0f3 	udiv	r0, r0, r3
 80006e6:	1c43      	adds	r3, r0, #1
 80006e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80006ec:	b16b      	cbz	r3, 800070a <HAL_I2C_Init+0xea>
 80006ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006f2:	e7c8      	b.n	8000686 <HAL_I2C_Init+0x66>
 80006f4:	2219      	movs	r2, #25
 80006f6:	4353      	muls	r3, r2
 80006f8:	fbb0 f0f3 	udiv	r0, r0, r3
 80006fc:	1c43      	adds	r3, r0, #1
 80006fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000702:	b113      	cbz	r3, 800070a <HAL_I2C_Init+0xea>
 8000704:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000708:	e7bd      	b.n	8000686 <HAL_I2C_Init+0x66>
 800070a:	2301      	movs	r3, #1
 800070c:	e7bb      	b.n	8000686 <HAL_I2C_Init+0x66>
 800070e:	bf00      	nop
 8000710:	000186a0 	.word	0x000186a0
 8000714:	001e847f 	.word	0x001e847f
 8000718:	000f4240 	.word	0x000f4240
 800071c:	003d08ff 	.word	0x003d08ff

08000720 <HAL_I2C_Master_Transmit>:
{
 8000720:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8000724:	4604      	mov	r4, r0
 8000726:	461f      	mov	r7, r3
 8000728:	460d      	mov	r5, r1
 800072a:	4690      	mov	r8, r2
  tickstart = HAL_GetTick();
 800072c:	f7ff fd50 	bl	80001d0 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8000730:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  tickstart = HAL_GetTick();
 8000734:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 8000736:	2b20      	cmp	r3, #32
 8000738:	d004      	beq.n	8000744 <HAL_I2C_Master_Transmit+0x24>
    return HAL_BUSY;
 800073a:	2502      	movs	r5, #2
}
 800073c:	4628      	mov	r0, r5
 800073e:	b004      	add	sp, #16
 8000740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000744:	9000      	str	r0, [sp, #0]
 8000746:	2319      	movs	r3, #25
 8000748:	2201      	movs	r2, #1
 800074a:	495d      	ldr	r1, [pc, #372]	; (80008c0 <HAL_I2C_Master_Transmit+0x1a0>)
 800074c:	4620      	mov	r0, r4
 800074e:	f7ff feed 	bl	800052c <I2C_WaitOnFlagUntilTimeout>
 8000752:	2800      	cmp	r0, #0
 8000754:	d1f1      	bne.n	800073a <HAL_I2C_Master_Transmit+0x1a>
    __HAL_LOCK(hi2c);
 8000756:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800075a:	2b01      	cmp	r3, #1
 800075c:	d0ed      	beq.n	800073a <HAL_I2C_Master_Transmit+0x1a>
 800075e:	2301      	movs	r3, #1
 8000760:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000764:	6823      	ldr	r3, [r4, #0]
 8000766:	681a      	ldr	r2, [r3, #0]
 8000768:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 800076a:	bf5e      	ittt	pl
 800076c:	681a      	ldrpl	r2, [r3, #0]
 800076e:	f042 0201 	orrpl.w	r2, r2, #1
 8000772:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8000774:	681a      	ldr	r2, [r3, #0]
 8000776:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800077a:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800077c:	2221      	movs	r2, #33	; 0x21
 800077e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000782:	2210      	movs	r2, #16
 8000784:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000788:	2200      	movs	r2, #0
 800078a:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800078c:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
    hi2c->XferCount   = Size;
 8000790:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000792:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8000794:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 8000796:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 800079a:	8522      	strh	r2, [r4, #40]	; 0x28
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800079c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800079e:	2a04      	cmp	r2, #4
 80007a0:	d004      	beq.n	80007ac <HAL_I2C_Master_Transmit+0x8c>
 80007a2:	2a01      	cmp	r2, #1
 80007a4:	d002      	beq.n	80007ac <HAL_I2C_Master_Transmit+0x8c>
 80007a6:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 80007aa:	d104      	bne.n	80007b6 <HAL_I2C_Master_Transmit+0x96>
    hi2c->Instance->CR1 |= I2C_CR1_START;
 80007ac:	681a      	ldr	r2, [r3, #0]
 80007ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	e002      	b.n	80007bc <HAL_I2C_Master_Transmit+0x9c>
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80007b6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80007b8:	2a12      	cmp	r2, #18
 80007ba:	d0f7      	beq.n	80007ac <HAL_I2C_Master_Transmit+0x8c>
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80007bc:	9600      	str	r6, [sp, #0]
 80007be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80007c0:	2200      	movs	r2, #0
 80007c2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80007c6:	4620      	mov	r0, r4
 80007c8:	f7ff feb0 	bl	800052c <I2C_WaitOnFlagUntilTimeout>
 80007cc:	bb28      	cbnz	r0, 800081a <HAL_I2C_Master_Transmit+0xfa>
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80007ce:	6923      	ldr	r3, [r4, #16]
 80007d0:	6822      	ldr	r2, [r4, #0]
 80007d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80007d6:	d112      	bne.n	80007fe <HAL_I2C_Master_Transmit+0xde>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80007d8:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 80007dc:	6115      	str	r5, [r2, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80007de:	4633      	mov	r3, r6
 80007e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80007e2:	4938      	ldr	r1, [pc, #224]	; (80008c4 <HAL_I2C_Master_Transmit+0x1a4>)
 80007e4:	4620      	mov	r0, r4
 80007e6:	f7ff fe61 	bl	80004ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80007ea:	4605      	mov	r5, r0
 80007ec:	b9a0      	cbnz	r0, 8000818 <HAL_I2C_Master_Transmit+0xf8>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80007ee:	6823      	ldr	r3, [r4, #0]
 80007f0:	9003      	str	r0, [sp, #12]
 80007f2:	695a      	ldr	r2, [r3, #20]
 80007f4:	9203      	str	r2, [sp, #12]
 80007f6:	699b      	ldr	r3, [r3, #24]
 80007f8:	9303      	str	r3, [sp, #12]
 80007fa:	9b03      	ldr	r3, [sp, #12]
    while(hi2c->XferSize > 0U)
 80007fc:	e050      	b.n	80008a0 <HAL_I2C_Master_Transmit+0x180>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80007fe:	11eb      	asrs	r3, r5, #7
 8000800:	f003 0306 	and.w	r3, r3, #6
 8000804:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8000808:	6113      	str	r3, [r2, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800080a:	492f      	ldr	r1, [pc, #188]	; (80008c8 <HAL_I2C_Master_Transmit+0x1a8>)
 800080c:	4633      	mov	r3, r6
 800080e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8000810:	4620      	mov	r0, r4
 8000812:	f7ff fe4b 	bl	80004ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000816:	b148      	cbz	r0, 800082c <HAL_I2C_Master_Transmit+0x10c>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000818:	6c23      	ldr	r3, [r4, #64]	; 0x40
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800081a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800081c:	2b04      	cmp	r3, #4
 800081e:	f04f 0300 	mov.w	r3, #0
 8000822:	d107      	bne.n	8000834 <HAL_I2C_Master_Transmit+0x114>
        __HAL_UNLOCK(hi2c);
 8000824:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_ERROR;
 8000828:	2501      	movs	r5, #1
 800082a:	e787      	b.n	800073c <HAL_I2C_Master_Transmit+0x1c>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800082c:	6823      	ldr	r3, [r4, #0]
 800082e:	b2ed      	uxtb	r5, r5
 8000830:	611d      	str	r5, [r3, #16]
 8000832:	e7d4      	b.n	80007de <HAL_I2C_Master_Transmit+0xbe>
        __HAL_UNLOCK(hi2c);
 8000834:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_TIMEOUT;
 8000838:	2503      	movs	r5, #3
 800083a:	e77f      	b.n	800073c <HAL_I2C_Master_Transmit+0x1c>
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800083c:	4632      	mov	r2, r6
 800083e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8000840:	4620      	mov	r0, r4
 8000842:	f7ff fea1 	bl	8000588 <I2C_WaitOnTXEFlagUntilTimeout>
 8000846:	b140      	cbz	r0, 800085a <HAL_I2C_Master_Transmit+0x13a>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000848:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800084a:	2b04      	cmp	r3, #4
 800084c:	d1f4      	bne.n	8000838 <HAL_I2C_Master_Transmit+0x118>
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800084e:	6822      	ldr	r2, [r4, #0]
 8000850:	6813      	ldr	r3, [r2, #0]
 8000852:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000856:	6013      	str	r3, [r2, #0]
 8000858:	e7e6      	b.n	8000828 <HAL_I2C_Master_Transmit+0x108>
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 800085a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800085c:	6820      	ldr	r0, [r4, #0]
 800085e:	1c4b      	adds	r3, r1, #1
 8000860:	6263      	str	r3, [r4, #36]	; 0x24
 8000862:	780b      	ldrb	r3, [r1, #0]
      hi2c->XferSize--;
 8000864:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8000866:	6103      	str	r3, [r0, #16]
      hi2c->XferCount--;
 8000868:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800086a:	3b01      	subs	r3, #1
 800086c:	b29b      	uxth	r3, r3
 800086e:	8563      	strh	r3, [r4, #42]	; 0x2a
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000870:	6947      	ldr	r7, [r0, #20]
      hi2c->XferSize--;
 8000872:	1e53      	subs	r3, r2, #1
 8000874:	b29b      	uxth	r3, r3
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000876:	077f      	lsls	r7, r7, #29
      hi2c->XferSize--;
 8000878:	8523      	strh	r3, [r4, #40]	; 0x28
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800087a:	d50a      	bpl.n	8000892 <HAL_I2C_Master_Transmit+0x172>
 800087c:	b14b      	cbz	r3, 8000892 <HAL_I2C_Master_Transmit+0x172>
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 800087e:	1c8b      	adds	r3, r1, #2
 8000880:	6263      	str	r3, [r4, #36]	; 0x24
 8000882:	784b      	ldrb	r3, [r1, #1]
        hi2c->XferSize--;
 8000884:	3a02      	subs	r2, #2
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8000886:	6103      	str	r3, [r0, #16]
        hi2c->XferCount--;
 8000888:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 800088a:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->XferCount--;
 800088c:	3b01      	subs	r3, #1
 800088e:	b29b      	uxth	r3, r3
 8000890:	8563      	strh	r3, [r4, #42]	; 0x2a
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000892:	4632      	mov	r2, r6
 8000894:	990a      	ldr	r1, [sp, #40]	; 0x28
 8000896:	4620      	mov	r0, r4
 8000898:	f7ff fe9c 	bl	80005d4 <I2C_WaitOnBTFFlagUntilTimeout>
 800089c:	2800      	cmp	r0, #0
 800089e:	d1d3      	bne.n	8000848 <HAL_I2C_Master_Transmit+0x128>
    while(hi2c->XferSize > 0U)
 80008a0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d1ca      	bne.n	800083c <HAL_I2C_Master_Transmit+0x11c>
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80008a6:	6821      	ldr	r1, [r4, #0]
 80008a8:	680a      	ldr	r2, [r1, #0]
 80008aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80008ae:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80008b0:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 80008b2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 80008b6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80008ba:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 80008be:	e73d      	b.n	800073c <HAL_I2C_Master_Transmit+0x1c>
 80008c0:	00100002 	.word	0x00100002
 80008c4:	00010002 	.word	0x00010002
 80008c8:	00010008 	.word	0x00010008

080008cc <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80008cc:	6803      	ldr	r3, [r0, #0]
{
 80008ce:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80008d2:	07db      	lsls	r3, r3, #31
{
 80008d4:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80008d6:	d410      	bmi.n	80008fa <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80008d8:	682b      	ldr	r3, [r5, #0]
 80008da:	079f      	lsls	r7, r3, #30
 80008dc:	d45e      	bmi.n	800099c <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80008de:	682b      	ldr	r3, [r5, #0]
 80008e0:	0719      	lsls	r1, r3, #28
 80008e2:	f100 8095 	bmi.w	8000a10 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80008e6:	682b      	ldr	r3, [r5, #0]
 80008e8:	075a      	lsls	r2, r3, #29
 80008ea:	f100 80bf 	bmi.w	8000a6c <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80008ee:	69ea      	ldr	r2, [r5, #28]
 80008f0:	2a00      	cmp	r2, #0
 80008f2:	f040 812d 	bne.w	8000b50 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80008f6:	2000      	movs	r0, #0
 80008f8:	e014      	b.n	8000924 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80008fa:	4c90      	ldr	r4, [pc, #576]	; (8000b3c <HAL_RCC_OscConfig+0x270>)
 80008fc:	6863      	ldr	r3, [r4, #4]
 80008fe:	f003 030c 	and.w	r3, r3, #12
 8000902:	2b04      	cmp	r3, #4
 8000904:	d007      	beq.n	8000916 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000906:	6863      	ldr	r3, [r4, #4]
 8000908:	f003 030c 	and.w	r3, r3, #12
 800090c:	2b08      	cmp	r3, #8
 800090e:	d10c      	bne.n	800092a <HAL_RCC_OscConfig+0x5e>
 8000910:	6863      	ldr	r3, [r4, #4]
 8000912:	03de      	lsls	r6, r3, #15
 8000914:	d509      	bpl.n	800092a <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000916:	6823      	ldr	r3, [r4, #0]
 8000918:	039c      	lsls	r4, r3, #14
 800091a:	d5dd      	bpl.n	80008d8 <HAL_RCC_OscConfig+0xc>
 800091c:	686b      	ldr	r3, [r5, #4]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d1da      	bne.n	80008d8 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000922:	2001      	movs	r0, #1
}
 8000924:	b002      	add	sp, #8
 8000926:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800092a:	686b      	ldr	r3, [r5, #4]
 800092c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000930:	d110      	bne.n	8000954 <HAL_RCC_OscConfig+0x88>
 8000932:	6823      	ldr	r3, [r4, #0]
 8000934:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000938:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800093a:	f7ff fc49 	bl	80001d0 <HAL_GetTick>
 800093e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000940:	6823      	ldr	r3, [r4, #0]
 8000942:	0398      	lsls	r0, r3, #14
 8000944:	d4c8      	bmi.n	80008d8 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000946:	f7ff fc43 	bl	80001d0 <HAL_GetTick>
 800094a:	1b80      	subs	r0, r0, r6
 800094c:	2864      	cmp	r0, #100	; 0x64
 800094e:	d9f7      	bls.n	8000940 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8000950:	2003      	movs	r0, #3
 8000952:	e7e7      	b.n	8000924 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000954:	b99b      	cbnz	r3, 800097e <HAL_RCC_OscConfig+0xb2>
 8000956:	6823      	ldr	r3, [r4, #0]
 8000958:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800095c:	6023      	str	r3, [r4, #0]
 800095e:	6823      	ldr	r3, [r4, #0]
 8000960:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000964:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000966:	f7ff fc33 	bl	80001d0 <HAL_GetTick>
 800096a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800096c:	6823      	ldr	r3, [r4, #0]
 800096e:	0399      	lsls	r1, r3, #14
 8000970:	d5b2      	bpl.n	80008d8 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000972:	f7ff fc2d 	bl	80001d0 <HAL_GetTick>
 8000976:	1b80      	subs	r0, r0, r6
 8000978:	2864      	cmp	r0, #100	; 0x64
 800097a:	d9f7      	bls.n	800096c <HAL_RCC_OscConfig+0xa0>
 800097c:	e7e8      	b.n	8000950 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800097e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000982:	6823      	ldr	r3, [r4, #0]
 8000984:	d103      	bne.n	800098e <HAL_RCC_OscConfig+0xc2>
 8000986:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800098a:	6023      	str	r3, [r4, #0]
 800098c:	e7d1      	b.n	8000932 <HAL_RCC_OscConfig+0x66>
 800098e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000992:	6023      	str	r3, [r4, #0]
 8000994:	6823      	ldr	r3, [r4, #0]
 8000996:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800099a:	e7cd      	b.n	8000938 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800099c:	4c67      	ldr	r4, [pc, #412]	; (8000b3c <HAL_RCC_OscConfig+0x270>)
 800099e:	6863      	ldr	r3, [r4, #4]
 80009a0:	f013 0f0c 	tst.w	r3, #12
 80009a4:	d007      	beq.n	80009b6 <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80009a6:	6863      	ldr	r3, [r4, #4]
 80009a8:	f003 030c 	and.w	r3, r3, #12
 80009ac:	2b08      	cmp	r3, #8
 80009ae:	d110      	bne.n	80009d2 <HAL_RCC_OscConfig+0x106>
 80009b0:	6863      	ldr	r3, [r4, #4]
 80009b2:	03da      	lsls	r2, r3, #15
 80009b4:	d40d      	bmi.n	80009d2 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80009b6:	6823      	ldr	r3, [r4, #0]
 80009b8:	079b      	lsls	r3, r3, #30
 80009ba:	d502      	bpl.n	80009c2 <HAL_RCC_OscConfig+0xf6>
 80009bc:	692b      	ldr	r3, [r5, #16]
 80009be:	2b01      	cmp	r3, #1
 80009c0:	d1af      	bne.n	8000922 <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009c2:	6823      	ldr	r3, [r4, #0]
 80009c4:	696a      	ldr	r2, [r5, #20]
 80009c6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80009ca:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80009ce:	6023      	str	r3, [r4, #0]
 80009d0:	e785      	b.n	80008de <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80009d2:	692a      	ldr	r2, [r5, #16]
 80009d4:	4b5a      	ldr	r3, [pc, #360]	; (8000b40 <HAL_RCC_OscConfig+0x274>)
 80009d6:	b16a      	cbz	r2, 80009f4 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 80009d8:	2201      	movs	r2, #1
 80009da:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80009dc:	f7ff fbf8 	bl	80001d0 <HAL_GetTick>
 80009e0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009e2:	6823      	ldr	r3, [r4, #0]
 80009e4:	079f      	lsls	r7, r3, #30
 80009e6:	d4ec      	bmi.n	80009c2 <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80009e8:	f7ff fbf2 	bl	80001d0 <HAL_GetTick>
 80009ec:	1b80      	subs	r0, r0, r6
 80009ee:	2802      	cmp	r0, #2
 80009f0:	d9f7      	bls.n	80009e2 <HAL_RCC_OscConfig+0x116>
 80009f2:	e7ad      	b.n	8000950 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 80009f4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80009f6:	f7ff fbeb 	bl	80001d0 <HAL_GetTick>
 80009fa:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80009fc:	6823      	ldr	r3, [r4, #0]
 80009fe:	0798      	lsls	r0, r3, #30
 8000a00:	f57f af6d 	bpl.w	80008de <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a04:	f7ff fbe4 	bl	80001d0 <HAL_GetTick>
 8000a08:	1b80      	subs	r0, r0, r6
 8000a0a:	2802      	cmp	r0, #2
 8000a0c:	d9f6      	bls.n	80009fc <HAL_RCC_OscConfig+0x130>
 8000a0e:	e79f      	b.n	8000950 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000a10:	69aa      	ldr	r2, [r5, #24]
 8000a12:	4c4a      	ldr	r4, [pc, #296]	; (8000b3c <HAL_RCC_OscConfig+0x270>)
 8000a14:	4b4b      	ldr	r3, [pc, #300]	; (8000b44 <HAL_RCC_OscConfig+0x278>)
 8000a16:	b1da      	cbz	r2, 8000a50 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8000a18:	2201      	movs	r2, #1
 8000a1a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000a1c:	f7ff fbd8 	bl	80001d0 <HAL_GetTick>
 8000a20:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000a24:	079b      	lsls	r3, r3, #30
 8000a26:	d50d      	bpl.n	8000a44 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000a28:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000a2c:	4b46      	ldr	r3, [pc, #280]	; (8000b48 <HAL_RCC_OscConfig+0x27c>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	fbb3 f3f2 	udiv	r3, r3, r2
 8000a34:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8000a36:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8000a38:	9b01      	ldr	r3, [sp, #4]
 8000a3a:	1e5a      	subs	r2, r3, #1
 8000a3c:	9201      	str	r2, [sp, #4]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d1f9      	bne.n	8000a36 <HAL_RCC_OscConfig+0x16a>
 8000a42:	e750      	b.n	80008e6 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a44:	f7ff fbc4 	bl	80001d0 <HAL_GetTick>
 8000a48:	1b80      	subs	r0, r0, r6
 8000a4a:	2802      	cmp	r0, #2
 8000a4c:	d9e9      	bls.n	8000a22 <HAL_RCC_OscConfig+0x156>
 8000a4e:	e77f      	b.n	8000950 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8000a50:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000a52:	f7ff fbbd 	bl	80001d0 <HAL_GetTick>
 8000a56:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000a5a:	079f      	lsls	r7, r3, #30
 8000a5c:	f57f af43 	bpl.w	80008e6 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a60:	f7ff fbb6 	bl	80001d0 <HAL_GetTick>
 8000a64:	1b80      	subs	r0, r0, r6
 8000a66:	2802      	cmp	r0, #2
 8000a68:	d9f6      	bls.n	8000a58 <HAL_RCC_OscConfig+0x18c>
 8000a6a:	e771      	b.n	8000950 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a6c:	4c33      	ldr	r4, [pc, #204]	; (8000b3c <HAL_RCC_OscConfig+0x270>)
 8000a6e:	69e3      	ldr	r3, [r4, #28]
 8000a70:	00d8      	lsls	r0, r3, #3
 8000a72:	d424      	bmi.n	8000abe <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8000a74:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000a76:	69e3      	ldr	r3, [r4, #28]
 8000a78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a7c:	61e3      	str	r3, [r4, #28]
 8000a7e:	69e3      	ldr	r3, [r4, #28]
 8000a80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a84:	9300      	str	r3, [sp, #0]
 8000a86:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a88:	4e30      	ldr	r6, [pc, #192]	; (8000b4c <HAL_RCC_OscConfig+0x280>)
 8000a8a:	6833      	ldr	r3, [r6, #0]
 8000a8c:	05d9      	lsls	r1, r3, #23
 8000a8e:	d518      	bpl.n	8000ac2 <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a90:	68eb      	ldr	r3, [r5, #12]
 8000a92:	2b01      	cmp	r3, #1
 8000a94:	d126      	bne.n	8000ae4 <HAL_RCC_OscConfig+0x218>
 8000a96:	6a23      	ldr	r3, [r4, #32]
 8000a98:	f043 0301 	orr.w	r3, r3, #1
 8000a9c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000a9e:	f7ff fb97 	bl	80001d0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000aa2:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000aa6:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000aa8:	6a23      	ldr	r3, [r4, #32]
 8000aaa:	079b      	lsls	r3, r3, #30
 8000aac:	d53f      	bpl.n	8000b2e <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8000aae:	2f00      	cmp	r7, #0
 8000ab0:	f43f af1d 	beq.w	80008ee <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ab4:	69e3      	ldr	r3, [r4, #28]
 8000ab6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000aba:	61e3      	str	r3, [r4, #28]
 8000abc:	e717      	b.n	80008ee <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8000abe:	2700      	movs	r7, #0
 8000ac0:	e7e2      	b.n	8000a88 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ac2:	6833      	ldr	r3, [r6, #0]
 8000ac4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ac8:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000aca:	f7ff fb81 	bl	80001d0 <HAL_GetTick>
 8000ace:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ad0:	6833      	ldr	r3, [r6, #0]
 8000ad2:	05da      	lsls	r2, r3, #23
 8000ad4:	d4dc      	bmi.n	8000a90 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ad6:	f7ff fb7b 	bl	80001d0 <HAL_GetTick>
 8000ada:	eba0 0008 	sub.w	r0, r0, r8
 8000ade:	2864      	cmp	r0, #100	; 0x64
 8000ae0:	d9f6      	bls.n	8000ad0 <HAL_RCC_OscConfig+0x204>
 8000ae2:	e735      	b.n	8000950 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ae4:	b9ab      	cbnz	r3, 8000b12 <HAL_RCC_OscConfig+0x246>
 8000ae6:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ae8:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000aec:	f023 0301 	bic.w	r3, r3, #1
 8000af0:	6223      	str	r3, [r4, #32]
 8000af2:	6a23      	ldr	r3, [r4, #32]
 8000af4:	f023 0304 	bic.w	r3, r3, #4
 8000af8:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000afa:	f7ff fb69 	bl	80001d0 <HAL_GetTick>
 8000afe:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b00:	6a23      	ldr	r3, [r4, #32]
 8000b02:	0798      	lsls	r0, r3, #30
 8000b04:	d5d3      	bpl.n	8000aae <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b06:	f7ff fb63 	bl	80001d0 <HAL_GetTick>
 8000b0a:	1b80      	subs	r0, r0, r6
 8000b0c:	4540      	cmp	r0, r8
 8000b0e:	d9f7      	bls.n	8000b00 <HAL_RCC_OscConfig+0x234>
 8000b10:	e71e      	b.n	8000950 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b12:	2b05      	cmp	r3, #5
 8000b14:	6a23      	ldr	r3, [r4, #32]
 8000b16:	d103      	bne.n	8000b20 <HAL_RCC_OscConfig+0x254>
 8000b18:	f043 0304 	orr.w	r3, r3, #4
 8000b1c:	6223      	str	r3, [r4, #32]
 8000b1e:	e7ba      	b.n	8000a96 <HAL_RCC_OscConfig+0x1ca>
 8000b20:	f023 0301 	bic.w	r3, r3, #1
 8000b24:	6223      	str	r3, [r4, #32]
 8000b26:	6a23      	ldr	r3, [r4, #32]
 8000b28:	f023 0304 	bic.w	r3, r3, #4
 8000b2c:	e7b6      	b.n	8000a9c <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b2e:	f7ff fb4f 	bl	80001d0 <HAL_GetTick>
 8000b32:	eba0 0008 	sub.w	r0, r0, r8
 8000b36:	42b0      	cmp	r0, r6
 8000b38:	d9b6      	bls.n	8000aa8 <HAL_RCC_OscConfig+0x1dc>
 8000b3a:	e709      	b.n	8000950 <HAL_RCC_OscConfig+0x84>
 8000b3c:	40021000 	.word	0x40021000
 8000b40:	42420000 	.word	0x42420000
 8000b44:	42420480 	.word	0x42420480
 8000b48:	20000008 	.word	0x20000008
 8000b4c:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000b50:	4c22      	ldr	r4, [pc, #136]	; (8000bdc <HAL_RCC_OscConfig+0x310>)
 8000b52:	6863      	ldr	r3, [r4, #4]
 8000b54:	f003 030c 	and.w	r3, r3, #12
 8000b58:	2b08      	cmp	r3, #8
 8000b5a:	f43f aee2 	beq.w	8000922 <HAL_RCC_OscConfig+0x56>
 8000b5e:	2300      	movs	r3, #0
 8000b60:	4e1f      	ldr	r6, [pc, #124]	; (8000be0 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b62:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000b64:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b66:	d12b      	bne.n	8000bc0 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8000b68:	f7ff fb32 	bl	80001d0 <HAL_GetTick>
 8000b6c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b6e:	6823      	ldr	r3, [r4, #0]
 8000b70:	0199      	lsls	r1, r3, #6
 8000b72:	d41f      	bmi.n	8000bb4 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000b74:	6a2b      	ldr	r3, [r5, #32]
 8000b76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b7a:	d105      	bne.n	8000b88 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000b7c:	6862      	ldr	r2, [r4, #4]
 8000b7e:	68a9      	ldr	r1, [r5, #8]
 8000b80:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000b84:	430a      	orrs	r2, r1
 8000b86:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000b88:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000b8a:	6862      	ldr	r2, [r4, #4]
 8000b8c:	430b      	orrs	r3, r1
 8000b8e:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000b92:	4313      	orrs	r3, r2
 8000b94:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8000b96:	2301      	movs	r3, #1
 8000b98:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000b9a:	f7ff fb19 	bl	80001d0 <HAL_GetTick>
 8000b9e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000ba0:	6823      	ldr	r3, [r4, #0]
 8000ba2:	019a      	lsls	r2, r3, #6
 8000ba4:	f53f aea7 	bmi.w	80008f6 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ba8:	f7ff fb12 	bl	80001d0 <HAL_GetTick>
 8000bac:	1b40      	subs	r0, r0, r5
 8000bae:	2802      	cmp	r0, #2
 8000bb0:	d9f6      	bls.n	8000ba0 <HAL_RCC_OscConfig+0x2d4>
 8000bb2:	e6cd      	b.n	8000950 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000bb4:	f7ff fb0c 	bl	80001d0 <HAL_GetTick>
 8000bb8:	1bc0      	subs	r0, r0, r7
 8000bba:	2802      	cmp	r0, #2
 8000bbc:	d9d7      	bls.n	8000b6e <HAL_RCC_OscConfig+0x2a2>
 8000bbe:	e6c7      	b.n	8000950 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8000bc0:	f7ff fb06 	bl	80001d0 <HAL_GetTick>
 8000bc4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000bc6:	6823      	ldr	r3, [r4, #0]
 8000bc8:	019b      	lsls	r3, r3, #6
 8000bca:	f57f ae94 	bpl.w	80008f6 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000bce:	f7ff faff 	bl	80001d0 <HAL_GetTick>
 8000bd2:	1b40      	subs	r0, r0, r5
 8000bd4:	2802      	cmp	r0, #2
 8000bd6:	d9f6      	bls.n	8000bc6 <HAL_RCC_OscConfig+0x2fa>
 8000bd8:	e6ba      	b.n	8000950 <HAL_RCC_OscConfig+0x84>
 8000bda:	bf00      	nop
 8000bdc:	40021000 	.word	0x40021000
 8000be0:	42420060 	.word	0x42420060

08000be4 <HAL_RCC_GetSysClockFreq>:
{
 8000be4:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000be6:	4b19      	ldr	r3, [pc, #100]	; (8000c4c <HAL_RCC_GetSysClockFreq+0x68>)
{
 8000be8:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000bea:	ac02      	add	r4, sp, #8
 8000bec:	f103 0510 	add.w	r5, r3, #16
 8000bf0:	4622      	mov	r2, r4
 8000bf2:	6818      	ldr	r0, [r3, #0]
 8000bf4:	6859      	ldr	r1, [r3, #4]
 8000bf6:	3308      	adds	r3, #8
 8000bf8:	c203      	stmia	r2!, {r0, r1}
 8000bfa:	42ab      	cmp	r3, r5
 8000bfc:	4614      	mov	r4, r2
 8000bfe:	d1f7      	bne.n	8000bf0 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000c00:	2301      	movs	r3, #1
 8000c02:	f88d 3004 	strb.w	r3, [sp, #4]
 8000c06:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8000c08:	4911      	ldr	r1, [pc, #68]	; (8000c50 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000c0a:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8000c0e:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000c10:	f003 020c 	and.w	r2, r3, #12
 8000c14:	2a08      	cmp	r2, #8
 8000c16:	d117      	bne.n	8000c48 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000c18:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8000c1c:	a806      	add	r0, sp, #24
 8000c1e:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000c20:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000c22:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000c26:	d50c      	bpl.n	8000c42 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000c28:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000c2a:	480a      	ldr	r0, [pc, #40]	; (8000c54 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000c2c:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000c30:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000c32:	aa06      	add	r2, sp, #24
 8000c34:	4413      	add	r3, r2
 8000c36:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000c3a:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8000c3e:	b007      	add	sp, #28
 8000c40:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000c42:	4805      	ldr	r0, [pc, #20]	; (8000c58 <HAL_RCC_GetSysClockFreq+0x74>)
 8000c44:	4350      	muls	r0, r2
 8000c46:	e7fa      	b.n	8000c3e <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8000c48:	4802      	ldr	r0, [pc, #8]	; (8000c54 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8000c4a:	e7f8      	b.n	8000c3e <HAL_RCC_GetSysClockFreq+0x5a>
 8000c4c:	08001238 	.word	0x08001238
 8000c50:	40021000 	.word	0x40021000
 8000c54:	007a1200 	.word	0x007a1200
 8000c58:	003d0900 	.word	0x003d0900

08000c5c <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000c5c:	4a54      	ldr	r2, [pc, #336]	; (8000db0 <HAL_RCC_ClockConfig+0x154>)
{
 8000c5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000c62:	6813      	ldr	r3, [r2, #0]
{
 8000c64:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000c66:	f003 0307 	and.w	r3, r3, #7
 8000c6a:	428b      	cmp	r3, r1
{
 8000c6c:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000c6e:	d32a      	bcc.n	8000cc6 <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000c70:	6829      	ldr	r1, [r5, #0]
 8000c72:	078c      	lsls	r4, r1, #30
 8000c74:	d434      	bmi.n	8000ce0 <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000c76:	07ca      	lsls	r2, r1, #31
 8000c78:	d447      	bmi.n	8000d0a <HAL_RCC_ClockConfig+0xae>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000c7a:	4a4d      	ldr	r2, [pc, #308]	; (8000db0 <HAL_RCC_ClockConfig+0x154>)
 8000c7c:	6813      	ldr	r3, [r2, #0]
 8000c7e:	f003 0307 	and.w	r3, r3, #7
 8000c82:	429e      	cmp	r6, r3
 8000c84:	f0c0 8082 	bcc.w	8000d8c <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c88:	682a      	ldr	r2, [r5, #0]
 8000c8a:	4c4a      	ldr	r4, [pc, #296]	; (8000db4 <HAL_RCC_ClockConfig+0x158>)
 8000c8c:	f012 0f04 	tst.w	r2, #4
 8000c90:	f040 8087 	bne.w	8000da2 <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c94:	0713      	lsls	r3, r2, #28
 8000c96:	d506      	bpl.n	8000ca6 <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000c98:	6863      	ldr	r3, [r4, #4]
 8000c9a:	692a      	ldr	r2, [r5, #16]
 8000c9c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000ca0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000ca4:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000ca6:	f7ff ff9d 	bl	8000be4 <HAL_RCC_GetSysClockFreq>
 8000caa:	6863      	ldr	r3, [r4, #4]
 8000cac:	4a42      	ldr	r2, [pc, #264]	; (8000db8 <HAL_RCC_ClockConfig+0x15c>)
 8000cae:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000cb2:	5cd3      	ldrb	r3, [r2, r3]
 8000cb4:	40d8      	lsrs	r0, r3
 8000cb6:	4b41      	ldr	r3, [pc, #260]	; (8000dbc <HAL_RCC_ClockConfig+0x160>)
 8000cb8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000cba:	2000      	movs	r0, #0
 8000cbc:	f7ff fa46 	bl	800014c <HAL_InitTick>
  return HAL_OK;
 8000cc0:	2000      	movs	r0, #0
}
 8000cc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000cc6:	6813      	ldr	r3, [r2, #0]
 8000cc8:	f023 0307 	bic.w	r3, r3, #7
 8000ccc:	430b      	orrs	r3, r1
 8000cce:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000cd0:	6813      	ldr	r3, [r2, #0]
 8000cd2:	f003 0307 	and.w	r3, r3, #7
 8000cd6:	4299      	cmp	r1, r3
 8000cd8:	d0ca      	beq.n	8000c70 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8000cda:	2001      	movs	r0, #1
 8000cdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000ce0:	4b34      	ldr	r3, [pc, #208]	; (8000db4 <HAL_RCC_ClockConfig+0x158>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ce2:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000ce6:	bf1e      	ittt	ne
 8000ce8:	685a      	ldrne	r2, [r3, #4]
 8000cea:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8000cee:	605a      	strne	r2, [r3, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000cf0:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000cf2:	bf42      	ittt	mi
 8000cf4:	685a      	ldrmi	r2, [r3, #4]
 8000cf6:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8000cfa:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000cfc:	685a      	ldr	r2, [r3, #4]
 8000cfe:	68a8      	ldr	r0, [r5, #8]
 8000d00:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000d04:	4302      	orrs	r2, r0
 8000d06:	605a      	str	r2, [r3, #4]
 8000d08:	e7b5      	b.n	8000c76 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d0a:	686a      	ldr	r2, [r5, #4]
 8000d0c:	4c29      	ldr	r4, [pc, #164]	; (8000db4 <HAL_RCC_ClockConfig+0x158>)
 8000d0e:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d10:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d12:	d11c      	bne.n	8000d4e <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d14:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d18:	d0df      	beq.n	8000cda <HAL_RCC_ClockConfig+0x7e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d1a:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d1c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d20:	f023 0303 	bic.w	r3, r3, #3
 8000d24:	4313      	orrs	r3, r2
 8000d26:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8000d28:	f7ff fa52 	bl	80001d0 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d2c:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8000d2e:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d30:	2b01      	cmp	r3, #1
 8000d32:	d114      	bne.n	8000d5e <HAL_RCC_ClockConfig+0x102>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d34:	6863      	ldr	r3, [r4, #4]
 8000d36:	f003 030c 	and.w	r3, r3, #12
 8000d3a:	2b04      	cmp	r3, #4
 8000d3c:	d09d      	beq.n	8000c7a <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d3e:	f7ff fa47 	bl	80001d0 <HAL_GetTick>
 8000d42:	1bc0      	subs	r0, r0, r7
 8000d44:	4540      	cmp	r0, r8
 8000d46:	d9f5      	bls.n	8000d34 <HAL_RCC_ClockConfig+0xd8>
          return HAL_TIMEOUT;
 8000d48:	2003      	movs	r0, #3
 8000d4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000d4e:	2a02      	cmp	r2, #2
 8000d50:	d102      	bne.n	8000d58 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d52:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000d56:	e7df      	b.n	8000d18 <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d58:	f013 0f02 	tst.w	r3, #2
 8000d5c:	e7dc      	b.n	8000d18 <HAL_RCC_ClockConfig+0xbc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000d5e:	2b02      	cmp	r3, #2
 8000d60:	d10f      	bne.n	8000d82 <HAL_RCC_ClockConfig+0x126>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000d62:	6863      	ldr	r3, [r4, #4]
 8000d64:	f003 030c 	and.w	r3, r3, #12
 8000d68:	2b08      	cmp	r3, #8
 8000d6a:	d086      	beq.n	8000c7a <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d6c:	f7ff fa30 	bl	80001d0 <HAL_GetTick>
 8000d70:	1bc0      	subs	r0, r0, r7
 8000d72:	4540      	cmp	r0, r8
 8000d74:	d9f5      	bls.n	8000d62 <HAL_RCC_ClockConfig+0x106>
 8000d76:	e7e7      	b.n	8000d48 <HAL_RCC_ClockConfig+0xec>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d78:	f7ff fa2a 	bl	80001d0 <HAL_GetTick>
 8000d7c:	1bc0      	subs	r0, r0, r7
 8000d7e:	4540      	cmp	r0, r8
 8000d80:	d8e2      	bhi.n	8000d48 <HAL_RCC_ClockConfig+0xec>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d82:	6863      	ldr	r3, [r4, #4]
 8000d84:	f013 0f0c 	tst.w	r3, #12
 8000d88:	d1f6      	bne.n	8000d78 <HAL_RCC_ClockConfig+0x11c>
 8000d8a:	e776      	b.n	8000c7a <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d8c:	6813      	ldr	r3, [r2, #0]
 8000d8e:	f023 0307 	bic.w	r3, r3, #7
 8000d92:	4333      	orrs	r3, r6
 8000d94:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000d96:	6813      	ldr	r3, [r2, #0]
 8000d98:	f003 0307 	and.w	r3, r3, #7
 8000d9c:	429e      	cmp	r6, r3
 8000d9e:	d19c      	bne.n	8000cda <HAL_RCC_ClockConfig+0x7e>
 8000da0:	e772      	b.n	8000c88 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000da2:	6863      	ldr	r3, [r4, #4]
 8000da4:	68e9      	ldr	r1, [r5, #12]
 8000da6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000daa:	430b      	orrs	r3, r1
 8000dac:	6063      	str	r3, [r4, #4]
 8000dae:	e771      	b.n	8000c94 <HAL_RCC_ClockConfig+0x38>
 8000db0:	40022000 	.word	0x40022000
 8000db4:	40021000 	.word	0x40021000
 8000db8:	08001275 	.word	0x08001275
 8000dbc:	20000008 	.word	0x20000008

08000dc0 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000dc0:	4b04      	ldr	r3, [pc, #16]	; (8000dd4 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000dc2:	4a05      	ldr	r2, [pc, #20]	; (8000dd8 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8000dca:	5cd3      	ldrb	r3, [r2, r3]
 8000dcc:	4a03      	ldr	r2, [pc, #12]	; (8000ddc <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000dce:	6810      	ldr	r0, [r2, #0]
}    
 8000dd0:	40d8      	lsrs	r0, r3
 8000dd2:	4770      	bx	lr
 8000dd4:	40021000 	.word	0x40021000
 8000dd8:	08001285 	.word	0x08001285
 8000ddc:	20000008 	.word	0x20000008

08000de0 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000de0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000de2:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
	data_l = ((cmd<<4)&0xf0);
 8000de6:	0100      	lsls	r0, r0, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000de8:	f043 020c 	orr.w	r2, r3, #12
	data_l = ((cmd<<4)&0xf0);
 8000dec:	b2c0      	uxtb	r0, r0
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000dee:	f043 0308 	orr.w	r3, r3, #8
 8000df2:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000df6:	f040 030c 	orr.w	r3, r0, #12
 8000dfa:	f88d 300e 	strb.w	r3, [sp, #14]
	data_t[3] = data_l|0x08;  //en=0, rs=0
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000dfe:	2364      	movs	r3, #100	; 0x64
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000e00:	f040 0008 	orr.w	r0, r0, #8
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000e04:	f88d 200c 	strb.w	r2, [sp, #12]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000e08:	f88d 000f 	strb.w	r0, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000e0c:	9300      	str	r3, [sp, #0]
 8000e0e:	aa03      	add	r2, sp, #12
 8000e10:	2304      	movs	r3, #4
 8000e12:	214e      	movs	r1, #78	; 0x4e
 8000e14:	4802      	ldr	r0, [pc, #8]	; (8000e20 <lcd_send_cmd+0x40>)
 8000e16:	f7ff fc83 	bl	8000720 <HAL_I2C_Master_Transmit>
}
 8000e1a:	b005      	add	sp, #20
 8000e1c:	f85d fb04 	ldr.w	pc, [sp], #4
 8000e20:	2000002c 	.word	0x2000002c

08000e24 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000e24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000e26:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 8000e2a:	0100      	lsls	r0, r0, #4
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 8000e2c:	f043 020d 	orr.w	r2, r3, #13
	data_l = ((data<<4)&0xf0);
 8000e30:	b2c0      	uxtb	r0, r0
	data_t[1] = data_u|0x09;  //en=0, rs=1
 8000e32:	f043 0309 	orr.w	r3, r3, #9
 8000e36:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 8000e3a:	f040 030d 	orr.w	r3, r0, #13
 8000e3e:	f88d 300e 	strb.w	r3, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=1
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000e42:	2364      	movs	r3, #100	; 0x64
	data_t[3] = data_l|0x09;  //en=0, rs=1
 8000e44:	f040 0009 	orr.w	r0, r0, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 8000e48:	f88d 200c 	strb.w	r2, [sp, #12]
	data_t[3] = data_l|0x09;  //en=0, rs=1
 8000e4c:	f88d 000f 	strb.w	r0, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000e50:	9300      	str	r3, [sp, #0]
 8000e52:	aa03      	add	r2, sp, #12
 8000e54:	2304      	movs	r3, #4
 8000e56:	214e      	movs	r1, #78	; 0x4e
 8000e58:	4802      	ldr	r0, [pc, #8]	; (8000e64 <lcd_send_data+0x40>)
 8000e5a:	f7ff fc61 	bl	8000720 <HAL_I2C_Master_Transmit>
}
 8000e5e:	b005      	add	sp, #20
 8000e60:	f85d fb04 	ldr.w	pc, [sp], #4
 8000e64:	2000002c 	.word	0x2000002c

08000e68 <lcd_init>:
		lcd_send_data (' ');
	}
}

void lcd_init (void)
{
 8000e68:	b508      	push	{r3, lr}
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000e6a:	2032      	movs	r0, #50	; 0x32
 8000e6c:	f7ff f9b6 	bl	80001dc <HAL_Delay>
	lcd_send_cmd (0x30);
 8000e70:	2030      	movs	r0, #48	; 0x30
 8000e72:	f7ff ffb5 	bl	8000de0 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000e76:	2005      	movs	r0, #5
 8000e78:	f7ff f9b0 	bl	80001dc <HAL_Delay>
	lcd_send_cmd (0x30);
 8000e7c:	2030      	movs	r0, #48	; 0x30
 8000e7e:	f7ff ffaf 	bl	8000de0 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000e82:	2001      	movs	r0, #1
 8000e84:	f7ff f9aa 	bl	80001dc <HAL_Delay>
	lcd_send_cmd (0x30);
 8000e88:	2030      	movs	r0, #48	; 0x30
 8000e8a:	f7ff ffa9 	bl	8000de0 <lcd_send_cmd>
	HAL_Delay(10);
 8000e8e:	200a      	movs	r0, #10
 8000e90:	f7ff f9a4 	bl	80001dc <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000e94:	2020      	movs	r0, #32
 8000e96:	f7ff ffa3 	bl	8000de0 <lcd_send_cmd>
	HAL_Delay(10);
 8000e9a:	200a      	movs	r0, #10
 8000e9c:	f7ff f99e 	bl	80001dc <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000ea0:	2028      	movs	r0, #40	; 0x28
 8000ea2:	f7ff ff9d 	bl	8000de0 <lcd_send_cmd>
	HAL_Delay(1);
 8000ea6:	2001      	movs	r0, #1
 8000ea8:	f7ff f998 	bl	80001dc <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000eac:	2008      	movs	r0, #8
 8000eae:	f7ff ff97 	bl	8000de0 <lcd_send_cmd>
	HAL_Delay(1);
 8000eb2:	2001      	movs	r0, #1
 8000eb4:	f7ff f992 	bl	80001dc <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000eb8:	2001      	movs	r0, #1
 8000eba:	f7ff ff91 	bl	8000de0 <lcd_send_cmd>
	HAL_Delay(1);
 8000ebe:	2001      	movs	r0, #1
 8000ec0:	f7ff f98c 	bl	80001dc <HAL_Delay>
	HAL_Delay(1);
 8000ec4:	2001      	movs	r0, #1
 8000ec6:	f7ff f989 	bl	80001dc <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000eca:	2006      	movs	r0, #6
 8000ecc:	f7ff ff88 	bl	8000de0 <lcd_send_cmd>
	HAL_Delay(1);
 8000ed0:	2001      	movs	r0, #1
 8000ed2:	f7ff f983 	bl	80001dc <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
}
 8000ed6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000eda:	200c      	movs	r0, #12
 8000edc:	f7ff bf80 	b.w	8000de0 <lcd_send_cmd>

08000ee0 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000ee0:	b510      	push	{r4, lr}
 8000ee2:	1e44      	subs	r4, r0, #1
	while (*str) lcd_send_data (*str++);
 8000ee4:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8000ee8:	b900      	cbnz	r0, 8000eec <lcd_send_string+0xc>
}
 8000eea:	bd10      	pop	{r4, pc}
	while (*str) lcd_send_data (*str++);
 8000eec:	f7ff ff9a 	bl	8000e24 <lcd_send_data>
 8000ef0:	e7f8      	b.n	8000ee4 <lcd_send_string+0x4>

08000ef2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ef2:	b510      	push	{r4, lr}
 8000ef4:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ef6:	2228      	movs	r2, #40	; 0x28
 8000ef8:	2100      	movs	r1, #0
 8000efa:	a806      	add	r0, sp, #24
 8000efc:	f000 f988 	bl	8001210 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f00:	2100      	movs	r1, #0
 8000f02:	2214      	movs	r2, #20
 8000f04:	a801      	add	r0, sp, #4
 8000f06:	f000 f983 	bl	8001210 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f0a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f0e:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f10:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f12:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f14:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000f16:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f1a:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f1c:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f1e:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000f20:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f22:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f24:	f7ff fcd2 	bl	80008cc <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f28:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f2a:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f2e:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f30:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f32:	4621      	mov	r1, r4
 8000f34:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f36:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f38:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f3a:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f3c:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f3e:	f7ff fe8d 	bl	8000c5c <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8000f42:	b010      	add	sp, #64	; 0x40
 8000f44:	bd10      	pop	{r4, pc}
	...

08000f48 <main>:
{
 8000f48:	b510      	push	{r4, lr}
 8000f4a:	b088      	sub	sp, #32
  HAL_Init();
 8000f4c:	f7ff f922 	bl	8000194 <HAL_Init>
  SystemClock_Config();
 8000f50:	f7ff ffcf 	bl	8000ef2 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f54:	2210      	movs	r2, #16
 8000f56:	2100      	movs	r1, #0
 8000f58:	eb0d 0002 	add.w	r0, sp, r2
 8000f5c:	f000 f958 	bl	8001210 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f60:	4b3b      	ldr	r3, [pc, #236]	; (8001050 <main+0x108>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000f62:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f66:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000f68:	483a      	ldr	r0, [pc, #232]	; (8001054 <main+0x10c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f6a:	f042 0210 	orr.w	r2, r2, #16
 8000f6e:	619a      	str	r2, [r3, #24]
 8000f70:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f72:	2400      	movs	r4, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f74:	f002 0210 	and.w	r2, r2, #16
 8000f78:	9200      	str	r2, [sp, #0]
 8000f7a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f7c:	699a      	ldr	r2, [r3, #24]
 8000f7e:	f042 0220 	orr.w	r2, r2, #32
 8000f82:	619a      	str	r2, [r3, #24]
 8000f84:	699a      	ldr	r2, [r3, #24]
 8000f86:	f002 0220 	and.w	r2, r2, #32
 8000f8a:	9201      	str	r2, [sp, #4]
 8000f8c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8e:	699a      	ldr	r2, [r3, #24]
 8000f90:	f042 0204 	orr.w	r2, r2, #4
 8000f94:	619a      	str	r2, [r3, #24]
 8000f96:	699a      	ldr	r2, [r3, #24]
 8000f98:	f002 0204 	and.w	r2, r2, #4
 8000f9c:	9202      	str	r2, [sp, #8]
 8000f9e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa0:	699a      	ldr	r2, [r3, #24]
 8000fa2:	f042 0208 	orr.w	r2, r2, #8
 8000fa6:	619a      	str	r2, [r3, #24]
 8000fa8:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000faa:	2201      	movs	r2, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fac:	f003 0308 	and.w	r3, r3, #8
 8000fb0:	9303      	str	r3, [sp, #12]
 8000fb2:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000fb4:	f7ff fa60 	bl	8000478 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000fb8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fbc:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc2:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fc4:	a904      	add	r1, sp, #16
 8000fc6:	4823      	ldr	r0, [pc, #140]	; (8001054 <main+0x10c>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc8:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fca:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fcc:	f7ff f974 	bl	80002b8 <HAL_GPIO_Init>
  hi2c1.Init.ClockSpeed = 100000;
 8000fd0:	4a21      	ldr	r2, [pc, #132]	; (8001058 <main+0x110>)
  hi2c1.Instance = I2C1;
 8000fd2:	4822      	ldr	r0, [pc, #136]	; (800105c <main+0x114>)
  hi2c1.Init.ClockSpeed = 100000;
 8000fd4:	4b22      	ldr	r3, [pc, #136]	; (8001060 <main+0x118>)
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000fd6:	6084      	str	r4, [r0, #8]
  hi2c1.Init.ClockSpeed = 100000;
 8000fd8:	e880 000c 	stmia.w	r0, {r2, r3}
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fdc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  hi2c1.Init.OwnAddress1 = 0;
 8000fe0:	60c4      	str	r4, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fe2:	6103      	str	r3, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fe4:	6144      	str	r4, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000fe6:	6184      	str	r4, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fe8:	61c4      	str	r4, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fea:	6204      	str	r4, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fec:	f7ff fb18 	bl	8000620 <HAL_I2C_Init>
  lcd_init();
 8000ff0:	f7ff ff3a 	bl	8000e68 <lcd_init>
  lcd_send_cmd (0x80|0x00);
 8000ff4:	2080      	movs	r0, #128	; 0x80
 8000ff6:	f7ff fef3 	bl	8000de0 <lcd_send_cmd>
  lcd_send_string("HELLO WORLD");
 8000ffa:	481a      	ldr	r0, [pc, #104]	; (8001064 <main+0x11c>)
 8000ffc:	f7ff ff70 	bl	8000ee0 <lcd_send_string>
  lcd_send_cmd (0x80|0x40);
 8001000:	20c0      	movs	r0, #192	; 0xc0
 8001002:	f7ff feed 	bl	8000de0 <lcd_send_cmd>
  lcd_send_string("LCD 20x4 DEMO");
 8001006:	4818      	ldr	r0, [pc, #96]	; (8001068 <main+0x120>)
 8001008:	f7ff ff6a 	bl	8000ee0 <lcd_send_string>
  lcd_send_cmd (0x80|0x1C);
 800100c:	209c      	movs	r0, #156	; 0x9c
 800100e:	f7ff fee7 	bl	8000de0 <lcd_send_cmd>
  lcd_send_string("BY");
 8001012:	4816      	ldr	r0, [pc, #88]	; (800106c <main+0x124>)
 8001014:	f7ff ff64 	bl	8000ee0 <lcd_send_string>
  lcd_send_cmd (0x80|0x54);
 8001018:	20d4      	movs	r0, #212	; 0xd4
 800101a:	f7ff fee1 	bl	8000de0 <lcd_send_cmd>
    lcd_send_string("ControllersTech");
 800101e:	4814      	ldr	r0, [pc, #80]	; (8001070 <main+0x128>)
 8001020:	f7ff ff5e 	bl	8000ee0 <lcd_send_string>
{
 8001024:	2405      	movs	r4, #5
		  lcd_send_cmd (0x1C);  // display shift right
 8001026:	201c      	movs	r0, #28
 8001028:	f7ff feda 	bl	8000de0 <lcd_send_cmd>
		  HAL_Delay(350);
 800102c:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8001030:	f7ff f8d4 	bl	80001dc <HAL_Delay>
	  for (int i=0; i<5; i++)
 8001034:	3c01      	subs	r4, #1
 8001036:	d1f6      	bne.n	8001026 <main+0xde>
 8001038:	2405      	movs	r4, #5
		  lcd_send_cmd (0x18);  // display shift left
 800103a:	2018      	movs	r0, #24
 800103c:	f7ff fed0 	bl	8000de0 <lcd_send_cmd>
		  HAL_Delay(350);
 8001040:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8001044:	f7ff f8ca 	bl	80001dc <HAL_Delay>
	  for (int i=0; i<5; i++)
 8001048:	3c01      	subs	r4, #1
 800104a:	d1f6      	bne.n	800103a <main+0xf2>
 800104c:	e7ea      	b.n	8001024 <main+0xdc>
 800104e:	bf00      	nop
 8001050:	40021000 	.word	0x40021000
 8001054:	40011000 	.word	0x40011000
 8001058:	40005400 	.word	0x40005400
 800105c:	2000002c 	.word	0x2000002c
 8001060:	000186a0 	.word	0x000186a0
 8001064:	08001248 	.word	0x08001248
 8001068:	08001254 	.word	0x08001254
 800106c:	08001262 	.word	0x08001262
 8001070:	08001265 	.word	0x08001265

08001074 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001074:	4b0e      	ldr	r3, [pc, #56]	; (80010b0 <HAL_MspInit+0x3c>)
{
 8001076:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001078:	699a      	ldr	r2, [r3, #24]
 800107a:	f042 0201 	orr.w	r2, r2, #1
 800107e:	619a      	str	r2, [r3, #24]
 8001080:	699a      	ldr	r2, [r3, #24]
 8001082:	f002 0201 	and.w	r2, r2, #1
 8001086:	9200      	str	r2, [sp, #0]
 8001088:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800108a:	69da      	ldr	r2, [r3, #28]
 800108c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001090:	61da      	str	r2, [r3, #28]
 8001092:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001094:	4a07      	ldr	r2, [pc, #28]	; (80010b4 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001096:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800109a:	9301      	str	r3, [sp, #4]
 800109c:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800109e:	6853      	ldr	r3, [r2, #4]
 80010a0:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80010a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80010a8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010aa:	b002      	add	sp, #8
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	40021000 	.word	0x40021000
 80010b4:	40010000 	.word	0x40010000

080010b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010b8:	b510      	push	{r4, lr}
 80010ba:	4604      	mov	r4, r0
 80010bc:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010be:	2210      	movs	r2, #16
 80010c0:	2100      	movs	r1, #0
 80010c2:	a802      	add	r0, sp, #8
 80010c4:	f000 f8a4 	bl	8001210 <memset>
  if(hi2c->Instance==I2C1)
 80010c8:	6822      	ldr	r2, [r4, #0]
 80010ca:	4b11      	ldr	r3, [pc, #68]	; (8001110 <HAL_I2C_MspInit+0x58>)
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d11c      	bne.n	800110a <HAL_I2C_MspInit+0x52>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d0:	4c10      	ldr	r4, [pc, #64]	; (8001114 <HAL_I2C_MspInit+0x5c>)
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010d2:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d4:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010d6:	4810      	ldr	r0, [pc, #64]	; (8001118 <HAL_I2C_MspInit+0x60>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d8:	f043 0308 	orr.w	r3, r3, #8
 80010dc:	61a3      	str	r3, [r4, #24]
 80010de:	69a3      	ldr	r3, [r4, #24]
 80010e0:	f003 0308 	and.w	r3, r3, #8
 80010e4:	9300      	str	r3, [sp, #0]
 80010e6:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010e8:	23c0      	movs	r3, #192	; 0xc0
 80010ea:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010ec:	2312      	movs	r3, #18
 80010ee:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010f0:	2303      	movs	r3, #3
 80010f2:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010f4:	f7ff f8e0 	bl	80002b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010f8:	69e3      	ldr	r3, [r4, #28]
 80010fa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010fe:	61e3      	str	r3, [r4, #28]
 8001100:	69e3      	ldr	r3, [r4, #28]
 8001102:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001106:	9301      	str	r3, [sp, #4]
 8001108:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800110a:	b006      	add	sp, #24
 800110c:	bd10      	pop	{r4, pc}
 800110e:	bf00      	nop
 8001110:	40005400 	.word	0x40005400
 8001114:	40021000 	.word	0x40021000
 8001118:	40010c00 	.word	0x40010c00

0800111c <NMI_Handler>:
 800111c:	4770      	bx	lr

0800111e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800111e:	e7fe      	b.n	800111e <HardFault_Handler>

08001120 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001120:	e7fe      	b.n	8001120 <MemManage_Handler>

08001122 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001122:	e7fe      	b.n	8001122 <BusFault_Handler>

08001124 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001124:	e7fe      	b.n	8001124 <UsageFault_Handler>

08001126 <SVC_Handler>:
 8001126:	4770      	bx	lr

08001128 <DebugMon_Handler>:
 8001128:	4770      	bx	lr

0800112a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800112a:	4770      	bx	lr

0800112c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800112c:	f7ff b844 	b.w	80001b8 <HAL_IncTick>

08001130 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001130:	4b0f      	ldr	r3, [pc, #60]	; (8001170 <SystemInit+0x40>)
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	f042 0201 	orr.w	r2, r2, #1
 8001138:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800113a:	6859      	ldr	r1, [r3, #4]
 800113c:	4a0d      	ldr	r2, [pc, #52]	; (8001174 <SystemInit+0x44>)
 800113e:	400a      	ands	r2, r1
 8001140:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001148:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800114c:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001154:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001156:	685a      	ldr	r2, [r3, #4]
 8001158:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 800115c:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800115e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001162:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001164:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001168:	4b03      	ldr	r3, [pc, #12]	; (8001178 <SystemInit+0x48>)
 800116a:	609a      	str	r2, [r3, #8]
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	40021000 	.word	0x40021000
 8001174:	f8ff0000 	.word	0xf8ff0000
 8001178:	e000ed00 	.word	0xe000ed00

0800117c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800117c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800117e:	e003      	b.n	8001188 <LoopCopyDataInit>

08001180 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001180:	4b0b      	ldr	r3, [pc, #44]	; (80011b0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001182:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001184:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001186:	3104      	adds	r1, #4

08001188 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001188:	480a      	ldr	r0, [pc, #40]	; (80011b4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800118a:	4b0b      	ldr	r3, [pc, #44]	; (80011b8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800118c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800118e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001190:	d3f6      	bcc.n	8001180 <CopyDataInit>
  ldr r2, =_sbss
 8001192:	4a0a      	ldr	r2, [pc, #40]	; (80011bc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001194:	e002      	b.n	800119c <LoopFillZerobss>

08001196 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001196:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001198:	f842 3b04 	str.w	r3, [r2], #4

0800119c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800119c:	4b08      	ldr	r3, [pc, #32]	; (80011c0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800119e:	429a      	cmp	r2, r3
  bcc FillZerobss
 80011a0:	d3f9      	bcc.n	8001196 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80011a2:	f7ff ffc5 	bl	8001130 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011a6:	f000 f80f 	bl	80011c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011aa:	f7ff fecd 	bl	8000f48 <main>
  bx lr
 80011ae:	4770      	bx	lr
  ldr r3, =_sidata
 80011b0:	08001298 	.word	0x08001298
  ldr r0, =_sdata
 80011b4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80011b8:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 80011bc:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 80011c0:	20000080 	.word	0x20000080

080011c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011c4:	e7fe      	b.n	80011c4 <ADC1_2_IRQHandler>
	...

080011c8 <__libc_init_array>:
 80011c8:	b570      	push	{r4, r5, r6, lr}
 80011ca:	2500      	movs	r5, #0
 80011cc:	4e0c      	ldr	r6, [pc, #48]	; (8001200 <__libc_init_array+0x38>)
 80011ce:	4c0d      	ldr	r4, [pc, #52]	; (8001204 <__libc_init_array+0x3c>)
 80011d0:	1ba4      	subs	r4, r4, r6
 80011d2:	10a4      	asrs	r4, r4, #2
 80011d4:	42a5      	cmp	r5, r4
 80011d6:	d109      	bne.n	80011ec <__libc_init_array+0x24>
 80011d8:	f000 f822 	bl	8001220 <_init>
 80011dc:	2500      	movs	r5, #0
 80011de:	4e0a      	ldr	r6, [pc, #40]	; (8001208 <__libc_init_array+0x40>)
 80011e0:	4c0a      	ldr	r4, [pc, #40]	; (800120c <__libc_init_array+0x44>)
 80011e2:	1ba4      	subs	r4, r4, r6
 80011e4:	10a4      	asrs	r4, r4, #2
 80011e6:	42a5      	cmp	r5, r4
 80011e8:	d105      	bne.n	80011f6 <__libc_init_array+0x2e>
 80011ea:	bd70      	pop	{r4, r5, r6, pc}
 80011ec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80011f0:	4798      	blx	r3
 80011f2:	3501      	adds	r5, #1
 80011f4:	e7ee      	b.n	80011d4 <__libc_init_array+0xc>
 80011f6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80011fa:	4798      	blx	r3
 80011fc:	3501      	adds	r5, #1
 80011fe:	e7f2      	b.n	80011e6 <__libc_init_array+0x1e>
 8001200:	08001290 	.word	0x08001290
 8001204:	08001290 	.word	0x08001290
 8001208:	08001290 	.word	0x08001290
 800120c:	08001294 	.word	0x08001294

08001210 <memset>:
 8001210:	4603      	mov	r3, r0
 8001212:	4402      	add	r2, r0
 8001214:	4293      	cmp	r3, r2
 8001216:	d100      	bne.n	800121a <memset+0xa>
 8001218:	4770      	bx	lr
 800121a:	f803 1b01 	strb.w	r1, [r3], #1
 800121e:	e7f9      	b.n	8001214 <memset+0x4>

08001220 <_init>:
 8001220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001222:	bf00      	nop
 8001224:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001226:	bc08      	pop	{r3}
 8001228:	469e      	mov	lr, r3
 800122a:	4770      	bx	lr

0800122c <_fini>:
 800122c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800122e:	bf00      	nop
 8001230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001232:	bc08      	pop	{r3}
 8001234:	469e      	mov	lr, r3
 8001236:	4770      	bx	lr
